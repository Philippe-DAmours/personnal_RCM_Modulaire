/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2024-02-19 11:26:30.108422
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52;
x0=IKcos(j[1]);
x1=IKcos(j[3]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[3]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKsin(j[1]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=((0.16)*x1);
x13=((0.17086)*x4);
x14=((0.1417)*x1);
x15=((1.0)*x4);
x16=((0.17086)*x6);
x17=((0.16)*x0);
x18=((0.1417)*x6);
x19=((0.54)*x1);
x20=((0.16)*x6);
x21=((1.0)*x1);
x22=(x0*x3);
x23=(x3*x7);
x24=((-1.0)*x8);
x25=(x1*x2);
x26=(x6*x9);
x27=(x5*x7);
x28=(x2*x4);
x29=(x3*x4);
x30=(x6*x8);
x31=(x0*x2);
x32=(x0*x5);
x33=(x0*x6);
x34=((-1.0)*x9);
x35=(x1*x3);
x36=(x2*x21);
x37=(x28*x7);
x38=(x35+x28);
x39=((((-1.0)*x36))+x29);
x40=(x39*x8);
x41=(x38*x5);
x42=((((-1.0)*x15*x22))+((x0*x25)));
x43=(((x0*x28))+((x1*x22)));
x44=((((-1.0)*x15*x23))+((x25*x7)));
x45=(((x1*x23))+x37);
x46=(x42*x6);
x47=(x44*x5);
x48=(((x42*x5))+((x6*x7)));
x49=(x32+((x44*x6)));
x50=((((-1.0)*x27))+x46);
x51=(x49*x9);
x52=(x50*x9);
eerot[0]=(((x8*(((((-1.0)*x27))+x46))))+((x9*(((((-1.0)*x21*x22))+(((-1.0)*x15*x31)))))));
eerot[1]=(((x10*x48))+((x11*((((x34*x50))+((x24*x43)))))));
eerot[2]=(((x10*((x52+((x43*x8))))))+((x11*x48)));
IkReal x53=((1.0)*x22);
IkReal x54=(x0*x28);
eetrans[0]=(((x8*((((x17*x28))+((x12*x22))))))+((x19*x22))+((x9*(((((-1.0)*x14*x53))+(((-0.1417)*x54))))))+(((0.54)*x54))+((x16*x7))+(((0.71)*x31))+((x8*(((((-0.1417)*x27))+((x18*x42))))))+((x9*((((x20*x42))+(((-0.16)*x27))))))+((x5*(((((-1.0)*x13*x53))+(((0.17086)*x0*x25)))))));
eerot[3]=(((x9*(((((-1.0)*x21*x23))+(((-1.0)*x15*x2*x7))))))+((x49*x8)));
eerot[4]=(((x10*(((((-1.0)*x33))+x47))))+((x11*((((x34*x49))+((x24*x45)))))));
eerot[5]=(((x11*(((((-1.0)*x33))+x47))))+((x10*((x51+((x45*x8)))))));
IkReal x55=((1.0)*x23);
eetrans[1]=(((x9*(((((-1.0)*x14*x55))+(((-0.1417)*x37))))))+((x19*x23))+((x8*((((x12*x23))+(((0.16)*x37))))))+(((-1.0)*x0*x16))+((x8*((((x18*x44))+(((0.1417)*x32))))))+(((0.71)*x2*x7))+(((0.54)*x37))+((x9*((((x20*x44))+((x17*x5))))))+((x5*(((((-1.0)*x13*x55))+(((0.17086)*x25*x7)))))));
eerot[6]=(((x9*((x36+(((-1.0)*x15*x3))))))+((x30*x38)));
eerot[7]=(((x10*x41))+((x11*(((((-1.0)*x40))+(((-1.0)*x26*x38)))))));
eerot[8]=(((x11*x41))+((x10*((((x26*x38))+x40)))));
IkReal x56=((1.0)*x2);
eetrans[2]=((1.0434)+(((0.54)*x29))+((x9*(((((-0.1417)*x29))+((x14*x2))))))+(((-1.0)*x19*x56))+((x8*(((((-1.0)*x12*x56))+(((0.16)*x29))))))+((x30*((((x14*x3))+(((0.1417)*x28))))))+((x5*(((((0.17086)*x35))+((x13*x2))))))+(((0.71)*x3))+j[0]+((x26*((((x12*x3))+(((0.16)*x28)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API const int* GetFreeIndices() { static const int freeindices[] = {0}; return freeindices; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij0[2], _nj0;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r01;
new_r02=((-1.0)*r00);
new_px=((((-0.1417)*r00))+px);
new_r10=r12;
new_r11=r11;
new_r12=((-1.0)*r10);
new_py=(py+(((-0.1417)*r10)));
new_r20=r22;
new_r21=r21;
new_r22=((-1.0)*r20);
new_pz=((-1.0434)+(((-0.1417)*r20))+pz+(((-1.0)*j0)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x57=((1.0)*px);
IkReal x58=((1.0)*pz);
IkReal x59=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x59))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x58)));
rxp0_2=((((-1.0)*r10*x57))+((py*r00)));
rxp1_0=((((-1.0)*r21*x59))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x58)));
rxp1_2=((((-1.0)*r11*x57))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x59)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x58)));
rxp2_2=((((-1.0)*r12*x57))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x60=((8710848.0)*rxp2_0);
IkReal x61=((5686737.20969256)*r01);
IkReal x62=((38654388.0)*rxp1_1);
IkReal x63=((9302096.808)*px);
IkReal x64=((6184702.08)*r12);
IkReal x65=((1488335.48928)*r00);
IkReal x66=((9302096.808)*pz);
IkReal x67=((1488335.48928)*r20);
IkReal x68=((8710848.0)*rxp2_2);
IkReal x69=((5686737.20969256)*r21);
IkReal x70=((2976670.97856)*r01);
IkReal x71=((11373474.4193851)*r00);
IkReal x72=((77308776.0)*rxp0_1);
IkReal x73=((20.0)*py);
IkReal x74=((3.4172)*r11);
IkReal x75=((3.2)*r10);
IkReal x76=((12369404.16)*r02);
IkReal x77=((17421696.0)*rxp2_1);
IkReal x78=((11373474.4193851)*r11);
IkReal x79=((77308776.0)*rxp1_0);
IkReal x80=((2976670.97856)*r10);
IkReal x81=((18604193.616)*py);
IkReal x82=((5953341.95712)*r11);
IkReal x83=((22746948.8387702)*r10);
IkReal x84=((154617552.0)*rxp0_0);
IkReal x85=((40.0)*px);
IkReal x86=((6.8344)*r01);
IkReal x87=((6.4)*r00);
IkReal x88=((6.8344)*r10);
IkReal x89=((6.4)*r11);
IkReal x90=((27221400.0)*pp);
IkReal x91=((54442800.0)*npy);
IkReal x92=((108885600.0)*npx);
IkReal x93=((54442800.0)*pp);
IkReal x94=(r01*x90);
IkReal x95=(px*x91);
IkReal x96=(pz*x91);
IkReal x97=(r21*x90);
IkReal x98=(r00*x93);
IkReal x99=(px*x92);
IkReal x100=(x89+(((-1.0)*x88)));
IkReal x101=(r11*x93);
IkReal x102=((108885600.0)*npy*py);
IkReal x103=((108885600.0)*pp*r10);
IkReal x104=((217771200.0)*npx*py);
IkReal x105=((((13.6688)*r00))+(((-12.8)*r01)));
IkReal x106=(x88+(((-1.0)*x89)));
IkReal x107=(x75+x74);
IkReal x108=(x76+x79);
IkReal x109=(x86+x87);
IkReal x110=(x62+x63);
IkReal x111=(x60+x62);
IkReal x112=((((-1.0)*x107))+x73);
IkReal x113=(x109+(((-1.0)*x85)));
IkReal x114=(x72+x99);
IkReal x115=((((-1.0)*x73))+x107);
IkReal x116=(x65+x95);
IkReal x117=(x69+x97);
IkReal x118=(x67+x96);
IkReal x119=(x61+x94);
IkReal x120=(x107+x73);
IkReal x121=((((-1.0)*x109))+(((-1.0)*x85)));
IkReal x122=((-1.0)*x120);
IkReal x123=(x116+x60);
IkReal x124=(x119+x63);
IkReal x125=(x71+x70+x98);
IkReal x126=(x101+x78+x81);
IkReal x127=(x102+x77+x80);
IkReal x128=(x103+x82+x83);
IkReal x129=(x119+x64);
IkReal x130=(x102+x80+x81);
IkReal x131=(x101+x77+x78);
IkReal x132=((((-1.0)*pz*x92))+((r20*x93))+(((2976670.97856)*r21))+(((11373474.4193851)*r20)));
IkReal x133=(x125+x72);
IkReal x134=(x116+x63+x64);
IkReal x135=(x111+x119);
IkReal x136=(x129+x60);
IkReal x137=(x110+x116);
IkReal x138=(x129+x110);
IkReal x139=(x111+x116+x64);
IkReal x140=((((-1.0)*x118))+x117+x66+(((-1.0)*x68)));
IkReal x141=((((-1.0)*x117))+x118+x66+(((-1.0)*x68)));
op[0]=(x123+(((-1.0)*x138)));
op[1]=x140;
op[2]=((((-1.0)*x133))+x99);
op[3]=x132;
op[4]=(x135+(((-1.0)*x134)));
op[5]=x141;
op[6]=x140;
op[7]=(x124+(((-1.0)*x139)));
op[8]=x132;
op[9]=((((-1.0)*x114))+x125);
op[10]=x141;
op[11]=(x137+(((-1.0)*x136)));
op[12]=x112;
op[13]=x112;
op[14]=x100;
op[15]=x100;
op[16]=x120;
op[17]=x120;
op[18]=0;
op[19]=x112;
op[20]=0;
op[21]=x100;
op[22]=0;
op[23]=x120;
op[24]=((((-1.0)*x126))+x127+x108);
op[25]=0;
op[26]=((((-1.0)*x128))+x104+x84);
op[27]=0;
op[28]=((((-1.0)*x79))+x131+(((-1.0)*x130))+x76);
op[29]=0;
op[30]=0;
op[31]=((((-1.0)*x127))+x126+x108);
op[32]=0;
op[33]=((((-1.0)*x104))+x128+x84);
op[34]=0;
op[35]=((((-1.0)*x79))+x130+(((-1.0)*x131))+x76);
op[36]=x113;
op[37]=x113;
op[38]=x105;
op[39]=x105;
op[40]=x121;
op[41]=x121;
op[42]=0;
op[43]=x113;
op[44]=0;
op[45]=x105;
op[46]=0;
op[47]=x121;
op[48]=((((-1.0)*x123))+x138);
op[49]=x140;
op[50]=(x133+(((-1.0)*x99)));
op[51]=x132;
op[52]=(x134+(((-1.0)*x135)));
op[53]=x141;
op[54]=x140;
op[55]=((((-1.0)*x124))+x139);
op[56]=x132;
op[57]=((((-1.0)*x125))+x114);
op[58]=x141;
op[59]=(x136+(((-1.0)*x137)));
op[60]=x115;
op[61]=x115;
op[62]=x106;
op[63]=x106;
op[64]=x122;
op[65]=x122;
op[66]=0;
op[67]=x115;
op[68]=0;
op[69]=x106;
op[70]=0;
op[71]=x122;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j6array[16], cj6array[16], sj6array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj6 = zeror[ij1+1], htj2 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj6)||isnan(htj2)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j6array[numsolutions]=((2.0)*(atan(htj6)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x142=htj1*htj1;
CheckValue<IkReal> x143=IKPowWithIntegerCheck(((1.0)+x142),-1);
if(!x143.valid){
continue;
}
cj1array[numsolutions]=((x143.value)*(((1.0)+(((-1.0)*x142)))));
CheckValue<IkReal> x144=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x144.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x144.value));
}
if(isinf(htj6)){
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
}
else{
IkReal x145=htj6*htj6;
CheckValue<IkReal> x146=IKPowWithIntegerCheck(((1.0)+x145),-1);
if(!x146.valid){
continue;
}
cj6array[numsolutions]=((x146.value)*(((1.0)+(((-1.0)*x145)))));
CheckValue<IkReal> x147=IKPowWithIntegerCheck(((1.0)+(htj6*htj6)),-1);
if(!x147.valid){
continue;
}
sj6array[numsolutions]=((2.0)*htj6*(x147.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x148=htj2*htj2;
CheckValue<IkReal> x149=IKPowWithIntegerCheck(((1.0)+x148),-1);
if(!x149.valid){
continue;
}
cj2array[numsolutions]=((x149.value)*(((1.0)+(((-1.0)*x148)))));
CheckValue<IkReal> x150=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x150.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x150.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj6 = 1;
_nj2 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij1]-cj6array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij1]-sj6array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij6[1] = 0; _ij2[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j6 = j6array[ij1]; cj6 = cj6array[ij1]; sj6 = sj6array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x151=((1.0)*cj1);
cj4array[0]=((((-1.0)*cj6*r11*x151))+((cj6*r01*sj1))+(((-1.0)*r10*sj6*x151))+((r00*sj1*sj6)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x152=((0.16)*sj6);
IkReal x153=(r01*sj1);
IkReal x154=(cj1*r11);
IkReal x155=((0.02086)*sj6);
IkReal x156=(r00*sj1);
IkReal x157=((0.02086)*cj6);
IkReal x158=(cj1*r10);
IkReal x159=((0.16)*cj6);
evalcond[0]=((((-1.0)*x153*x157))+(((-0.15)*(IKcos(j4))))+((x152*x153))+(((-1.0)*cj1*py))+((x155*x158))+(((-1.0)*x152*x154))+((x154*x157))+(((-1.0)*x156*x159))+((px*sj1))+((x158*x159))+(((-1.0)*x155*x156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x160=cj4*cj4;
j3eval[0]=((-1.0)+x160);
j3eval[1]=IKsign(((-0.15)+(((0.15)*x160))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x161=cj1*cj1;
IkReal x162=cj6*cj6;
IkReal x163=r01*r01;
IkReal x164=r02*r02;
IkReal x165=r11*r11;
IkReal x166=r00*r00;
IkReal x167=(cj1*r10);
IkReal x168=((1.0)*sj4);
IkReal x169=((2.0)*sj1);
IkReal x170=(cj6*sj6);
IkReal x171=(cj1*r12);
IkReal x172=(cj1*r11);
IkReal x173=(r00*r01);
IkReal x174=((2.0)*x161);
IkReal x175=((1.0)*x162);
IkReal x176=(r01*x172);
IkReal x177=(x161*x165);
IkReal x178=(x161*x163);
IkReal x179=(((x161*x164))+(((-1.0)*x175*x178))+(((2.0)*x170*x173))+((r10*r11*x170*x174))+((r00*x162*x167*x169))+(((-1.0)*x170*x173*x174))+((x162*x177))+(((-1.0)*x161*(r12*r12)))+(((-1.0)*r01*x167*x169*x170))+((x162*x163))+((x169*x176))+(((-1.0)*x177))+(((-1.0)*x162*x169*x176))+x178+(((-1.0)*x164))+(((-1.0)*x163))+(((-1.0)*x161*x175*(r10*r10)))+((x161*x162*x166))+((r02*x169*x171))+(((-1.0)*r00*x169*x170*x172))+(((-1.0)*x166*x175)));
j5eval[0]=x179;
j5eval[1]=((IKabs((((sj4*x171))+(((-1.0)*r02*sj1*x168)))))+(IKabs((((sj4*sj6*x172))+((cj6*r00*sj1*sj4))+(((-1.0)*r01*sj1*sj6*x168))+(((-1.0)*cj6*x167*x168))))));
j5eval[2]=IKsign(x179);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj4=0;
cj4=1.0;
j4=0;
IkReal x180=((1.0)*cj1);
j5eval[0]=((IKabs(((((-1.0)*r12*x180))+((r02*sj1)))))+(IKabs((((cj6*r00*sj1))+((cj1*r11*sj6))+(((-1.0)*r01*sj1*sj6))+(((-1.0)*cj6*r10*x180))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=1.0;
j4=0;
IkReal x181=((1.0)*sj1);
j5eval[0]=((IKabs((((cj6*r00*sj1))+(((-1.0)*cj1*cj6*r10))+(((-1.0)*r01*sj6*x181))+((cj1*r11*sj6)))))+(IKabs(((((-1.0)*r02*x181))+((cj1*r12))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj4=0;
cj4=1.0;
j4=0;
j3eval[0]=cj6;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3, j5]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x201=IKPowWithIntegerCheck(cj6,-1);
if(!x201.valid){
continue;
}
IkReal x182=x201.value;
IkReal x183=((0.296296296296296)*r10);
IkReal x184=((0.0386296296296296)*r11);
IkReal x185=((0.296296296296296)*cj2);
IkReal x186=(r20*x182);
IkReal x187=(cj1*cj2);
IkReal x188=((1.85185185185185)*px);
IkReal x189=((0.0386296296296296)*sj6);
IkReal x190=(cj2*sj1);
IkReal x191=(cj1*sj2);
IkReal x192=(sj1*sj2);
IkReal x193=((0.296296296296296)*sj2);
IkReal x194=(r11*sj6);
IkReal x195=((1.85185185185185)*pz);
IkReal x196=((1.85185185185185)*py);
IkReal x197=(r01*sj6);
IkReal x198=(cj6*x192);
IkReal x199=(cj1*cj6*r00);
IkReal x200=((0.0386296296296296)*cj6*r01);
if( IKabs(((-1.31481481481481)+(((0.296296296296296)*x192*x194))+(((-1.0)*r10*x189*x192))+(((-1.0)*x191*x200))+((x188*x191))+((x192*x196))+(((-1.0)*x184*x198))+((cj2*x195))+(((-1.0)*x185*x186))+(((0.296296296296296)*x191*x197))+(((-1.0)*x183*x198))+(((-0.296296296296296)*cj6*r00*x191))+(((-1.0)*r00*x189*x191)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x189*x190))+(((-1.0)*cj6*x183*x190))+((sj1*x185*x194))+((x186*x193))+(((-1.0)*x187*x200))+((x187*x188))+((cj1*x185*x197))+(((-1.0)*cj6*x184*x190))+(((-1.0)*sj2*x195))+(((-1.0)*x185*x199))+((x190*x196))+(((-1.0)*r00*x187*x189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.31481481481481)+(((0.296296296296296)*x192*x194))+(((-1.0)*r10*x189*x192))+(((-1.0)*x191*x200))+((x188*x191))+((x192*x196))+(((-1.0)*x184*x198))+((cj2*x195))+(((-1.0)*x185*x186))+(((0.296296296296296)*x191*x197))+(((-1.0)*x183*x198))+(((-0.296296296296296)*cj6*r00*x191))+(((-1.0)*r00*x189*x191))))+IKsqr(((((-1.0)*r10*x189*x190))+(((-1.0)*cj6*x183*x190))+((sj1*x185*x194))+((x186*x193))+(((-1.0)*x187*x200))+((x187*x188))+((cj1*x185*x197))+(((-1.0)*cj6*x184*x190))+(((-1.0)*sj2*x195))+(((-1.0)*x185*x199))+((x190*x196))+(((-1.0)*r00*x187*x189))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.31481481481481)+(((0.296296296296296)*x192*x194))+(((-1.0)*r10*x189*x192))+(((-1.0)*x191*x200))+((x188*x191))+((x192*x196))+(((-1.0)*x184*x198))+((cj2*x195))+(((-1.0)*x185*x186))+(((0.296296296296296)*x191*x197))+(((-1.0)*x183*x198))+(((-0.296296296296296)*cj6*r00*x191))+(((-1.0)*r00*x189*x191))), ((((-1.0)*r10*x189*x190))+(((-1.0)*cj6*x183*x190))+((sj1*x185*x194))+((x186*x193))+(((-1.0)*x187*x200))+((x187*x188))+((cj1*x185*x197))+(((-1.0)*cj6*x184*x190))+(((-1.0)*sj2*x195))+(((-1.0)*x185*x199))+((x190*x196))+(((-1.0)*r00*x187*x189))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x202=IKcos(j3);
IkReal x203=IKsin(j3);
IkReal x204=(sj1*sj6);
IkReal x205=(cj1*r00);
IkReal x206=((0.16)*cj6);
IkReal x207=(cj1*r01);
IkReal x208=((0.02086)*cj6);
IkReal x209=((0.54)*x203);
IkReal x210=((0.54)*x202);
CheckValue<IkReal> x211=IKPowWithIntegerCheck(cj6,-1);
if(!x211.valid){
continue;
}
evalcond[0]=((((-0.16)*r20*(x211.value)*(sj6*sj6)))+(((-0.71)*cj2))+((sj2*x210))+pz+(((-1.0)*r20*x206))+(((-1.0)*cj2*x209)));
evalcond[1]=(((x205*x206))+((cj2*x210))+(((-1.0)*cj1*px))+(((0.02086)*r10*x204))+(((0.02086)*sj6*x205))+(((-1.0)*py*sj1))+(((-0.16)*r11*x204))+(((0.71)*sj2))+((r11*sj1*x208))+((r10*sj1*x206))+(((-0.16)*sj6*x207))+((x207*x208))+((sj2*x209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x212=r21*r21;
IkReal x213=cj6*cj6;
IkReal x214=((((2.0)*cj6*r20*r21*sj6))+((x212*x213))+(((-1.0)*x213*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x212)));
j5eval[0]=x214;
j5eval[1]=IKsign(x214);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x215=((1.0)*cj1);
IkReal x216=((1.0)*sj1);
IkReal x217=((((-1.0)*r00*sj6*x215))+(((-1.0)*r10*sj6*x216))+(((-1.0)*cj6*r01*x215))+(((-1.0)*cj6*r11*x216)));
j5eval[0]=x217;
j5eval[1]=IKsign(x217);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x218=cj6*cj6;
IkReal x219=(cj6*sj6);
IkReal x220=(r00*sj1);
IkReal x221=((1.0)*r21);
IkReal x222=(cj1*r20);
IkReal x223=(r01*sj1);
IkReal x224=(cj1*r11);
IkReal x225=((((-1.0)*x218*x221*x223))+(((-1.0)*r20*x219*x223))+((r11*x219*x222))+(((-1.0)*x219*x220*x221))+((r21*x218*x224))+(((-1.0)*cj1*r12*r22))+((r20*x218*x220))+(((-1.0)*x221*x224))+((cj1*r10*r21*x219))+(((-1.0)*r10*x218*x222))+((r02*r22*sj1))+((r21*x223)));
j5eval[0]=x225;
j5eval[1]=IKsign(x225);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x226=cj6*cj6;
IkReal x227=(r02*sj1);
IkReal x228=(cj6*sj6);
IkReal x229=(r21*sj1);
IkReal x230=((1.0)*r00);
IkReal x231=(cj1*r11);
IkReal x232=(cj2*sj3);
IkReal x233=(cj3*sj2);
IkReal x234=(cj1*r12);
IkReal x235=(cj6*sj1);
IkReal x236=((1.0)*r01);
IkReal x237=(sj1*sj6);
IkReal x238=(r20*sj1);
IkReal x239=(cj1*r10);
IkReal x240=((1.0)*x239);
CheckValue<IkReal> x241=IKPowWithIntegerCheck(IKsign((((r21*x226*x231))+(((-1.0)*r21*x231))+((r01*x229))+(((-1.0)*r22*x234))+((r21*x228*x239))+(((-1.0)*x226*x229*x236))+(((-1.0)*r20*x226*x240))+((r20*x228*x231))+(((-1.0)*x228*x229*x230))+(((-1.0)*x228*x236*x238))+((r22*x227))+((r00*x226*x238)))),-1);
if(!x241.valid){
continue;
}
CheckValue<IkReal> x242 = IKatan2WithCheck(IkReal(((((-1.0)*x232*x234))+((x233*x234))+((x227*x232))+(((-1.0)*x227*x233)))),IkReal((((cj6*x233*x239))+(((-1.0)*cj6*x232*x240))+((r00*x232*x235))+(((-1.0)*x230*x233*x235))+(((-1.0)*x232*x236*x237))+((sj6*x231*x232))+((r01*x233*x237))+(((-1.0)*sj6*x231*x233)))),IKFAST_ATAN2_MAGTHRESH);
if(!x242.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x241.value)))+(x242.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x243=IKcos(j5);
IkReal x244=IKsin(j5);
IkReal x245=(cj3*sj2);
IkReal x246=(cj1*r12);
IkReal x247=(sj1*sj6);
IkReal x248=((1.0)*cj2);
IkReal x249=(r21*sj6);
IkReal x250=(cj6*sj1);
IkReal x251=(r12*sj1);
IkReal x252=(cj1*r02);
IkReal x253=(sj2*sj3);
IkReal x254=(cj1*cj6);
IkReal x255=(r02*sj1);
IkReal x256=(cj1*sj6);
IkReal x257=(cj6*r20);
IkReal x258=(sj3*x248);
IkReal x259=((1.0)*x244);
IkReal x260=(r11*x244);
IkReal x261=((1.0)*x243);
IkReal x262=(r01*x256);
IkReal x263=(r11*x243);
evalcond[0]=((((-1.0)*x249*x261))+((r22*x244))+((x243*x257))+x245+(((-1.0)*x258)));
evalcond[1]=((((-1.0)*cj3*x248))+(((-1.0)*x249*x259))+(((-1.0)*r22*x261))+((x244*x257))+(((-1.0)*x253)));
evalcond[2]=((((-1.0)*r01*x247*x261))+(((-1.0)*r10*x254*x261))+(((-1.0)*x246*x259))+((x256*x263))+((r00*x243*x250))+((x244*x255)));
evalcond[3]=((((-1.0)*x255*x261))+(((-1.0)*r01*x247*x259))+((r00*x244*x250))+((x256*x260))+(((-1.0)*r10*x254*x259))+((x243*x246)));
evalcond[4]=(((x244*x262))+(((-1.0)*r00*x254*x259))+((x243*x252))+((x243*x251))+x245+((x247*x260))+(((-1.0)*r10*x250*x259))+(((-1.0)*x258)));
evalcond[5]=((((-1.0)*x252*x259))+(((-1.0)*x251*x259))+((cj2*cj3))+(((-1.0)*r10*x250*x261))+x253+((x247*x263))+((x243*x262))+(((-1.0)*r00*x254*x261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x264=((1.0)*cj1);
IkReal x265=(r11*sj6);
IkReal x266=(cj2*sj3);
IkReal x267=(r00*sj1);
IkReal x268=(cj3*sj2);
IkReal x269=(r02*sj1);
IkReal x270=((1.0)*cj6);
IkReal x271=(cj6*x268);
IkReal x272=((1.0)*sj1*sj6);
CheckValue<IkReal> x273 = IKatan2WithCheck(IkReal(((((-1.0)*x264*x265*x266))+(((-1.0)*x266*x267*x270))+(((-1.0)*r01*x268*x272))+((cj1*cj6*r10*x266))+(((-1.0)*r10*x264*x271))+((r01*sj1*sj6*x266))+((cj1*x265*x268))+((x267*x271)))),IkReal((((x266*x269))+(((-1.0)*x268*x269))+((cj1*r12*x268))+(((-1.0)*r12*x264*x266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x273.valid){
continue;
}
CheckValue<IkReal> x274=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x264))+(((-1.0)*r10*x272))+(((-1.0)*cj6*r01*x264))+(((-1.0)*r11*sj1*x270)))),-1);
if(!x274.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x273.value)+(((1.5707963267949)*(x274.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x275=IKcos(j5);
IkReal x276=IKsin(j5);
IkReal x277=(cj3*sj2);
IkReal x278=(cj1*r12);
IkReal x279=(sj1*sj6);
IkReal x280=((1.0)*cj2);
IkReal x281=(r21*sj6);
IkReal x282=(cj6*sj1);
IkReal x283=(r12*sj1);
IkReal x284=(cj1*r02);
IkReal x285=(sj2*sj3);
IkReal x286=(cj1*cj6);
IkReal x287=(r02*sj1);
IkReal x288=(cj1*sj6);
IkReal x289=(cj6*r20);
IkReal x290=(sj3*x280);
IkReal x291=((1.0)*x276);
IkReal x292=(r11*x276);
IkReal x293=((1.0)*x275);
IkReal x294=(r01*x288);
IkReal x295=(r11*x275);
evalcond[0]=(((r22*x276))+(((-1.0)*x290))+x277+((x275*x289))+(((-1.0)*x281*x293)));
evalcond[1]=((((-1.0)*cj3*x280))+(((-1.0)*x285))+(((-1.0)*r22*x293))+(((-1.0)*x281*x291))+((x276*x289)));
evalcond[2]=((((-1.0)*r10*x286*x293))+((r00*x275*x282))+(((-1.0)*r01*x279*x293))+(((-1.0)*x278*x291))+((x276*x287))+((x288*x295)));
evalcond[3]=(((x275*x278))+((r00*x276*x282))+(((-1.0)*r10*x286*x291))+(((-1.0)*r01*x279*x291))+(((-1.0)*x287*x293))+((x288*x292)));
evalcond[4]=((((-1.0)*x290))+(((-1.0)*r00*x286*x291))+((x276*x294))+(((-1.0)*r10*x282*x291))+x277+((x279*x292))+((x275*x284))+((x275*x283)));
evalcond[5]=((((-1.0)*x284*x291))+((x275*x294))+((cj2*cj3))+(((-1.0)*r00*x286*x293))+(((-1.0)*r10*x282*x293))+x285+((x279*x295))+(((-1.0)*x283*x291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x296=r21*r21;
IkReal x297=cj6*cj6;
IkReal x298=(sj2*sj3);
IkReal x299=(cj3*sj2);
IkReal x300=(cj2*cj3);
IkReal x301=(r21*sj6);
IkReal x302=(cj2*sj3);
IkReal x303=(cj6*r20);
IkReal x304=((1.0)*x303);
CheckValue<IkReal> x305=IKPowWithIntegerCheck(IKsign(((((-1.0)*x296))+(((-1.0)*(r22*r22)))+((x296*x297))+(((-1.0)*x297*(r20*r20)))+(((2.0)*x301*x303)))),-1);
if(!x305.valid){
continue;
}
CheckValue<IkReal> x306 = IKatan2WithCheck(IkReal(((((-1.0)*x298*x304))+((x298*x301))+((x300*x301))+(((-1.0)*x300*x304))+(((-1.0)*r22*x302))+((r22*x299)))),IkReal((((x301*x302))+((r22*x300))+(((-1.0)*x302*x304))+((x299*x303))+(((-1.0)*x299*x301))+((r22*x298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x306.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x305.value)))+(x306.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x307=IKcos(j5);
IkReal x308=IKsin(j5);
IkReal x309=(cj3*sj2);
IkReal x310=(cj1*r12);
IkReal x311=(sj1*sj6);
IkReal x312=((1.0)*cj2);
IkReal x313=(r21*sj6);
IkReal x314=(cj6*sj1);
IkReal x315=(r12*sj1);
IkReal x316=(cj1*r02);
IkReal x317=(sj2*sj3);
IkReal x318=(cj1*cj6);
IkReal x319=(r02*sj1);
IkReal x320=(cj1*sj6);
IkReal x321=(cj6*r20);
IkReal x322=(sj3*x312);
IkReal x323=((1.0)*x308);
IkReal x324=(r11*x308);
IkReal x325=((1.0)*x307);
IkReal x326=(r01*x320);
IkReal x327=(r11*x307);
evalcond[0]=(((r22*x308))+(((-1.0)*x322))+x309+(((-1.0)*x313*x325))+((x307*x321)));
evalcond[1]=(((x308*x321))+(((-1.0)*r22*x325))+(((-1.0)*x317))+(((-1.0)*x313*x323))+(((-1.0)*cj3*x312)));
evalcond[2]=((((-1.0)*r10*x318*x325))+((x320*x327))+((x308*x319))+(((-1.0)*x310*x323))+(((-1.0)*r01*x311*x325))+((r00*x307*x314)));
evalcond[3]=(((r00*x308*x314))+(((-1.0)*r10*x318*x323))+((x320*x324))+((x307*x310))+(((-1.0)*x319*x325))+(((-1.0)*r01*x311*x323)));
evalcond[4]=((((-1.0)*r00*x318*x323))+((x308*x326))+(((-1.0)*x322))+x309+((x307*x316))+((x307*x315))+((x311*x324))+(((-1.0)*r10*x314*x323)));
evalcond[5]=((((-1.0)*r00*x318*x325))+((cj2*cj3))+(((-1.0)*x315*x323))+x317+(((-1.0)*x316*x323))+((x311*x327))+(((-1.0)*r10*x314*x325))+((x307*x326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x328=((1.0)*sj1);
CheckValue<IkReal> x330 = IKatan2WithCheck(IkReal((((cj1*r12))+(((-1.0)*r02*x328)))),IkReal((((cj6*r00*sj1))+(((-1.0)*cj1*cj6*r10))+((cj1*r11*sj6))+(((-1.0)*r01*sj6*x328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x330.valid){
continue;
}
IkReal x329=x330.value;
j5array[0]=((-1.0)*x329);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x329)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x331=IKcos(j5);
IkReal x332=IKsin(j5);
IkReal x333=((1.0)*cj1);
IkReal x334=(cj6*x331);
IkReal x335=(sj6*x331);
evalcond[0]=((((-1.0)*r12*x332*x333))+(((-1.0)*r10*x333*x334))+(((-1.0)*r01*sj1*x335))+((cj1*r11*x335))+((r00*sj1*x334))+((r02*sj1*x332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x336=((1.0)*r22);
IkReal x337=(sj2*sj5);
IkReal x338=(cj2*cj5);
IkReal x339=(r21*sj6);
IkReal x340=(cj6*r20);
IkReal x341=(cj5*sj2);
IkReal x342=(cj2*sj5);
if( IKabs((((x337*x340))+(((-1.0)*x336*x341))+((r22*x342))+(((-1.0)*x337*x339))+((x338*x340))+(((-1.0)*x338*x339)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x340*x341))+(((-1.0)*x339*x342))+((x340*x342))+((x339*x341))+(((-1.0)*x336*x337))+(((-1.0)*x336*x338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x337*x340))+(((-1.0)*x336*x341))+((r22*x342))+(((-1.0)*x337*x339))+((x338*x340))+(((-1.0)*x338*x339))))+IKsqr(((((-1.0)*x340*x341))+(((-1.0)*x339*x342))+((x340*x342))+((x339*x341))+(((-1.0)*x336*x337))+(((-1.0)*x336*x338))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x337*x340))+(((-1.0)*x336*x341))+((r22*x342))+(((-1.0)*x337*x339))+((x338*x340))+(((-1.0)*x338*x339))), ((((-1.0)*x340*x341))+(((-1.0)*x339*x342))+((x340*x342))+((x339*x341))+(((-1.0)*x336*x337))+(((-1.0)*x336*x338))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x343=IKcos(j3);
IkReal x344=IKsin(j3);
IkReal x345=((0.16)*sj1);
IkReal x346=(r11*sj6);
IkReal x347=(cj6*r10);
IkReal x348=(cj5*sj1);
IkReal x349=((0.16)*r20);
IkReal x350=(cj1*sj6);
IkReal x351=((1.0)*cj5);
IkReal x352=(cj1*r02);
IkReal x353=((0.02086)*cj6);
IkReal x354=(cj6*r20);
IkReal x355=((1.0)*sj5);
IkReal x356=(r21*sj6);
IkReal x357=(sj2*x343);
IkReal x358=(cj2*x344);
IkReal x359=(cj2*x343);
IkReal x360=(sj2*x344);
IkReal x361=(cj1*cj6*r00);
IkReal x362=((1.0)*x358);
evalcond[0]=((((-1.0)*x362))+((r22*sj5))+x357+((cj5*x354))+(((-1.0)*x351*x356)));
evalcond[1]=((((-1.0)*x360))+(((-1.0)*r22*x351))+((sj5*x354))+(((-1.0)*x359))+(((-1.0)*x355*x356)));
CheckValue<IkReal> x363=IKPowWithIntegerCheck(cj6,-1);
if(!x363.valid){
continue;
}
evalcond[2]=((((-0.54)*x358))+(((-1.0)*cj6*x349))+(((-0.71)*cj2))+(((0.54)*x357))+pz+(((-1.0)*x349*(x363.value)*(sj6*sj6))));
evalcond[3]=((((-1.0)*x362))+(((-1.0)*x355*x361))+x357+((cj5*x352))+((r01*sj5*x350))+(((-1.0)*sj1*x347*x355))+((sj1*sj5*x346))+((r12*x348)));
evalcond[4]=(x359+x360+((x346*x348))+(((-1.0)*x347*x348))+((cj5*r01*x350))+(((-1.0)*x352*x355))+(((-1.0)*x351*x361))+(((-1.0)*r12*sj1*x355)));
evalcond[5]=((((0.16)*x361))+(((0.02086)*r00*x350))+(((0.54)*x360))+(((-0.16)*r01*x350))+(((0.54)*x359))+(((-1.0)*cj1*px))+((x345*x347))+((r11*sj1*x353))+(((-1.0)*x345*x346))+(((0.02086)*r10*sj1*sj6))+(((-1.0)*py*sj1))+(((0.71)*sj2))+((cj1*r01*x353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x364=((1.0)*cj1);
CheckValue<IkReal> x366 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10*x364))+((cj6*r00*sj1))+((cj1*r11*sj6))+(((-1.0)*r01*sj1*sj6)))),IkReal((((r02*sj1))+(((-1.0)*r12*x364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x366.valid){
continue;
}
IkReal x365=x366.value;
j5array[0]=((-1.0)*x365);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x365)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x367=IKsin(j5);
IkReal x368=IKcos(j5);
IkReal x369=(cj1*x367);
IkReal x370=(sj1*x367);
evalcond[0]=((((-1.0)*r02*sj1*x368))+((r11*sj6*x369))+(((-1.0)*cj6*r10*x369))+((cj6*r00*x370))+(((-1.0)*r01*sj6*x370))+((cj1*r12*x368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x371=((1.0)*r22);
IkReal x372=(sj2*sj5);
IkReal x373=(cj2*cj5);
IkReal x374=(r21*sj6);
IkReal x375=(cj6*r20);
IkReal x376=(cj5*sj2);
IkReal x377=(cj2*sj5);
if( IKabs((((x372*x375))+(((-1.0)*x372*x374))+(((-1.0)*x373*x374))+(((-1.0)*x371*x376))+((r22*x377))+((x373*x375)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x375*x377))+(((-1.0)*x374*x377))+(((-1.0)*x371*x373))+(((-1.0)*x371*x372))+((x374*x376))+(((-1.0)*x375*x376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x372*x375))+(((-1.0)*x372*x374))+(((-1.0)*x373*x374))+(((-1.0)*x371*x376))+((r22*x377))+((x373*x375))))+IKsqr((((x375*x377))+(((-1.0)*x374*x377))+(((-1.0)*x371*x373))+(((-1.0)*x371*x372))+((x374*x376))+(((-1.0)*x375*x376))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x372*x375))+(((-1.0)*x372*x374))+(((-1.0)*x373*x374))+(((-1.0)*x371*x376))+((r22*x377))+((x373*x375))), (((x375*x377))+(((-1.0)*x374*x377))+(((-1.0)*x371*x373))+(((-1.0)*x371*x372))+((x374*x376))+(((-1.0)*x375*x376))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x378=IKcos(j3);
IkReal x379=IKsin(j3);
IkReal x380=((0.16)*sj1);
IkReal x381=(r11*sj6);
IkReal x382=(cj6*r10);
IkReal x383=(cj5*sj1);
IkReal x384=((0.16)*r20);
IkReal x385=(cj1*sj6);
IkReal x386=((1.0)*cj5);
IkReal x387=(cj1*r02);
IkReal x388=((0.02086)*cj6);
IkReal x389=(cj6*r20);
IkReal x390=((1.0)*sj5);
IkReal x391=(r21*sj6);
IkReal x392=(sj2*x378);
IkReal x393=(cj2*x379);
IkReal x394=(cj2*x378);
IkReal x395=(sj2*x379);
IkReal x396=(cj1*cj6*r00);
IkReal x397=((1.0)*x393);
evalcond[0]=((((-1.0)*x397))+(((-1.0)*x386*x391))+((r22*sj5))+x392+((cj5*x389)));
evalcond[1]=((((-1.0)*x395))+(((-1.0)*x394))+((sj5*x389))+(((-1.0)*r22*x386))+(((-1.0)*x390*x391)));
CheckValue<IkReal> x398=IKPowWithIntegerCheck(cj6,-1);
if(!x398.valid){
continue;
}
evalcond[2]=((((0.54)*x392))+(((-1.0)*cj6*x384))+(((-0.71)*cj2))+(((-0.54)*x393))+pz+(((-1.0)*x384*(x398.value)*(sj6*sj6))));
evalcond[3]=((((-1.0)*x397))+((r12*x383))+x392+((sj1*sj5*x381))+((cj5*x387))+(((-1.0)*x390*x396))+(((-1.0)*sj1*x382*x390))+((r01*sj5*x385)));
evalcond[4]=((((-1.0)*x387*x390))+(((-1.0)*x382*x383))+(((-1.0)*x386*x396))+(((-1.0)*r12*sj1*x390))+x395+x394+((cj5*r01*x385))+((x381*x383)));
evalcond[5]=((((0.54)*x395))+(((0.54)*x394))+((cj1*r01*x388))+(((0.02086)*r00*x385))+(((-1.0)*x380*x381))+(((-0.16)*r01*x385))+(((-1.0)*cj1*px))+((r11*sj1*x388))+(((0.02086)*r10*sj1*sj6))+(((-1.0)*py*sj1))+(((0.71)*sj2))+((x380*x382))+(((0.16)*x396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x399=((1.0)*cj1);
j5eval[0]=((IKabs((((cj6*r00*sj1))+((cj1*r11*sj6))+(((-1.0)*r01*sj1*sj6))+(((-1.0)*cj6*r10*x399)))))+(IKabs(((((-1.0)*r12*x399))+((r02*sj1))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x400=((1.0)*sj1);
j5eval[0]=((IKabs(((((-1.0)*r02*x400))+((cj1*r12)))))+(IKabs(((((-1.0)*r01*sj6*x400))+((cj6*r00*sj1))+(((-1.0)*cj1*cj6*r10))+((cj1*r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j3eval[0]=cj6;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3, j5]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x420=IKPowWithIntegerCheck(cj6,-1);
if(!x420.valid){
continue;
}
IkReal x401=x420.value;
IkReal x402=((0.296296296296296)*r10);
IkReal x403=((0.0386296296296296)*r11);
IkReal x404=((0.296296296296296)*cj2);
IkReal x405=(r20*x401);
IkReal x406=(cj1*cj2);
IkReal x407=((1.85185185185185)*px);
IkReal x408=((0.0386296296296296)*sj6);
IkReal x409=(cj2*sj1);
IkReal x410=(cj1*sj2);
IkReal x411=(sj1*sj2);
IkReal x412=((0.296296296296296)*sj2);
IkReal x413=(r11*sj6);
IkReal x414=((1.85185185185185)*pz);
IkReal x415=((1.85185185185185)*py);
IkReal x416=(r01*sj6);
IkReal x417=(cj6*x411);
IkReal x418=(cj1*cj6*r00);
IkReal x419=((0.0386296296296296)*cj6*r01);
if( IKabs(((-1.31481481481481)+((x407*x410))+(((0.296296296296296)*x411*x413))+(((0.296296296296296)*x410*x416))+(((-0.296296296296296)*cj6*r00*x410))+((x411*x415))+(((-1.0)*x403*x417))+(((-1.0)*x402*x417))+(((-1.0)*r10*x408*x411))+(((-1.0)*x404*x405))+(((-1.0)*r00*x408*x410))+(((-1.0)*x410*x419))+((cj2*x414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x406*x419))+((x405*x412))+(((-1.0)*cj6*x403*x409))+(((-1.0)*r10*x408*x409))+((sj1*x404*x413))+((x409*x415))+(((-1.0)*cj6*x402*x409))+((x406*x407))+(((-1.0)*x404*x418))+(((-1.0)*sj2*x414))+(((-1.0)*r00*x406*x408))+((cj1*x404*x416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.31481481481481)+((x407*x410))+(((0.296296296296296)*x411*x413))+(((0.296296296296296)*x410*x416))+(((-0.296296296296296)*cj6*r00*x410))+((x411*x415))+(((-1.0)*x403*x417))+(((-1.0)*x402*x417))+(((-1.0)*r10*x408*x411))+(((-1.0)*x404*x405))+(((-1.0)*r00*x408*x410))+(((-1.0)*x410*x419))+((cj2*x414))))+IKsqr(((((-1.0)*x406*x419))+((x405*x412))+(((-1.0)*cj6*x403*x409))+(((-1.0)*r10*x408*x409))+((sj1*x404*x413))+((x409*x415))+(((-1.0)*cj6*x402*x409))+((x406*x407))+(((-1.0)*x404*x418))+(((-1.0)*sj2*x414))+(((-1.0)*r00*x406*x408))+((cj1*x404*x416))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.31481481481481)+((x407*x410))+(((0.296296296296296)*x411*x413))+(((0.296296296296296)*x410*x416))+(((-0.296296296296296)*cj6*r00*x410))+((x411*x415))+(((-1.0)*x403*x417))+(((-1.0)*x402*x417))+(((-1.0)*r10*x408*x411))+(((-1.0)*x404*x405))+(((-1.0)*r00*x408*x410))+(((-1.0)*x410*x419))+((cj2*x414))), ((((-1.0)*x406*x419))+((x405*x412))+(((-1.0)*cj6*x403*x409))+(((-1.0)*r10*x408*x409))+((sj1*x404*x413))+((x409*x415))+(((-1.0)*cj6*x402*x409))+((x406*x407))+(((-1.0)*x404*x418))+(((-1.0)*sj2*x414))+(((-1.0)*r00*x406*x408))+((cj1*x404*x416))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x421=IKcos(j3);
IkReal x422=IKsin(j3);
IkReal x423=(sj1*sj6);
IkReal x424=(cj1*r00);
IkReal x425=((0.16)*cj6);
IkReal x426=(cj1*r01);
IkReal x427=((0.02086)*cj6);
IkReal x428=((0.54)*x422);
IkReal x429=((0.54)*x421);
CheckValue<IkReal> x430=IKPowWithIntegerCheck(cj6,-1);
if(!x430.valid){
continue;
}
evalcond[0]=((((-0.16)*r20*(x430.value)*(sj6*sj6)))+(((-0.71)*cj2))+(((-1.0)*cj2*x428))+(((-1.0)*r20*x425))+pz+((sj2*x429)));
evalcond[1]=(((x426*x427))+(((-0.16)*r11*x423))+((x424*x425))+(((-1.0)*cj1*px))+(((-0.16)*sj6*x426))+((r11*sj1*x427))+(((0.02086)*sj6*x424))+(((-1.0)*py*sj1))+(((0.71)*sj2))+((cj2*x429))+((sj2*x428))+(((0.02086)*r10*x423))+((r10*sj1*x425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x431=r21*r21;
IkReal x432=cj6*cj6;
IkReal x433=((((-1.0)*x431))+(((2.0)*cj6*r20*r21*sj6))+(((-1.0)*(r22*r22)))+((x431*x432))+(((-1.0)*x432*(r20*r20))));
j5eval[0]=x433;
j5eval[1]=IKsign(x433);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x434=((1.0)*cj1);
IkReal x435=((1.0)*sj1);
IkReal x436=((((-1.0)*r10*sj6*x435))+(((-1.0)*r00*sj6*x434))+(((-1.0)*cj6*r11*x435))+(((-1.0)*cj6*r01*x434)));
j5eval[0]=x436;
j5eval[1]=IKsign(x436);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x437=cj6*cj6;
IkReal x438=(cj6*sj6);
IkReal x439=(r00*sj1);
IkReal x440=((1.0)*r21);
IkReal x441=(cj1*r20);
IkReal x442=(r01*sj1);
IkReal x443=(cj1*r11);
IkReal x444=(((r11*x438*x441))+((r21*x437*x443))+(((-1.0)*x437*x440*x442))+((r21*x442))+(((-1.0)*x438*x439*x440))+(((-1.0)*r20*x438*x442))+(((-1.0)*cj1*r12*r22))+((r20*x437*x439))+(((-1.0)*x440*x443))+(((-1.0)*r10*x437*x441))+((cj1*r10*r21*x438))+((r02*r22*sj1)));
j5eval[0]=x444;
j5eval[1]=IKsign(x444);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x445=cj6*cj6;
IkReal x446=(r02*sj1);
IkReal x447=(cj6*sj6);
IkReal x448=(r21*sj1);
IkReal x449=((1.0)*r00);
IkReal x450=(cj1*r11);
IkReal x451=(cj2*sj3);
IkReal x452=(cj3*sj2);
IkReal x453=(cj1*r12);
IkReal x454=(cj6*sj1);
IkReal x455=((1.0)*r01);
IkReal x456=(sj1*sj6);
IkReal x457=(r20*sj1);
IkReal x458=(cj1*r10);
IkReal x459=((1.0)*x458);
CheckValue<IkReal> x460 = IKatan2WithCheck(IkReal((((x452*x453))+(((-1.0)*x446*x452))+((x446*x451))+(((-1.0)*x451*x453)))),IkReal((((cj6*x452*x458))+(((-1.0)*cj6*x451*x459))+(((-1.0)*x449*x452*x454))+((r00*x451*x454))+((r01*x452*x456))+(((-1.0)*sj6*x450*x452))+(((-1.0)*x451*x455*x456))+((sj6*x450*x451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x460.valid){
continue;
}
CheckValue<IkReal> x461=IKPowWithIntegerCheck(IKsign((((r00*x445*x457))+(((-1.0)*x447*x448*x449))+(((-1.0)*r22*x453))+(((-1.0)*r21*x450))+((r21*x447*x458))+(((-1.0)*r20*x445*x459))+((r22*x446))+((r01*x448))+(((-1.0)*x445*x448*x455))+(((-1.0)*x447*x455*x457))+((r20*x447*x450))+((r21*x445*x450)))),-1);
if(!x461.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x460.value)+(((1.5707963267949)*(x461.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x462=IKcos(j5);
IkReal x463=IKsin(j5);
IkReal x464=(sj2*sj3);
IkReal x465=(cj2*cj3);
IkReal x466=(cj1*r12);
IkReal x467=(sj1*sj6);
IkReal x468=(cj2*sj3);
IkReal x469=(r21*sj6);
IkReal x470=(cj6*sj1);
IkReal x471=(r12*sj1);
IkReal x472=(cj1*r02);
IkReal x473=(cj1*cj6);
IkReal x474=(r02*sj1);
IkReal x475=(cj3*sj2);
IkReal x476=(cj1*sj6);
IkReal x477=(cj6*r20);
IkReal x478=((1.0)*x463);
IkReal x479=(r11*x463);
IkReal x480=((1.0)*x462);
IkReal x481=(r01*x476);
IkReal x482=(r11*x462);
IkReal x483=(x465+x464);
evalcond[0]=(((r22*x463))+((x462*x477))+(((-1.0)*x468))+(((-1.0)*x469*x480))+x475);
evalcond[1]=(((x463*x477))+(((-1.0)*x469*x478))+x483+(((-1.0)*r22*x480)));
evalcond[2]=(((x476*x482))+((x463*x474))+((r00*x462*x470))+(((-1.0)*r01*x467*x480))+(((-1.0)*x466*x478))+(((-1.0)*r10*x473*x480)));
evalcond[3]=((((-1.0)*r01*x467*x478))+(((-1.0)*x474*x480))+((r00*x463*x470))+(((-1.0)*r10*x473*x478))+((x476*x479))+((x462*x466)));
evalcond[4]=(((x462*x472))+((x462*x471))+(((-1.0)*x475))+((x467*x479))+x468+(((-1.0)*r00*x473*x478))+(((-1.0)*r10*x470*x478))+((x463*x481)));
evalcond[5]=(((x467*x482))+(((-1.0)*x472*x478))+((x462*x481))+x483+(((-1.0)*r00*x473*x480))+(((-1.0)*x471*x478))+(((-1.0)*r10*x470*x480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x484=((1.0)*cj1);
IkReal x485=(r11*sj6);
IkReal x486=(cj2*sj3);
IkReal x487=(r00*sj1);
IkReal x488=(cj3*sj2);
IkReal x489=(r02*sj1);
IkReal x490=((1.0)*cj6);
IkReal x491=(cj6*x488);
IkReal x492=((1.0)*sj1*sj6);
CheckValue<IkReal> x493=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x484))+(((-1.0)*r10*x492))+(((-1.0)*r11*sj1*x490))+(((-1.0)*cj6*r01*x484)))),-1);
if(!x493.valid){
continue;
}
CheckValue<IkReal> x494 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x484*x491))+(((-1.0)*x484*x485*x486))+(((-1.0)*r01*x488*x492))+((cj1*x485*x488))+((r01*sj1*sj6*x486))+((x487*x491))+(((-1.0)*x486*x487*x490))+((cj1*cj6*r10*x486)))),IkReal(((((-1.0)*r12*x484*x486))+(((-1.0)*x488*x489))+((cj1*r12*x488))+((x486*x489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x494.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x493.value)))+(x494.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x495=IKcos(j5);
IkReal x496=IKsin(j5);
IkReal x497=(sj2*sj3);
IkReal x498=(cj2*cj3);
IkReal x499=(cj1*r12);
IkReal x500=(sj1*sj6);
IkReal x501=(cj2*sj3);
IkReal x502=(r21*sj6);
IkReal x503=(cj6*sj1);
IkReal x504=(r12*sj1);
IkReal x505=(cj1*r02);
IkReal x506=(cj1*cj6);
IkReal x507=(r02*sj1);
IkReal x508=(cj3*sj2);
IkReal x509=(cj1*sj6);
IkReal x510=(cj6*r20);
IkReal x511=((1.0)*x496);
IkReal x512=(r11*x496);
IkReal x513=((1.0)*x495);
IkReal x514=(r01*x509);
IkReal x515=(r11*x495);
IkReal x516=(x498+x497);
evalcond[0]=((((-1.0)*x502*x513))+((r22*x496))+x508+((x495*x510))+(((-1.0)*x501)));
evalcond[1]=((((-1.0)*x502*x511))+((x496*x510))+(((-1.0)*r22*x513))+x516);
evalcond[2]=((((-1.0)*r01*x500*x513))+(((-1.0)*r10*x506*x513))+((x496*x507))+(((-1.0)*x499*x511))+((r00*x495*x503))+((x509*x515)));
evalcond[3]=((((-1.0)*r01*x500*x511))+((x495*x499))+((r00*x496*x503))+(((-1.0)*r10*x506*x511))+(((-1.0)*x507*x513))+((x509*x512)));
evalcond[4]=(((x496*x514))+((x495*x505))+((x495*x504))+((x500*x512))+x501+(((-1.0)*r00*x506*x511))+(((-1.0)*x508))+(((-1.0)*r10*x503*x511)));
evalcond[5]=((((-1.0)*x504*x511))+((x500*x515))+x516+(((-1.0)*x505*x511))+((x495*x514))+(((-1.0)*r00*x506*x513))+(((-1.0)*r10*x503*x513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x517=r21*r21;
IkReal x518=cj6*cj6;
IkReal x519=(sj2*sj3);
IkReal x520=(cj6*r20);
IkReal x521=(r21*sj6);
IkReal x522=(cj2*sj3);
IkReal x523=((1.0)*r22);
IkReal x524=(cj3*sj2);
IkReal x525=(cj2*cj3);
CheckValue<IkReal> x526 = IKatan2WithCheck(IkReal((((x519*x520))+(((-1.0)*x519*x521))+((r22*x524))+((x520*x525))+(((-1.0)*x522*x523))+(((-1.0)*x521*x525)))),IkReal(((((-1.0)*x523*x525))+((x521*x522))+((x520*x524))+(((-1.0)*x520*x522))+(((-1.0)*x521*x524))+(((-1.0)*x519*x523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x526.valid){
continue;
}
CheckValue<IkReal> x527=IKPowWithIntegerCheck(IKsign(((((-1.0)*x517))+(((-1.0)*x518*(r20*r20)))+(((2.0)*x520*x521))+((x517*x518))+(((-1.0)*r22*x523)))),-1);
if(!x527.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x526.value)+(((1.5707963267949)*(x527.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x528=IKcos(j5);
IkReal x529=IKsin(j5);
IkReal x530=(sj2*sj3);
IkReal x531=(cj2*cj3);
IkReal x532=(cj1*r12);
IkReal x533=(sj1*sj6);
IkReal x534=(cj2*sj3);
IkReal x535=(r21*sj6);
IkReal x536=(cj6*sj1);
IkReal x537=(r12*sj1);
IkReal x538=(cj1*r02);
IkReal x539=(cj1*cj6);
IkReal x540=(r02*sj1);
IkReal x541=(cj3*sj2);
IkReal x542=(cj1*sj6);
IkReal x543=(cj6*r20);
IkReal x544=((1.0)*x529);
IkReal x545=(r11*x529);
IkReal x546=((1.0)*x528);
IkReal x547=(r01*x542);
IkReal x548=(r11*x528);
IkReal x549=(x531+x530);
evalcond[0]=((((-1.0)*x534))+((r22*x529))+x541+(((-1.0)*x535*x546))+((x528*x543)));
evalcond[1]=((((-1.0)*r22*x546))+x549+(((-1.0)*x535*x544))+((x529*x543)));
evalcond[2]=((((-1.0)*x532*x544))+((r00*x528*x536))+((x542*x548))+(((-1.0)*r01*x533*x546))+(((-1.0)*r10*x539*x546))+((x529*x540)));
evalcond[3]=(((r00*x529*x536))+((x542*x545))+(((-1.0)*x540*x546))+(((-1.0)*r01*x533*x544))+(((-1.0)*r10*x539*x544))+((x528*x532)));
evalcond[4]=((((-1.0)*x541))+(((-1.0)*r00*x539*x544))+(((-1.0)*r10*x536*x544))+x534+((x529*x547))+((x533*x545))+((x528*x538))+((x528*x537)));
evalcond[5]=((((-1.0)*x537*x544))+(((-1.0)*x538*x544))+(((-1.0)*r00*x539*x546))+(((-1.0)*r10*x536*x546))+x549+((x533*x548))+((x528*x547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x550=((1.0)*sj1);
CheckValue<IkReal> x552 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x550))+((cj1*r12)))),IkReal(((((-1.0)*r01*sj6*x550))+((cj6*r00*sj1))+(((-1.0)*cj1*cj6*r10))+((cj1*r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x552.valid){
continue;
}
IkReal x551=x552.value;
j5array[0]=((-1.0)*x551);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x551)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x553=IKcos(j5);
IkReal x554=IKsin(j5);
IkReal x555=((1.0)*cj1);
IkReal x556=(cj6*x553);
IkReal x557=(sj6*x553);
evalcond[0]=((((-1.0)*r01*sj1*x557))+((r02*sj1*x554))+((r00*sj1*x556))+(((-1.0)*r12*x554*x555))+((cj1*r11*x557))+(((-1.0)*r10*x555*x556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x558=(r22*sj2);
IkReal x559=((1.0)*sj5);
IkReal x560=(cj6*r20);
IkReal x561=(cj2*cj5);
IkReal x562=(r21*sj6);
IkReal x563=(cj5*sj2);
IkReal x564=(cj2*sj5);
if( IKabs((((sj2*sj5*x562))+((r22*x564))+((cj5*x558))+((x560*x561))+(((-1.0)*sj2*x559*x560))+(((-1.0)*x561*x562)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x561))+((x562*x563))+((x562*x564))+(((-1.0)*x560*x563))+(((-1.0)*cj2*x559*x560))+(((-1.0)*x558*x559)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*sj5*x562))+((r22*x564))+((cj5*x558))+((x560*x561))+(((-1.0)*sj2*x559*x560))+(((-1.0)*x561*x562))))+IKsqr((((r22*x561))+((x562*x563))+((x562*x564))+(((-1.0)*x560*x563))+(((-1.0)*cj2*x559*x560))+(((-1.0)*x558*x559))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj2*sj5*x562))+((r22*x564))+((cj5*x558))+((x560*x561))+(((-1.0)*sj2*x559*x560))+(((-1.0)*x561*x562))), (((r22*x561))+((x562*x563))+((x562*x564))+(((-1.0)*x560*x563))+(((-1.0)*cj2*x559*x560))+(((-1.0)*x558*x559))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x565=IKsin(j3);
IkReal x566=IKcos(j3);
IkReal x567=((0.16)*sj1);
IkReal x568=(r11*sj6);
IkReal x569=(cj6*r10);
IkReal x570=(cj5*sj1);
IkReal x571=((0.16)*r20);
IkReal x572=((1.0)*cj5);
IkReal x573=(cj1*sj6);
IkReal x574=(cj1*r02);
IkReal x575=((0.02086)*cj6);
IkReal x576=(cj6*r20);
IkReal x577=((1.0)*sj5);
IkReal x578=(r21*sj6);
IkReal x579=(sj2*x565);
IkReal x580=(cj2*x566);
IkReal x581=(cj2*x565);
IkReal x582=(sj2*x566);
IkReal x583=(cj1*cj6*r00);
IkReal x584=(x579+x580);
evalcond[0]=(((cj5*x576))+(((-1.0)*x581))+((r22*sj5))+x582+(((-1.0)*x572*x578)));
evalcond[1]=((((-1.0)*x577*x578))+x584+((sj5*x576))+(((-1.0)*r22*x572)));
CheckValue<IkReal> x585=IKPowWithIntegerCheck(cj6,-1);
if(!x585.valid){
continue;
}
evalcond[2]=((((0.54)*x582))+(((-0.71)*cj2))+(((-1.0)*cj6*x571))+pz+(((-0.54)*x581))+(((-1.0)*x571*(x585.value)*(sj6*sj6))));
evalcond[3]=(((cj5*x574))+((r12*x570))+(((-1.0)*x582))+((sj1*sj5*x568))+(((-1.0)*sj1*x569*x577))+((r01*sj5*x573))+(((-1.0)*x577*x583))+x581);
evalcond[4]=((((-1.0)*x572*x583))+(((-1.0)*x569*x570))+(((-1.0)*x574*x577))+x584+((x568*x570))+(((-1.0)*r12*sj1*x577))+((cj5*r01*x573)));
evalcond[5]=((((0.02086)*r00*x573))+(((-0.16)*r01*x573))+(((0.54)*x580))+(((0.16)*x583))+(((-1.0)*cj1*px))+((x567*x569))+(((0.02086)*r10*sj1*sj6))+(((-1.0)*py*sj1))+(((0.71)*sj2))+(((-1.0)*x567*x568))+((r11*sj1*x575))+(((0.54)*x579))+((cj1*r01*x575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x586=((1.0)*cj1);
CheckValue<IkReal> x588 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10*x586))+((cj6*r00*sj1))+((cj1*r11*sj6))+(((-1.0)*r01*sj1*sj6)))),IkReal((((r02*sj1))+(((-1.0)*r12*x586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x588.valid){
continue;
}
IkReal x587=x588.value;
j5array[0]=((-1.0)*x587);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x587)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x589=IKsin(j5);
IkReal x590=IKcos(j5);
IkReal x591=(cj1*x589);
IkReal x592=(sj1*x589);
evalcond[0]=((((-1.0)*cj6*r10*x591))+(((-1.0)*r02*sj1*x590))+((cj6*r00*x592))+(((-1.0)*r01*sj6*x592))+((r11*sj6*x591))+((cj1*r12*x590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x593=(r22*sj2);
IkReal x594=((1.0)*sj5);
IkReal x595=(cj6*r20);
IkReal x596=(cj2*cj5);
IkReal x597=(r21*sj6);
IkReal x598=(cj5*sj2);
IkReal x599=(cj2*sj5);
if( IKabs((((r22*x599))+((x595*x596))+(((-1.0)*x596*x597))+(((-1.0)*sj2*x594*x595))+((sj2*sj5*x597))+((cj5*x593)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x596))+(((-1.0)*x595*x598))+(((-1.0)*cj2*x594*x595))+(((-1.0)*x593*x594))+((x597*x599))+((x597*x598)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x599))+((x595*x596))+(((-1.0)*x596*x597))+(((-1.0)*sj2*x594*x595))+((sj2*sj5*x597))+((cj5*x593))))+IKsqr((((r22*x596))+(((-1.0)*x595*x598))+(((-1.0)*cj2*x594*x595))+(((-1.0)*x593*x594))+((x597*x599))+((x597*x598))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r22*x599))+((x595*x596))+(((-1.0)*x596*x597))+(((-1.0)*sj2*x594*x595))+((sj2*sj5*x597))+((cj5*x593))), (((r22*x596))+(((-1.0)*x595*x598))+(((-1.0)*cj2*x594*x595))+(((-1.0)*x593*x594))+((x597*x599))+((x597*x598))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x600=IKsin(j3);
IkReal x601=IKcos(j3);
IkReal x602=((0.16)*sj1);
IkReal x603=(r11*sj6);
IkReal x604=(cj6*r10);
IkReal x605=(cj5*sj1);
IkReal x606=((0.16)*r20);
IkReal x607=((1.0)*cj5);
IkReal x608=(cj1*sj6);
IkReal x609=(cj1*r02);
IkReal x610=((0.02086)*cj6);
IkReal x611=(cj6*r20);
IkReal x612=((1.0)*sj5);
IkReal x613=(r21*sj6);
IkReal x614=(sj2*x600);
IkReal x615=(cj2*x601);
IkReal x616=(cj2*x600);
IkReal x617=(sj2*x601);
IkReal x618=(cj1*cj6*r00);
IkReal x619=(x614+x615);
evalcond[0]=(((r22*sj5))+(((-1.0)*x616))+(((-1.0)*x607*x613))+x617+((cj5*x611)));
evalcond[1]=((((-1.0)*x612*x613))+(((-1.0)*r22*x607))+x619+((sj5*x611)));
CheckValue<IkReal> x620=IKPowWithIntegerCheck(cj6,-1);
if(!x620.valid){
continue;
}
evalcond[2]=((((0.54)*x617))+(((-1.0)*cj6*x606))+(((-0.71)*cj2))+(((-0.54)*x616))+pz+(((-1.0)*x606*(x620.value)*(sj6*sj6))));
evalcond[3]=((((-1.0)*x612*x618))+((cj5*x609))+(((-1.0)*sj1*x604*x612))+((r12*x605))+(((-1.0)*x617))+((sj1*sj5*x603))+((r01*sj5*x608))+x616);
evalcond[4]=((((-1.0)*x604*x605))+(((-1.0)*x609*x612))+(((-1.0)*r12*sj1*x612))+((x603*x605))+((cj5*r01*x608))+(((-1.0)*x607*x618))+x619);
evalcond[5]=((((-1.0)*x602*x603))+(((0.54)*x614))+(((0.54)*x615))+((r11*sj1*x610))+(((0.02086)*r00*x608))+(((-1.0)*cj1*px))+(((0.16)*x618))+(((0.02086)*r10*sj1*sj6))+(((-1.0)*py*sj1))+(((0.71)*sj2))+((x602*x604))+((cj1*r01*x610))+(((-0.16)*r01*x608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((-1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj4=0;
cj4=1.0;
j4=0;
IkReal x621=((1.0)*cj1);
j5eval[0]=((IKabs(((((-1.0)*r12*x621))+((r02*sj1)))))+(IKabs((((cj6*r00*sj1))+(((-1.0)*cj6*r10*x621))+((cj1*r11*sj6))+(((-1.0)*r01*sj1*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=1.0;
j4=0;
IkReal x622=((1.0)*sj1);
j5eval[0]=((IKabs((((cj6*r00*sj1))+(((-1.0)*cj1*cj6*r10))+(((-1.0)*r01*sj6*x622))+((cj1*r11*sj6)))))+(IKabs(((((-1.0)*r02*x622))+((cj1*r12))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj4=0;
cj4=1.0;
j4=0;
j3eval[0]=cj6;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3, j5]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x642=IKPowWithIntegerCheck(cj6,-1);
if(!x642.valid){
continue;
}
IkReal x623=x642.value;
IkReal x624=((0.296296296296296)*r10);
IkReal x625=((0.0386296296296296)*r11);
IkReal x626=((0.296296296296296)*cj2);
IkReal x627=(r20*x623);
IkReal x628=(cj1*cj2);
IkReal x629=((1.85185185185185)*px);
IkReal x630=((0.0386296296296296)*sj6);
IkReal x631=(cj2*sj1);
IkReal x632=(cj1*sj2);
IkReal x633=(sj1*sj2);
IkReal x634=((0.296296296296296)*sj2);
IkReal x635=(r11*sj6);
IkReal x636=((1.85185185185185)*pz);
IkReal x637=((1.85185185185185)*py);
IkReal x638=(r01*sj6);
IkReal x639=(cj6*x633);
IkReal x640=(cj1*cj6*r00);
IkReal x641=((0.0386296296296296)*cj6*r01);
if( IKabs(((-1.31481481481481)+(((-0.296296296296296)*cj6*r00*x632))+(((-1.0)*r00*x630*x632))+((x629*x632))+(((-1.0)*x632*x641))+(((-1.0)*x624*x639))+(((0.296296296296296)*x633*x635))+(((0.296296296296296)*x632*x638))+(((-1.0)*x625*x639))+(((-1.0)*x626*x627))+((x633*x637))+((cj2*x636))+(((-1.0)*r10*x630*x633)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x628*x629))+(((-1.0)*x626*x640))+((sj1*x626*x635))+(((-1.0)*cj6*x625*x631))+(((-1.0)*cj6*x624*x631))+(((-1.0)*x628*x641))+(((-1.0)*sj2*x636))+((x627*x634))+((x631*x637))+((cj1*x626*x638))+(((-1.0)*r00*x628*x630))+(((-1.0)*r10*x630*x631)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.31481481481481)+(((-0.296296296296296)*cj6*r00*x632))+(((-1.0)*r00*x630*x632))+((x629*x632))+(((-1.0)*x632*x641))+(((-1.0)*x624*x639))+(((0.296296296296296)*x633*x635))+(((0.296296296296296)*x632*x638))+(((-1.0)*x625*x639))+(((-1.0)*x626*x627))+((x633*x637))+((cj2*x636))+(((-1.0)*r10*x630*x633))))+IKsqr((((x628*x629))+(((-1.0)*x626*x640))+((sj1*x626*x635))+(((-1.0)*cj6*x625*x631))+(((-1.0)*cj6*x624*x631))+(((-1.0)*x628*x641))+(((-1.0)*sj2*x636))+((x627*x634))+((x631*x637))+((cj1*x626*x638))+(((-1.0)*r00*x628*x630))+(((-1.0)*r10*x630*x631))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.31481481481481)+(((-0.296296296296296)*cj6*r00*x632))+(((-1.0)*r00*x630*x632))+((x629*x632))+(((-1.0)*x632*x641))+(((-1.0)*x624*x639))+(((0.296296296296296)*x633*x635))+(((0.296296296296296)*x632*x638))+(((-1.0)*x625*x639))+(((-1.0)*x626*x627))+((x633*x637))+((cj2*x636))+(((-1.0)*r10*x630*x633))), (((x628*x629))+(((-1.0)*x626*x640))+((sj1*x626*x635))+(((-1.0)*cj6*x625*x631))+(((-1.0)*cj6*x624*x631))+(((-1.0)*x628*x641))+(((-1.0)*sj2*x636))+((x627*x634))+((x631*x637))+((cj1*x626*x638))+(((-1.0)*r00*x628*x630))+(((-1.0)*r10*x630*x631))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x643=IKcos(j3);
IkReal x644=IKsin(j3);
IkReal x645=(sj1*sj6);
IkReal x646=(cj1*r00);
IkReal x647=((0.16)*cj6);
IkReal x648=(cj1*r01);
IkReal x649=((0.02086)*cj6);
IkReal x650=((0.54)*x644);
IkReal x651=((0.54)*x643);
CheckValue<IkReal> x652=IKPowWithIntegerCheck(cj6,-1);
if(!x652.valid){
continue;
}
evalcond[0]=((((-0.16)*r20*(x652.value)*(sj6*sj6)))+(((-0.71)*cj2))+(((-1.0)*cj2*x650))+((sj2*x651))+pz+(((-1.0)*r20*x647)));
evalcond[1]=(((r10*sj1*x647))+((x648*x649))+(((-0.16)*sj6*x648))+(((-1.0)*cj1*px))+((r11*sj1*x649))+((cj2*x651))+((sj2*x650))+(((0.02086)*sj6*x646))+(((-1.0)*py*sj1))+(((0.71)*sj2))+((x646*x647))+(((0.02086)*r10*x645))+(((-0.16)*r11*x645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x653=r21*r21;
IkReal x654=cj6*cj6;
IkReal x655=((((2.0)*cj6*r20*r21*sj6))+(((-1.0)*x653))+((x653*x654))+(((-1.0)*(r22*r22)))+(((-1.0)*x654*(r20*r20))));
j5eval[0]=x655;
j5eval[1]=IKsign(x655);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x656=((1.0)*cj1);
IkReal x657=((1.0)*sj1);
IkReal x658=((((-1.0)*r10*sj6*x657))+(((-1.0)*cj6*r01*x656))+(((-1.0)*cj6*r11*x657))+(((-1.0)*r00*sj6*x656)));
j5eval[0]=x658;
j5eval[1]=IKsign(x658);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x659=cj6*cj6;
IkReal x660=(cj6*sj6);
IkReal x661=(r00*sj1);
IkReal x662=((1.0)*r21);
IkReal x663=(cj1*r20);
IkReal x664=(r01*sj1);
IkReal x665=(cj1*r11);
IkReal x666=((((-1.0)*x662*x665))+(((-1.0)*r20*x660*x664))+((r20*x659*x661))+(((-1.0)*x660*x661*x662))+((cj1*r10*r21*x660))+(((-1.0)*cj1*r12*r22))+((r21*x664))+(((-1.0)*x659*x662*x664))+(((-1.0)*r10*x659*x663))+((r21*x659*x665))+((r11*x660*x663))+((r02*r22*sj1)));
j5eval[0]=x666;
j5eval[1]=IKsign(x666);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x667=cj6*cj6;
IkReal x668=(r02*sj1);
IkReal x669=(cj6*sj6);
IkReal x670=(r21*sj1);
IkReal x671=((1.0)*r00);
IkReal x672=(cj1*r11);
IkReal x673=(cj2*sj3);
IkReal x674=(cj3*sj2);
IkReal x675=(cj1*r12);
IkReal x676=(cj6*sj1);
IkReal x677=((1.0)*r01);
IkReal x678=(sj1*sj6);
IkReal x679=(r20*sj1);
IkReal x680=(cj1*r10);
IkReal x681=((1.0)*x680);
CheckValue<IkReal> x682 = IKatan2WithCheck(IkReal((((x674*x675))+((x668*x673))+(((-1.0)*x668*x674))+(((-1.0)*x673*x675)))),IkReal(((((-1.0)*x673*x677*x678))+((sj6*x672*x673))+(((-1.0)*x671*x674*x676))+(((-1.0)*cj6*x673*x681))+(((-1.0)*sj6*x672*x674))+((cj6*x674*x680))+((r01*x674*x678))+((r00*x673*x676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x682.valid){
continue;
}
CheckValue<IkReal> x683=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x667*x681))+((r21*x667*x672))+((r01*x670))+((r20*x669*x672))+(((-1.0)*x669*x670*x671))+((r21*x669*x680))+(((-1.0)*r22*x675))+(((-1.0)*r21*x672))+((r00*x667*x679))+(((-1.0)*x667*x670*x677))+((r22*x668))+(((-1.0)*x669*x677*x679)))),-1);
if(!x683.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x682.value)+(((1.5707963267949)*(x683.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x684=IKcos(j5);
IkReal x685=IKsin(j5);
IkReal x686=(cj3*sj2);
IkReal x687=(cj1*r12);
IkReal x688=(sj1*sj6);
IkReal x689=((1.0)*cj2);
IkReal x690=(r21*sj6);
IkReal x691=(cj6*sj1);
IkReal x692=(r12*sj1);
IkReal x693=(cj1*r02);
IkReal x694=(sj2*sj3);
IkReal x695=(cj1*cj6);
IkReal x696=(r02*sj1);
IkReal x697=(cj1*sj6);
IkReal x698=(cj6*r20);
IkReal x699=(sj3*x689);
IkReal x700=((1.0)*x685);
IkReal x701=(r11*x685);
IkReal x702=((1.0)*x684);
IkReal x703=(r01*x697);
IkReal x704=(r11*x684);
evalcond[0]=(((r22*x685))+((x684*x698))+(((-1.0)*x690*x702))+x686+(((-1.0)*x699)));
evalcond[1]=((((-1.0)*x690*x700))+(((-1.0)*cj3*x689))+((x685*x698))+(((-1.0)*x694))+(((-1.0)*r22*x702)));
evalcond[2]=((((-1.0)*x687*x700))+((r00*x684*x691))+(((-1.0)*r10*x695*x702))+((x697*x704))+(((-1.0)*r01*x688*x702))+((x685*x696)));
evalcond[3]=(((r00*x685*x691))+(((-1.0)*r10*x695*x700))+((x697*x701))+(((-1.0)*x696*x702))+(((-1.0)*r01*x688*x700))+((x684*x687)));
evalcond[4]=(((x685*x703))+(((-1.0)*r10*x691*x700))+((x684*x693))+((x684*x692))+x686+(((-1.0)*x699))+(((-1.0)*r00*x695*x700))+((x688*x701)));
evalcond[5]=((((-1.0)*x693*x700))+((cj2*cj3))+(((-1.0)*r10*x691*x702))+((x684*x703))+(((-1.0)*x692*x700))+x694+(((-1.0)*r00*x695*x702))+((x688*x704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x705=((1.0)*cj1);
IkReal x706=(r11*sj6);
IkReal x707=(cj2*sj3);
IkReal x708=(r00*sj1);
IkReal x709=(cj3*sj2);
IkReal x710=(r02*sj1);
IkReal x711=((1.0)*cj6);
IkReal x712=(cj6*x709);
IkReal x713=((1.0)*sj1*sj6);
CheckValue<IkReal> x714 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x709*x713))+(((-1.0)*x707*x708*x711))+((cj1*x706*x709))+((r01*sj1*sj6*x707))+(((-1.0)*r10*x705*x712))+(((-1.0)*x705*x706*x707))+((cj1*cj6*r10*x707))+((x708*x712)))),IkReal((((x707*x710))+(((-1.0)*r12*x705*x707))+(((-1.0)*x709*x710))+((cj1*r12*x709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x714.valid){
continue;
}
CheckValue<IkReal> x715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj1*x711))+(((-1.0)*r00*sj6*x705))+(((-1.0)*r10*x713))+(((-1.0)*cj6*r01*x705)))),-1);
if(!x715.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x714.value)+(((1.5707963267949)*(x715.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x716=IKcos(j5);
IkReal x717=IKsin(j5);
IkReal x718=(cj3*sj2);
IkReal x719=(cj1*r12);
IkReal x720=(sj1*sj6);
IkReal x721=((1.0)*cj2);
IkReal x722=(r21*sj6);
IkReal x723=(cj6*sj1);
IkReal x724=(r12*sj1);
IkReal x725=(cj1*r02);
IkReal x726=(sj2*sj3);
IkReal x727=(cj1*cj6);
IkReal x728=(r02*sj1);
IkReal x729=(cj1*sj6);
IkReal x730=(cj6*r20);
IkReal x731=(sj3*x721);
IkReal x732=((1.0)*x717);
IkReal x733=(r11*x717);
IkReal x734=((1.0)*x716);
IkReal x735=(r01*x729);
IkReal x736=(r11*x716);
evalcond[0]=(((r22*x717))+(((-1.0)*x722*x734))+(((-1.0)*x731))+x718+((x716*x730)));
evalcond[1]=((((-1.0)*x722*x732))+(((-1.0)*cj3*x721))+((x717*x730))+(((-1.0)*x726))+(((-1.0)*r22*x734)));
evalcond[2]=(((r00*x716*x723))+((x729*x736))+(((-1.0)*r01*x720*x734))+((x717*x728))+(((-1.0)*x719*x732))+(((-1.0)*r10*x727*x734)));
evalcond[3]=(((r00*x717*x723))+((x729*x733))+(((-1.0)*r01*x720*x732))+((x716*x719))+(((-1.0)*x728*x734))+(((-1.0)*r10*x727*x732)));
evalcond[4]=(((x720*x733))+(((-1.0)*r10*x723*x732))+((x717*x735))+(((-1.0)*x731))+x718+(((-1.0)*r00*x727*x732))+((x716*x724))+((x716*x725)));
evalcond[5]=(((x720*x736))+((cj2*cj3))+(((-1.0)*x724*x732))+(((-1.0)*r10*x723*x734))+(((-1.0)*x725*x732))+x726+((x716*x735))+(((-1.0)*r00*x727*x734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x737=r21*r21;
IkReal x738=cj6*cj6;
IkReal x739=(sj2*sj3);
IkReal x740=(cj3*sj2);
IkReal x741=(cj2*cj3);
IkReal x742=(r21*sj6);
IkReal x743=(cj2*sj3);
IkReal x744=(cj6*r20);
IkReal x745=((1.0)*x744);
CheckValue<IkReal> x746 = IKatan2WithCheck(IkReal((((r22*x740))+((x739*x742))+((x741*x742))+(((-1.0)*r22*x743))+(((-1.0)*x741*x745))+(((-1.0)*x739*x745)))),IkReal((((r22*x741))+((x742*x743))+((x740*x744))+((r22*x739))+(((-1.0)*x740*x742))+(((-1.0)*x743*x745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x746.valid){
continue;
}
CheckValue<IkReal> x747=IKPowWithIntegerCheck(IKsign(((((2.0)*x742*x744))+(((-1.0)*x737))+(((-1.0)*(r22*r22)))+((x737*x738))+(((-1.0)*x738*(r20*r20))))),-1);
if(!x747.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x746.value)+(((1.5707963267949)*(x747.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x748=IKcos(j5);
IkReal x749=IKsin(j5);
IkReal x750=(cj3*sj2);
IkReal x751=(cj1*r12);
IkReal x752=(sj1*sj6);
IkReal x753=((1.0)*cj2);
IkReal x754=(r21*sj6);
IkReal x755=(cj6*sj1);
IkReal x756=(r12*sj1);
IkReal x757=(cj1*r02);
IkReal x758=(sj2*sj3);
IkReal x759=(cj1*cj6);
IkReal x760=(r02*sj1);
IkReal x761=(cj1*sj6);
IkReal x762=(cj6*r20);
IkReal x763=(sj3*x753);
IkReal x764=((1.0)*x749);
IkReal x765=(r11*x749);
IkReal x766=((1.0)*x748);
IkReal x767=(r01*x761);
IkReal x768=(r11*x748);
evalcond[0]=(((r22*x749))+(((-1.0)*x763))+(((-1.0)*x754*x766))+x750+((x748*x762)));
evalcond[1]=((((-1.0)*cj3*x753))+(((-1.0)*x754*x764))+(((-1.0)*x758))+(((-1.0)*r22*x766))+((x749*x762)));
evalcond[2]=((((-1.0)*r01*x752*x766))+((r00*x748*x755))+(((-1.0)*x751*x764))+((x761*x768))+(((-1.0)*r10*x759*x766))+((x749*x760)));
evalcond[3]=((((-1.0)*r01*x752*x764))+((r00*x749*x755))+((x761*x765))+(((-1.0)*r10*x759*x764))+(((-1.0)*x760*x766))+((x748*x751)));
evalcond[4]=((((-1.0)*r10*x755*x764))+(((-1.0)*x763))+((x752*x765))+(((-1.0)*r00*x759*x764))+x750+((x748*x757))+((x748*x756))+((x749*x767)));
evalcond[5]=((((-1.0)*r10*x755*x766))+(((-1.0)*x756*x764))+((cj2*cj3))+((x752*x768))+(((-1.0)*x757*x764))+(((-1.0)*r00*x759*x766))+x758+((x748*x767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x769=((1.0)*sj1);
CheckValue<IkReal> x771 = IKatan2WithCheck(IkReal((((cj1*r12))+(((-1.0)*r02*x769)))),IkReal((((cj6*r00*sj1))+(((-1.0)*cj1*cj6*r10))+(((-1.0)*r01*sj6*x769))+((cj1*r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x771.valid){
continue;
}
IkReal x770=x771.value;
j5array[0]=((-1.0)*x770);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x770)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x772=IKcos(j5);
IkReal x773=IKsin(j5);
IkReal x774=((1.0)*cj1);
IkReal x775=(cj6*x772);
IkReal x776=(sj6*x772);
evalcond[0]=(((cj1*r11*x776))+(((-1.0)*r10*x774*x775))+(((-1.0)*r12*x773*x774))+(((-1.0)*r01*sj1*x776))+((r00*sj1*x775))+((r02*sj1*x773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x777=((1.0)*r22);
IkReal x778=(sj2*sj5);
IkReal x779=(cj2*cj5);
IkReal x780=(r21*sj6);
IkReal x781=(cj6*r20);
IkReal x782=(cj5*sj2);
IkReal x783=(cj2*sj5);
if( IKabs(((((-1.0)*x777*x782))+((x779*x781))+((x778*x781))+((r22*x783))+(((-1.0)*x778*x780))+(((-1.0)*x779*x780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x781*x783))+(((-1.0)*x781*x782))+(((-1.0)*x780*x783))+((x780*x782))+(((-1.0)*x777*x779))+(((-1.0)*x777*x778)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x777*x782))+((x779*x781))+((x778*x781))+((r22*x783))+(((-1.0)*x778*x780))+(((-1.0)*x779*x780))))+IKsqr((((x781*x783))+(((-1.0)*x781*x782))+(((-1.0)*x780*x783))+((x780*x782))+(((-1.0)*x777*x779))+(((-1.0)*x777*x778))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x777*x782))+((x779*x781))+((x778*x781))+((r22*x783))+(((-1.0)*x778*x780))+(((-1.0)*x779*x780))), (((x781*x783))+(((-1.0)*x781*x782))+(((-1.0)*x780*x783))+((x780*x782))+(((-1.0)*x777*x779))+(((-1.0)*x777*x778))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x784=IKcos(j3);
IkReal x785=IKsin(j3);
IkReal x786=((0.16)*sj1);
IkReal x787=(r11*sj6);
IkReal x788=(cj6*r10);
IkReal x789=(cj5*sj1);
IkReal x790=((0.16)*r20);
IkReal x791=(cj1*sj6);
IkReal x792=((1.0)*cj5);
IkReal x793=(cj1*r02);
IkReal x794=((0.02086)*cj6);
IkReal x795=(cj6*r20);
IkReal x796=((1.0)*sj5);
IkReal x797=(r21*sj6);
IkReal x798=(sj2*x784);
IkReal x799=(cj2*x785);
IkReal x800=(cj2*x784);
IkReal x801=(sj2*x785);
IkReal x802=(cj1*cj6*r00);
IkReal x803=((1.0)*x799);
evalcond[0]=((((-1.0)*x792*x797))+((r22*sj5))+((cj5*x795))+x798+(((-1.0)*x803)));
evalcond[1]=((((-1.0)*x801))+(((-1.0)*x800))+(((-1.0)*x796*x797))+((sj5*x795))+(((-1.0)*r22*x792)));
CheckValue<IkReal> x804=IKPowWithIntegerCheck(cj6,-1);
if(!x804.valid){
continue;
}
evalcond[2]=((((-0.54)*x799))+(((-0.71)*cj2))+(((-1.0)*cj6*x790))+(((-1.0)*x790*(x804.value)*(sj6*sj6)))+pz+(((0.54)*x798)));
evalcond[3]=((((-1.0)*sj1*x788*x796))+(((-1.0)*x796*x802))+((sj1*sj5*x787))+((cj5*x793))+((r01*sj5*x791))+x798+(((-1.0)*x803))+((r12*x789)));
evalcond[4]=((((-1.0)*r12*sj1*x796))+(((-1.0)*x788*x789))+(((-1.0)*x793*x796))+((x787*x789))+(((-1.0)*x792*x802))+x801+x800+((cj5*r01*x791)));
evalcond[5]=(((r11*sj1*x794))+((x786*x788))+((cj1*r01*x794))+(((0.16)*x802))+(((0.54)*x801))+(((0.54)*x800))+(((-1.0)*cj1*px))+(((0.02086)*r10*sj1*sj6))+(((-1.0)*x786*x787))+(((-1.0)*py*sj1))+(((0.71)*sj2))+(((0.02086)*r00*x791))+(((-0.16)*r01*x791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x805=((1.0)*cj1);
CheckValue<IkReal> x807 = IKatan2WithCheck(IkReal((((cj6*r00*sj1))+(((-1.0)*cj6*r10*x805))+((cj1*r11*sj6))+(((-1.0)*r01*sj1*sj6)))),IkReal(((((-1.0)*r12*x805))+((r02*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x807.valid){
continue;
}
IkReal x806=x807.value;
j5array[0]=((-1.0)*x806);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x806)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x808=IKsin(j5);
IkReal x809=IKcos(j5);
IkReal x810=(cj1*x808);
IkReal x811=(sj1*x808);
evalcond[0]=(((cj6*r00*x811))+(((-1.0)*r01*sj6*x811))+((r11*sj6*x810))+((cj1*r12*x809))+(((-1.0)*cj6*r10*x810))+(((-1.0)*r02*sj1*x809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x812=((1.0)*r22);
IkReal x813=(sj2*sj5);
IkReal x814=(cj2*cj5);
IkReal x815=(r21*sj6);
IkReal x816=(cj6*r20);
IkReal x817=(cj5*sj2);
IkReal x818=(cj2*sj5);
if( IKabs(((((-1.0)*x812*x817))+((x813*x816))+((x814*x816))+((r22*x818))+(((-1.0)*x813*x815))+(((-1.0)*x814*x815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x812*x814))+(((-1.0)*x812*x813))+((x815*x817))+((x816*x818))+(((-1.0)*x815*x818))+(((-1.0)*x816*x817)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x812*x817))+((x813*x816))+((x814*x816))+((r22*x818))+(((-1.0)*x813*x815))+(((-1.0)*x814*x815))))+IKsqr(((((-1.0)*x812*x814))+(((-1.0)*x812*x813))+((x815*x817))+((x816*x818))+(((-1.0)*x815*x818))+(((-1.0)*x816*x817))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x812*x817))+((x813*x816))+((x814*x816))+((r22*x818))+(((-1.0)*x813*x815))+(((-1.0)*x814*x815))), ((((-1.0)*x812*x814))+(((-1.0)*x812*x813))+((x815*x817))+((x816*x818))+(((-1.0)*x815*x818))+(((-1.0)*x816*x817))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x819=IKcos(j3);
IkReal x820=IKsin(j3);
IkReal x821=((0.16)*sj1);
IkReal x822=(r11*sj6);
IkReal x823=(cj6*r10);
IkReal x824=(cj5*sj1);
IkReal x825=((0.16)*r20);
IkReal x826=(cj1*sj6);
IkReal x827=((1.0)*cj5);
IkReal x828=(cj1*r02);
IkReal x829=((0.02086)*cj6);
IkReal x830=(cj6*r20);
IkReal x831=((1.0)*sj5);
IkReal x832=(r21*sj6);
IkReal x833=(sj2*x819);
IkReal x834=(cj2*x820);
IkReal x835=(cj2*x819);
IkReal x836=(sj2*x820);
IkReal x837=(cj1*cj6*r00);
IkReal x838=((1.0)*x834);
evalcond[0]=((((-1.0)*x827*x832))+((r22*sj5))+((cj5*x830))+(((-1.0)*x838))+x833);
evalcond[1]=((((-1.0)*r22*x827))+(((-1.0)*x835))+(((-1.0)*x836))+((sj5*x830))+(((-1.0)*x831*x832)));
CheckValue<IkReal> x839=IKPowWithIntegerCheck(cj6,-1);
if(!x839.valid){
continue;
}
evalcond[2]=((((-1.0)*cj6*x825))+(((-1.0)*x825*(x839.value)*(sj6*sj6)))+(((-0.71)*cj2))+(((-0.54)*x834))+pz+(((0.54)*x833)));
evalcond[3]=(((r12*x824))+((cj5*x828))+(((-1.0)*x838))+(((-1.0)*sj1*x823*x831))+((sj1*sj5*x822))+x833+((r01*sj5*x826))+(((-1.0)*x831*x837)));
evalcond[4]=((((-1.0)*x828*x831))+(((-1.0)*x827*x837))+(((-1.0)*x823*x824))+((cj5*r01*x826))+(((-1.0)*r12*sj1*x831))+((x822*x824))+x835+x836);
evalcond[5]=(((cj1*r01*x829))+((x821*x823))+(((-1.0)*cj1*px))+(((0.16)*x837))+(((-0.16)*r01*x826))+(((-1.0)*x821*x822))+(((0.02086)*r10*sj1*sj6))+(((-1.0)*py*sj1))+(((0.71)*sj2))+(((0.54)*x835))+(((0.54)*x836))+((r11*sj1*x829))+(((0.02086)*r00*x826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj4=0;
cj4=1.0;
j4=0;
IkReal x840=((1.0)*cj1);
j5eval[0]=((IKabs((((cj6*r00*sj1))+((cj1*r11*sj6))+(((-1.0)*r01*sj1*sj6))+(((-1.0)*cj6*r10*x840)))))+(IKabs((((r02*sj1))+(((-1.0)*r12*x840))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=1.0;
j4=0;
IkReal x841=((1.0)*sj1);
j5eval[0]=((IKabs(((((-1.0)*r02*x841))+((cj1*r12)))))+(IKabs(((((-1.0)*r01*sj6*x841))+((cj6*r00*sj1))+(((-1.0)*cj1*cj6*r10))+((cj1*r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj4=0;
cj4=1.0;
j4=0;
j3eval[0]=cj6;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3, j5]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x861=IKPowWithIntegerCheck(cj6,-1);
if(!x861.valid){
continue;
}
IkReal x842=x861.value;
IkReal x843=((0.296296296296296)*r10);
IkReal x844=((0.0386296296296296)*r11);
IkReal x845=((0.296296296296296)*cj2);
IkReal x846=(r20*x842);
IkReal x847=(cj1*cj2);
IkReal x848=((1.85185185185185)*px);
IkReal x849=((0.0386296296296296)*sj6);
IkReal x850=(cj2*sj1);
IkReal x851=(cj1*sj2);
IkReal x852=(sj1*sj2);
IkReal x853=((0.296296296296296)*sj2);
IkReal x854=(r11*sj6);
IkReal x855=((1.85185185185185)*pz);
IkReal x856=((1.85185185185185)*py);
IkReal x857=(r01*sj6);
IkReal x858=(cj6*x852);
IkReal x859=(cj1*cj6*r00);
IkReal x860=((0.0386296296296296)*cj6*r01);
if( IKabs(((-1.31481481481481)+((x848*x851))+(((-1.0)*x844*x858))+((cj2*x855))+(((-1.0)*r00*x849*x851))+(((-1.0)*x851*x860))+(((-0.296296296296296)*cj6*r00*x851))+(((0.296296296296296)*x852*x854))+((x852*x856))+(((-1.0)*x845*x846))+(((-1.0)*r10*x849*x852))+(((0.296296296296296)*x851*x857))+(((-1.0)*x843*x858)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x850*x856))+(((-1.0)*r00*x847*x849))+(((-1.0)*cj6*x843*x850))+((cj1*x845*x857))+(((-1.0)*x845*x859))+((sj1*x845*x854))+(((-1.0)*x847*x860))+(((-1.0)*sj2*x855))+(((-1.0)*cj6*x844*x850))+((x846*x853))+((x847*x848))+(((-1.0)*r10*x849*x850)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.31481481481481)+((x848*x851))+(((-1.0)*x844*x858))+((cj2*x855))+(((-1.0)*r00*x849*x851))+(((-1.0)*x851*x860))+(((-0.296296296296296)*cj6*r00*x851))+(((0.296296296296296)*x852*x854))+((x852*x856))+(((-1.0)*x845*x846))+(((-1.0)*r10*x849*x852))+(((0.296296296296296)*x851*x857))+(((-1.0)*x843*x858))))+IKsqr((((x850*x856))+(((-1.0)*r00*x847*x849))+(((-1.0)*cj6*x843*x850))+((cj1*x845*x857))+(((-1.0)*x845*x859))+((sj1*x845*x854))+(((-1.0)*x847*x860))+(((-1.0)*sj2*x855))+(((-1.0)*cj6*x844*x850))+((x846*x853))+((x847*x848))+(((-1.0)*r10*x849*x850))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.31481481481481)+((x848*x851))+(((-1.0)*x844*x858))+((cj2*x855))+(((-1.0)*r00*x849*x851))+(((-1.0)*x851*x860))+(((-0.296296296296296)*cj6*r00*x851))+(((0.296296296296296)*x852*x854))+((x852*x856))+(((-1.0)*x845*x846))+(((-1.0)*r10*x849*x852))+(((0.296296296296296)*x851*x857))+(((-1.0)*x843*x858))), (((x850*x856))+(((-1.0)*r00*x847*x849))+(((-1.0)*cj6*x843*x850))+((cj1*x845*x857))+(((-1.0)*x845*x859))+((sj1*x845*x854))+(((-1.0)*x847*x860))+(((-1.0)*sj2*x855))+(((-1.0)*cj6*x844*x850))+((x846*x853))+((x847*x848))+(((-1.0)*r10*x849*x850))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x862=IKcos(j3);
IkReal x863=IKsin(j3);
IkReal x864=(sj1*sj6);
IkReal x865=(cj1*r00);
IkReal x866=((0.16)*cj6);
IkReal x867=(cj1*r01);
IkReal x868=((0.02086)*cj6);
IkReal x869=((0.54)*x863);
IkReal x870=((0.54)*x862);
CheckValue<IkReal> x871=IKPowWithIntegerCheck(cj6,-1);
if(!x871.valid){
continue;
}
evalcond[0]=(((sj2*x870))+(((-0.16)*r20*(x871.value)*(sj6*sj6)))+(((-0.71)*cj2))+(((-1.0)*cj2*x869))+pz+(((-1.0)*r20*x866)));
evalcond[1]=(((r11*sj1*x868))+((cj2*x870))+((sj2*x869))+((x867*x868))+((r10*sj1*x866))+(((-1.0)*cj1*px))+(((-0.16)*sj6*x867))+(((0.02086)*sj6*x865))+(((0.02086)*r10*x864))+(((-1.0)*py*sj1))+(((-0.16)*r11*x864))+(((0.71)*sj2))+((x865*x866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x872=r21*r21;
IkReal x873=cj6*cj6;
IkReal x874=(((x872*x873))+(((2.0)*cj6*r20*r21*sj6))+(((-1.0)*x872))+(((-1.0)*(r22*r22)))+(((-1.0)*x873*(r20*r20))));
j5eval[0]=x874;
j5eval[1]=IKsign(x874);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x875=((1.0)*cj1);
IkReal x876=((1.0)*sj1);
IkReal x877=((((-1.0)*cj6*r01*x875))+(((-1.0)*r10*sj6*x876))+(((-1.0)*cj6*r11*x876))+(((-1.0)*r00*sj6*x875)));
j5eval[0]=x877;
j5eval[1]=IKsign(x877);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x878=cj6*cj6;
IkReal x879=(cj6*sj6);
IkReal x880=(r00*sj1);
IkReal x881=((1.0)*r21);
IkReal x882=(cj1*r20);
IkReal x883=(r01*sj1);
IkReal x884=(cj1*r11);
IkReal x885=((((-1.0)*r20*x879*x883))+((cj1*r10*r21*x879))+((r21*x878*x884))+(((-1.0)*x879*x880*x881))+(((-1.0)*x878*x881*x883))+(((-1.0)*x881*x884))+(((-1.0)*cj1*r12*r22))+(((-1.0)*r10*x878*x882))+((r20*x878*x880))+((r11*x879*x882))+((r21*x883))+((r02*r22*sj1)));
j5eval[0]=x885;
j5eval[1]=IKsign(x885);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x886=cj6*cj6;
IkReal x887=(r02*sj1);
IkReal x888=(cj6*sj6);
IkReal x889=(r21*sj1);
IkReal x890=((1.0)*r00);
IkReal x891=(cj1*r11);
IkReal x892=(cj2*sj3);
IkReal x893=(cj3*sj2);
IkReal x894=(cj1*r12);
IkReal x895=(cj6*sj1);
IkReal x896=((1.0)*r01);
IkReal x897=(sj1*sj6);
IkReal x898=(r20*sj1);
IkReal x899=(cj1*r10);
IkReal x900=((1.0)*x899);
CheckValue<IkReal> x901 = IKatan2WithCheck(IkReal(((((-1.0)*x887*x893))+((x893*x894))+(((-1.0)*x892*x894))+((x887*x892)))),IkReal(((((-1.0)*x892*x896*x897))+(((-1.0)*sj6*x891*x893))+(((-1.0)*cj6*x892*x900))+(((-1.0)*x890*x893*x895))+((r00*x892*x895))+((sj6*x891*x892))+((cj6*x893*x899))+((r01*x893*x897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x901.valid){
continue;
}
CheckValue<IkReal> x902=IKPowWithIntegerCheck(IKsign(((((-1.0)*x888*x896*x898))+((r20*x888*x891))+(((-1.0)*x888*x889*x890))+((r21*x888*x899))+((r21*x886*x891))+((r01*x889))+(((-1.0)*r20*x886*x900))+((r00*x886*x898))+(((-1.0)*r21*x891))+(((-1.0)*r22*x894))+(((-1.0)*x886*x889*x896))+((r22*x887)))),-1);
if(!x902.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x901.value)+(((1.5707963267949)*(x902.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x903=IKcos(j5);
IkReal x904=IKsin(j5);
IkReal x905=(cj3*sj2);
IkReal x906=(cj1*r12);
IkReal x907=(sj1*sj6);
IkReal x908=((1.0)*cj2);
IkReal x909=(r21*sj6);
IkReal x910=(cj6*sj1);
IkReal x911=(r12*sj1);
IkReal x912=(cj1*r02);
IkReal x913=(sj2*sj3);
IkReal x914=(cj1*cj6);
IkReal x915=(r02*sj1);
IkReal x916=(cj1*sj6);
IkReal x917=(cj6*r20);
IkReal x918=(sj3*x908);
IkReal x919=((1.0)*x904);
IkReal x920=(r11*x904);
IkReal x921=((1.0)*x903);
IkReal x922=(r01*x916);
IkReal x923=(r11*x903);
evalcond[0]=(((x903*x917))+(((-1.0)*x918))+((r22*x904))+(((-1.0)*x909*x921))+x905);
evalcond[1]=((((-1.0)*r22*x921))+(((-1.0)*x913))+(((-1.0)*cj3*x908))+((x904*x917))+(((-1.0)*x909*x919)));
evalcond[2]=((((-1.0)*x906*x919))+((x916*x923))+(((-1.0)*r10*x914*x921))+((r00*x903*x910))+(((-1.0)*r01*x907*x921))+((x904*x915)));
evalcond[3]=(((x916*x920))+((x903*x906))+(((-1.0)*r01*x907*x919))+((r00*x904*x910))+(((-1.0)*r10*x914*x919))+(((-1.0)*x915*x921)));
evalcond[4]=(((x907*x920))+((x903*x912))+((x903*x911))+(((-1.0)*x918))+((x904*x922))+x905+(((-1.0)*r00*x914*x919))+(((-1.0)*r10*x910*x919)));
evalcond[5]=(((x907*x923))+((cj2*cj3))+((x903*x922))+(((-1.0)*r00*x914*x921))+(((-1.0)*r10*x910*x921))+(((-1.0)*x912*x919))+x913+(((-1.0)*x911*x919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x924=((1.0)*cj1);
IkReal x925=(r11*sj6);
IkReal x926=(cj2*sj3);
IkReal x927=(r00*sj1);
IkReal x928=(cj3*sj2);
IkReal x929=(r02*sj1);
IkReal x930=((1.0)*cj6);
IkReal x931=(cj6*x928);
IkReal x932=((1.0)*sj1*sj6);
CheckValue<IkReal> x933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x932))+(((-1.0)*r00*sj6*x924))+(((-1.0)*cj6*r01*x924))+(((-1.0)*r11*sj1*x930)))),-1);
if(!x933.valid){
continue;
}
CheckValue<IkReal> x934 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x928*x932))+((cj1*cj6*r10*x926))+((r01*sj1*sj6*x926))+((x927*x931))+(((-1.0)*r10*x924*x931))+(((-1.0)*x924*x925*x926))+(((-1.0)*x926*x927*x930))+((cj1*x925*x928)))),IkReal(((((-1.0)*x928*x929))+((cj1*r12*x928))+(((-1.0)*r12*x924*x926))+((x926*x929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x934.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x933.value)))+(x934.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x935=IKcos(j5);
IkReal x936=IKsin(j5);
IkReal x937=(cj3*sj2);
IkReal x938=(cj1*r12);
IkReal x939=(sj1*sj6);
IkReal x940=((1.0)*cj2);
IkReal x941=(r21*sj6);
IkReal x942=(cj6*sj1);
IkReal x943=(r12*sj1);
IkReal x944=(cj1*r02);
IkReal x945=(sj2*sj3);
IkReal x946=(cj1*cj6);
IkReal x947=(r02*sj1);
IkReal x948=(cj1*sj6);
IkReal x949=(cj6*r20);
IkReal x950=(sj3*x940);
IkReal x951=((1.0)*x936);
IkReal x952=(r11*x936);
IkReal x953=((1.0)*x935);
IkReal x954=(r01*x948);
IkReal x955=(r11*x935);
evalcond[0]=(((r22*x936))+(((-1.0)*x941*x953))+((x935*x949))+(((-1.0)*x950))+x937);
evalcond[1]=((((-1.0)*cj3*x940))+((x936*x949))+(((-1.0)*x941*x951))+(((-1.0)*x945))+(((-1.0)*r22*x953)));
evalcond[2]=((((-1.0)*x938*x951))+((x936*x947))+(((-1.0)*r10*x946*x953))+((r00*x935*x942))+((x948*x955))+(((-1.0)*r01*x939*x953)));
evalcond[3]=((((-1.0)*r10*x946*x951))+((x935*x938))+((x948*x952))+(((-1.0)*x947*x953))+((r00*x936*x942))+(((-1.0)*r01*x939*x951)));
evalcond[4]=((((-1.0)*r00*x946*x951))+(((-1.0)*r10*x942*x951))+((x935*x944))+((x935*x943))+(((-1.0)*x950))+((x939*x952))+x937+((x936*x954)));
evalcond[5]=((((-1.0)*r00*x946*x953))+((cj2*cj3))+(((-1.0)*x944*x951))+(((-1.0)*x943*x951))+(((-1.0)*r10*x942*x953))+((x935*x954))+((x939*x955))+x945);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x956=r21*r21;
IkReal x957=cj6*cj6;
IkReal x958=(sj2*sj3);
IkReal x959=(cj3*sj2);
IkReal x960=(cj2*cj3);
IkReal x961=(r21*sj6);
IkReal x962=(cj2*sj3);
IkReal x963=(cj6*r20);
IkReal x964=((1.0)*x963);
CheckValue<IkReal> x965 = IKatan2WithCheck(IkReal((((r22*x959))+(((-1.0)*x960*x964))+(((-1.0)*r22*x962))+((x960*x961))+(((-1.0)*x958*x964))+((x958*x961)))),IkReal((((r22*x958))+(((-1.0)*x962*x964))+((x961*x962))+(((-1.0)*x959*x961))+((x959*x963))+((r22*x960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x965.valid){
continue;
}
CheckValue<IkReal> x966=IKPowWithIntegerCheck(IKsign(((((-1.0)*x957*(r20*r20)))+(((-1.0)*x956))+(((2.0)*x961*x963))+((x956*x957))+(((-1.0)*(r22*r22))))),-1);
if(!x966.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x965.value)+(((1.5707963267949)*(x966.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x967=IKcos(j5);
IkReal x968=IKsin(j5);
IkReal x969=(cj3*sj2);
IkReal x970=(cj1*r12);
IkReal x971=(sj1*sj6);
IkReal x972=((1.0)*cj2);
IkReal x973=(r21*sj6);
IkReal x974=(cj6*sj1);
IkReal x975=(r12*sj1);
IkReal x976=(cj1*r02);
IkReal x977=(sj2*sj3);
IkReal x978=(cj1*cj6);
IkReal x979=(r02*sj1);
IkReal x980=(cj1*sj6);
IkReal x981=(cj6*r20);
IkReal x982=(sj3*x972);
IkReal x983=((1.0)*x968);
IkReal x984=(r11*x968);
IkReal x985=((1.0)*x967);
IkReal x986=(r01*x980);
IkReal x987=(r11*x967);
evalcond[0]=((((-1.0)*x982))+((x967*x981))+x969+(((-1.0)*x973*x985))+((r22*x968)));
evalcond[1]=((((-1.0)*x977))+(((-1.0)*cj3*x972))+((x968*x981))+(((-1.0)*r22*x985))+(((-1.0)*x973*x983)));
evalcond[2]=(((x968*x979))+(((-1.0)*x970*x983))+(((-1.0)*r01*x971*x985))+((x980*x987))+((r00*x967*x974))+(((-1.0)*r10*x978*x985)));
evalcond[3]=((((-1.0)*r01*x971*x983))+((x967*x970))+(((-1.0)*x979*x985))+((x980*x984))+((r00*x968*x974))+(((-1.0)*r10*x978*x983)));
evalcond[4]=((((-1.0)*x982))+(((-1.0)*r00*x978*x983))+(((-1.0)*r10*x974*x983))+((x968*x986))+((x971*x984))+((x967*x975))+((x967*x976))+x969);
evalcond[5]=(((cj2*cj3))+(((-1.0)*r00*x978*x985))+(((-1.0)*r10*x974*x985))+((x967*x986))+((x971*x987))+(((-1.0)*x975*x983))+(((-1.0)*x976*x983))+x977);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x988=((1.0)*sj1);
CheckValue<IkReal> x990 = IKatan2WithCheck(IkReal((((cj1*r12))+(((-1.0)*r02*x988)))),IkReal(((((-1.0)*r01*sj6*x988))+((cj6*r00*sj1))+(((-1.0)*cj1*cj6*r10))+((cj1*r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x990.valid){
continue;
}
IkReal x989=x990.value;
j5array[0]=((-1.0)*x989);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x989)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x991=IKcos(j5);
IkReal x992=IKsin(j5);
IkReal x993=((1.0)*cj1);
IkReal x994=(cj6*x991);
IkReal x995=(sj6*x991);
evalcond[0]=((((-1.0)*r10*x993*x994))+((r02*sj1*x992))+(((-1.0)*r01*sj1*x995))+((cj1*r11*x995))+((r00*sj1*x994))+(((-1.0)*r12*x992*x993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x996=((1.0)*r22);
IkReal x997=(sj2*sj5);
IkReal x998=(cj2*cj5);
IkReal x999=(r21*sj6);
IkReal x1000=(cj6*r20);
IkReal x1001=(cj5*sj2);
IkReal x1002=(cj2*sj5);
if( IKabs((((x1000*x998))+((x1000*x997))+(((-1.0)*x1001*x996))+(((-1.0)*x997*x999))+(((-1.0)*x998*x999))+((r22*x1002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1000*x1002))+(((-1.0)*x996*x997))+(((-1.0)*x996*x998))+(((-1.0)*x1002*x999))+((x1001*x999))+(((-1.0)*x1000*x1001)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1000*x998))+((x1000*x997))+(((-1.0)*x1001*x996))+(((-1.0)*x997*x999))+(((-1.0)*x998*x999))+((r22*x1002))))+IKsqr((((x1000*x1002))+(((-1.0)*x996*x997))+(((-1.0)*x996*x998))+(((-1.0)*x1002*x999))+((x1001*x999))+(((-1.0)*x1000*x1001))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x1000*x998))+((x1000*x997))+(((-1.0)*x1001*x996))+(((-1.0)*x997*x999))+(((-1.0)*x998*x999))+((r22*x1002))), (((x1000*x1002))+(((-1.0)*x996*x997))+(((-1.0)*x996*x998))+(((-1.0)*x1002*x999))+((x1001*x999))+(((-1.0)*x1000*x1001))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1003=IKcos(j3);
IkReal x1004=IKsin(j3);
IkReal x1005=((0.16)*sj1);
IkReal x1006=(r11*sj6);
IkReal x1007=(cj6*r10);
IkReal x1008=(cj5*sj1);
IkReal x1009=((0.16)*r20);
IkReal x1010=(cj1*sj6);
IkReal x1011=((1.0)*cj5);
IkReal x1012=(cj1*r02);
IkReal x1013=((0.02086)*cj6);
IkReal x1014=(cj6*r20);
IkReal x1015=((1.0)*sj5);
IkReal x1016=(r21*sj6);
IkReal x1017=(sj2*x1003);
IkReal x1018=(cj2*x1004);
IkReal x1019=(cj2*x1003);
IkReal x1020=(sj2*x1004);
IkReal x1021=(cj1*cj6*r00);
IkReal x1022=((1.0)*x1018);
evalcond[0]=((((-1.0)*x1011*x1016))+x1017+((r22*sj5))+(((-1.0)*x1022))+((cj5*x1014)));
evalcond[1]=((((-1.0)*r22*x1011))+(((-1.0)*x1020))+(((-1.0)*x1015*x1016))+((sj5*x1014))+(((-1.0)*x1019)));
CheckValue<IkReal> x1023=IKPowWithIntegerCheck(cj6,-1);
if(!x1023.valid){
continue;
}
evalcond[2]=((((-0.54)*x1018))+(((-0.71)*cj2))+(((0.54)*x1017))+(((-1.0)*x1009*(x1023.value)*(sj6*sj6)))+pz+(((-1.0)*cj6*x1009)));
evalcond[3]=(((r01*sj5*x1010))+x1017+(((-1.0)*sj1*x1007*x1015))+((sj1*sj5*x1006))+(((-1.0)*x1022))+((cj5*x1012))+(((-1.0)*x1015*x1021))+((r12*x1008)));
evalcond[4]=((((-1.0)*x1012*x1015))+((cj5*r01*x1010))+x1019+x1020+(((-1.0)*x1007*x1008))+(((-1.0)*r12*sj1*x1015))+((x1006*x1008))+(((-1.0)*x1011*x1021)));
evalcond[5]=((((0.54)*x1020))+((cj1*r01*x1013))+(((0.54)*x1019))+(((-1.0)*cj1*px))+(((0.02086)*r00*x1010))+(((-1.0)*x1005*x1006))+(((0.16)*x1021))+((r11*sj1*x1013))+(((0.02086)*r10*sj1*sj6))+(((-1.0)*py*sj1))+((x1005*x1007))+(((0.71)*sj2))+(((-0.16)*r01*x1010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1024=((1.0)*cj1);
CheckValue<IkReal> x1026 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10*x1024))+((cj6*r00*sj1))+((cj1*r11*sj6))+(((-1.0)*r01*sj1*sj6)))),IkReal(((((-1.0)*r12*x1024))+((r02*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1026.valid){
continue;
}
IkReal x1025=x1026.value;
j5array[0]=((-1.0)*x1025);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1025)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1027=IKsin(j5);
IkReal x1028=IKcos(j5);
IkReal x1029=(cj1*x1027);
IkReal x1030=(sj1*x1027);
evalcond[0]=(((r11*sj6*x1029))+(((-1.0)*r01*sj6*x1030))+(((-1.0)*r02*sj1*x1028))+(((-1.0)*cj6*r10*x1029))+((cj1*r12*x1028))+((cj6*r00*x1030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1031=((1.0)*r22);
IkReal x1032=(sj2*sj5);
IkReal x1033=(cj2*cj5);
IkReal x1034=(r21*sj6);
IkReal x1035=(cj6*r20);
IkReal x1036=(cj5*sj2);
IkReal x1037=(cj2*sj5);
if( IKabs((((r22*x1037))+(((-1.0)*x1033*x1034))+(((-1.0)*x1032*x1034))+(((-1.0)*x1031*x1036))+((x1033*x1035))+((x1032*x1035)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1034*x1037))+(((-1.0)*x1035*x1036))+(((-1.0)*x1031*x1033))+(((-1.0)*x1031*x1032))+((x1034*x1036))+((x1035*x1037)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x1037))+(((-1.0)*x1033*x1034))+(((-1.0)*x1032*x1034))+(((-1.0)*x1031*x1036))+((x1033*x1035))+((x1032*x1035))))+IKsqr(((((-1.0)*x1034*x1037))+(((-1.0)*x1035*x1036))+(((-1.0)*x1031*x1033))+(((-1.0)*x1031*x1032))+((x1034*x1036))+((x1035*x1037))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r22*x1037))+(((-1.0)*x1033*x1034))+(((-1.0)*x1032*x1034))+(((-1.0)*x1031*x1036))+((x1033*x1035))+((x1032*x1035))), ((((-1.0)*x1034*x1037))+(((-1.0)*x1035*x1036))+(((-1.0)*x1031*x1033))+(((-1.0)*x1031*x1032))+((x1034*x1036))+((x1035*x1037))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1038=IKcos(j3);
IkReal x1039=IKsin(j3);
IkReal x1040=((0.16)*sj1);
IkReal x1041=(r11*sj6);
IkReal x1042=(cj6*r10);
IkReal x1043=(cj5*sj1);
IkReal x1044=((0.16)*r20);
IkReal x1045=(cj1*sj6);
IkReal x1046=((1.0)*cj5);
IkReal x1047=(cj1*r02);
IkReal x1048=((0.02086)*cj6);
IkReal x1049=(cj6*r20);
IkReal x1050=((1.0)*sj5);
IkReal x1051=(r21*sj6);
IkReal x1052=(sj2*x1038);
IkReal x1053=(cj2*x1039);
IkReal x1054=(cj2*x1038);
IkReal x1055=(sj2*x1039);
IkReal x1056=(cj1*cj6*r00);
IkReal x1057=((1.0)*x1053);
evalcond[0]=((((-1.0)*x1057))+(((-1.0)*x1046*x1051))+x1052+((r22*sj5))+((cj5*x1049)));
evalcond[1]=(((sj5*x1049))+(((-1.0)*r22*x1046))+(((-1.0)*x1054))+(((-1.0)*x1055))+(((-1.0)*x1050*x1051)));
CheckValue<IkReal> x1058=IKPowWithIntegerCheck(cj6,-1);
if(!x1058.valid){
continue;
}
evalcond[2]=((((-0.71)*cj2))+pz+(((0.54)*x1052))+(((-0.54)*x1053))+(((-1.0)*x1044*(x1058.value)*(sj6*sj6)))+(((-1.0)*cj6*x1044)));
evalcond[3]=((((-1.0)*x1057))+x1052+((r01*sj5*x1045))+(((-1.0)*sj1*x1042*x1050))+((cj5*x1047))+(((-1.0)*x1050*x1056))+((r12*x1043))+((sj1*sj5*x1041)));
evalcond[4]=((((-1.0)*x1046*x1056))+x1054+x1055+((x1041*x1043))+(((-1.0)*r12*sj1*x1050))+(((-1.0)*x1042*x1043))+((cj5*r01*x1045))+(((-1.0)*x1047*x1050)));
evalcond[5]=((((0.16)*x1056))+(((0.02086)*r00*x1045))+((x1040*x1042))+(((-1.0)*cj1*px))+((cj1*r01*x1048))+(((-0.16)*r01*x1045))+(((0.02086)*r10*sj1*sj6))+(((-1.0)*py*sj1))+(((0.54)*x1054))+(((0.54)*x1055))+(((-1.0)*x1040*x1041))+(((0.71)*sj2))+((r11*sj1*x1048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265;
IkReal x1059=((1.0)*cj1);
j5eval[0]=((IKabs(((((-1.0)*r12*x1059))+((r02*sj1)))))+(IKabs((((cj6*r00*sj1))+((cj1*r11*sj6))+(((-1.0)*cj6*r10*x1059))+(((-1.0)*r01*sj1*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265;
IkReal x1060=((1.0)*sj1);
j5eval[0]=((IKabs(((((-1.0)*r02*x1060))+((cj1*r12)))))+(IKabs((((cj6*r00*sj1))+(((-1.0)*cj1*cj6*r10))+(((-1.0)*r01*sj6*x1060))+((cj1*r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265;
j3eval[0]=cj6;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3, j5]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1080=IKPowWithIntegerCheck(cj6,-1);
if(!x1080.valid){
continue;
}
IkReal x1061=x1080.value;
IkReal x1062=((0.296296296296296)*r10);
IkReal x1063=((0.0386296296296296)*r11);
IkReal x1064=((0.296296296296296)*cj2);
IkReal x1065=(r20*x1061);
IkReal x1066=(cj1*cj2);
IkReal x1067=((1.85185185185185)*px);
IkReal x1068=((0.0386296296296296)*sj6);
IkReal x1069=(cj2*sj1);
IkReal x1070=(cj1*sj2);
IkReal x1071=(sj1*sj2);
IkReal x1072=((0.296296296296296)*sj2);
IkReal x1073=(r11*sj6);
IkReal x1074=((1.85185185185185)*pz);
IkReal x1075=((1.85185185185185)*py);
IkReal x1076=(r01*sj6);
IkReal x1077=(cj6*x1071);
IkReal x1078=(cj1*cj6*r00);
IkReal x1079=((0.0386296296296296)*cj6*r01);
if( IKabs(((-1.31481481481481)+(((-1.0)*x1063*x1077))+(((-1.0)*r10*x1068*x1071))+(((-1.0)*x1070*x1079))+((x1071*x1075))+((x1067*x1070))+((cj2*x1074))+(((-1.0)*x1062*x1077))+(((0.296296296296296)*x1071*x1073))+(((0.296296296296296)*x1070*x1076))+(((-0.296296296296296)*cj6*r00*x1070))+(((-1.0)*r00*x1068*x1070))+(((-1.0)*x1064*x1065)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1064*x1073))+((x1069*x1075))+(((-1.0)*r10*x1068*x1069))+(((-1.0)*sj2*x1074))+(((-1.0)*r00*x1066*x1068))+((x1066*x1067))+(((-1.0)*x1066*x1079))+(((-1.0)*cj6*x1063*x1069))+((cj1*x1064*x1076))+(((-1.0)*cj6*x1062*x1069))+(((-1.0)*x1064*x1078))+((x1065*x1072)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.31481481481481)+(((-1.0)*x1063*x1077))+(((-1.0)*r10*x1068*x1071))+(((-1.0)*x1070*x1079))+((x1071*x1075))+((x1067*x1070))+((cj2*x1074))+(((-1.0)*x1062*x1077))+(((0.296296296296296)*x1071*x1073))+(((0.296296296296296)*x1070*x1076))+(((-0.296296296296296)*cj6*r00*x1070))+(((-1.0)*r00*x1068*x1070))+(((-1.0)*x1064*x1065))))+IKsqr((((sj1*x1064*x1073))+((x1069*x1075))+(((-1.0)*r10*x1068*x1069))+(((-1.0)*sj2*x1074))+(((-1.0)*r00*x1066*x1068))+((x1066*x1067))+(((-1.0)*x1066*x1079))+(((-1.0)*cj6*x1063*x1069))+((cj1*x1064*x1076))+(((-1.0)*cj6*x1062*x1069))+(((-1.0)*x1064*x1078))+((x1065*x1072))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.31481481481481)+(((-1.0)*x1063*x1077))+(((-1.0)*r10*x1068*x1071))+(((-1.0)*x1070*x1079))+((x1071*x1075))+((x1067*x1070))+((cj2*x1074))+(((-1.0)*x1062*x1077))+(((0.296296296296296)*x1071*x1073))+(((0.296296296296296)*x1070*x1076))+(((-0.296296296296296)*cj6*r00*x1070))+(((-1.0)*r00*x1068*x1070))+(((-1.0)*x1064*x1065))), (((sj1*x1064*x1073))+((x1069*x1075))+(((-1.0)*r10*x1068*x1069))+(((-1.0)*sj2*x1074))+(((-1.0)*r00*x1066*x1068))+((x1066*x1067))+(((-1.0)*x1066*x1079))+(((-1.0)*cj6*x1063*x1069))+((cj1*x1064*x1076))+(((-1.0)*cj6*x1062*x1069))+(((-1.0)*x1064*x1078))+((x1065*x1072))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1081=IKcos(j3);
IkReal x1082=IKsin(j3);
IkReal x1083=(sj1*sj6);
IkReal x1084=(cj1*r00);
IkReal x1085=((0.16)*cj6);
IkReal x1086=(cj1*r01);
IkReal x1087=((0.02086)*cj6);
IkReal x1088=((0.54)*x1082);
IkReal x1089=((0.54)*x1081);
CheckValue<IkReal> x1090=IKPowWithIntegerCheck(cj6,-1);
if(!x1090.valid){
continue;
}
evalcond[0]=((((-0.16)*r20*(x1090.value)*(sj6*sj6)))+(((-0.71)*cj2))+((sj2*x1089))+pz+(((-1.0)*r20*x1085))+(((-1.0)*cj2*x1088)));
evalcond[1]=((((0.02086)*sj6*x1084))+((sj2*x1088))+(((-1.0)*cj1*px))+((r10*sj1*x1085))+(((-0.16)*sj6*x1086))+(((-0.16)*r11*x1083))+(((-1.0)*py*sj1))+(((0.71)*sj2))+((x1086*x1087))+((cj2*x1089))+(((0.02086)*r10*x1083))+((x1084*x1085))+((r11*sj1*x1087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265;
IkReal x1091=r21*r21;
IkReal x1092=cj6*cj6;
IkReal x1093=((((2.0)*cj6*r20*r21*sj6))+(((-1.0)*x1092*(r20*r20)))+(((-1.0)*x1091))+(((-1.0)*(r22*r22)))+((x1091*x1092)));
j5eval[0]=x1093;
j5eval[1]=IKsign(x1093);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265;
IkReal x1094=((1.0)*cj1);
IkReal x1095=((1.0)*sj1);
IkReal x1096=((((-1.0)*cj6*r01*x1094))+(((-1.0)*r10*sj6*x1095))+(((-1.0)*cj6*r11*x1095))+(((-1.0)*r00*sj6*x1094)));
j5eval[0]=x1096;
j5eval[1]=IKsign(x1096);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265;
IkReal x1097=cj6*cj6;
IkReal x1098=(cj6*sj6);
IkReal x1099=(r00*sj1);
IkReal x1100=((1.0)*r21);
IkReal x1101=(cj1*r20);
IkReal x1102=(r01*sj1);
IkReal x1103=(cj1*r11);
IkReal x1104=(((r11*x1098*x1101))+(((-1.0)*x1097*x1100*x1102))+(((-1.0)*r20*x1098*x1102))+((r21*x1097*x1103))+(((-1.0)*cj1*r12*r22))+((cj1*r10*r21*x1098))+(((-1.0)*x1100*x1103))+((r20*x1097*x1099))+(((-1.0)*r10*x1097*x1101))+((r21*x1102))+(((-1.0)*x1098*x1099*x1100))+((r02*r22*sj1)));
j5eval[0]=x1104;
j5eval[1]=IKsign(x1104);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1105=cj6*cj6;
IkReal x1106=(r02*sj1);
IkReal x1107=(cj6*sj6);
IkReal x1108=(r21*sj1);
IkReal x1109=((1.0)*r00);
IkReal x1110=(cj1*r11);
IkReal x1111=(cj2*sj3);
IkReal x1112=(cj3*sj2);
IkReal x1113=(cj1*r12);
IkReal x1114=(cj6*sj1);
IkReal x1115=((1.0)*r01);
IkReal x1116=(sj1*sj6);
IkReal x1117=(r20*sj1);
IkReal x1118=(cj1*r10);
IkReal x1119=((1.0)*x1118);
CheckValue<IkReal> x1120=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1107*x1115*x1117))+(((-1.0)*r20*x1105*x1119))+((r21*x1105*x1110))+((r01*x1108))+((r00*x1105*x1117))+((r20*x1107*x1110))+(((-1.0)*x1105*x1108*x1115))+((r22*x1106))+(((-1.0)*r21*x1110))+(((-1.0)*x1107*x1108*x1109))+((r21*x1107*x1118))+(((-1.0)*r22*x1113)))),-1);
if(!x1120.valid){
continue;
}
CheckValue<IkReal> x1121 = IKatan2WithCheck(IkReal((((x1112*x1113))+(((-1.0)*x1111*x1113))+((x1106*x1111))+(((-1.0)*x1106*x1112)))),IkReal(((((-1.0)*sj6*x1110*x1112))+((sj6*x1110*x1111))+((cj6*x1112*x1118))+(((-1.0)*x1111*x1115*x1116))+(((-1.0)*cj6*x1111*x1119))+(((-1.0)*x1109*x1112*x1114))+((r00*x1111*x1114))+((r01*x1112*x1116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1121.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1120.value)))+(x1121.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1122=IKcos(j5);
IkReal x1123=IKsin(j5);
IkReal x1124=(sj2*sj3);
IkReal x1125=(cj2*cj3);
IkReal x1126=(cj1*r12);
IkReal x1127=(sj1*sj6);
IkReal x1128=(cj2*sj3);
IkReal x1129=(r21*sj6);
IkReal x1130=(cj6*sj1);
IkReal x1131=(r12*sj1);
IkReal x1132=(cj1*r02);
IkReal x1133=(cj1*cj6);
IkReal x1134=(r02*sj1);
IkReal x1135=(cj3*sj2);
IkReal x1136=(cj1*sj6);
IkReal x1137=(cj6*r20);
IkReal x1138=((1.0)*x1123);
IkReal x1139=(r11*x1123);
IkReal x1140=((1.0)*x1122);
IkReal x1141=(r01*x1136);
IkReal x1142=(r11*x1122);
IkReal x1143=(x1124+x1125);
evalcond[0]=(x1135+(((-1.0)*x1129*x1140))+((r22*x1123))+(((-1.0)*x1128))+((x1122*x1137)));
evalcond[1]=(x1143+((x1123*x1137))+(((-1.0)*r22*x1140))+(((-1.0)*x1129*x1138)));
evalcond[2]=((((-1.0)*r10*x1133*x1140))+((r00*x1122*x1130))+(((-1.0)*x1126*x1138))+((x1123*x1134))+(((-1.0)*r01*x1127*x1140))+((x1136*x1142)));
evalcond[3]=(((r00*x1123*x1130))+(((-1.0)*x1134*x1140))+((x1136*x1139))+(((-1.0)*r01*x1127*x1138))+((x1122*x1126))+(((-1.0)*r10*x1133*x1138)));
evalcond[4]=(x1128+(((-1.0)*r10*x1130*x1138))+((x1123*x1141))+(((-1.0)*r00*x1133*x1138))+(((-1.0)*x1135))+((x1122*x1131))+((x1122*x1132))+((x1127*x1139)));
evalcond[5]=(x1143+(((-1.0)*x1131*x1138))+((x1127*x1142))+(((-1.0)*r10*x1130*x1140))+((x1122*x1141))+(((-1.0)*x1132*x1138))+(((-1.0)*r00*x1133*x1140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1144=((1.0)*cj1);
IkReal x1145=(r11*sj6);
IkReal x1146=(cj2*sj3);
IkReal x1147=(r00*sj1);
IkReal x1148=(cj3*sj2);
IkReal x1149=(r02*sj1);
IkReal x1150=((1.0)*cj6);
IkReal x1151=(cj6*x1148);
IkReal x1152=((1.0)*sj1*sj6);
CheckValue<IkReal> x1153=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x1144))+(((-1.0)*r11*sj1*x1150))+(((-1.0)*r10*x1152))+(((-1.0)*cj6*r01*x1144)))),-1);
if(!x1153.valid){
continue;
}
CheckValue<IkReal> x1154 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1144*x1151))+((cj1*x1145*x1148))+(((-1.0)*r01*x1148*x1152))+((x1147*x1151))+(((-1.0)*x1146*x1147*x1150))+((r01*sj1*sj6*x1146))+((cj1*cj6*r10*x1146))+(((-1.0)*x1144*x1145*x1146)))),IkReal((((x1146*x1149))+(((-1.0)*x1148*x1149))+(((-1.0)*r12*x1144*x1146))+((cj1*r12*x1148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1154.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1153.value)))+(x1154.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1155=IKcos(j5);
IkReal x1156=IKsin(j5);
IkReal x1157=(sj2*sj3);
IkReal x1158=(cj2*cj3);
IkReal x1159=(cj1*r12);
IkReal x1160=(sj1*sj6);
IkReal x1161=(cj2*sj3);
IkReal x1162=(r21*sj6);
IkReal x1163=(cj6*sj1);
IkReal x1164=(r12*sj1);
IkReal x1165=(cj1*r02);
IkReal x1166=(cj1*cj6);
IkReal x1167=(r02*sj1);
IkReal x1168=(cj3*sj2);
IkReal x1169=(cj1*sj6);
IkReal x1170=(cj6*r20);
IkReal x1171=((1.0)*x1156);
IkReal x1172=(r11*x1156);
IkReal x1173=((1.0)*x1155);
IkReal x1174=(r01*x1169);
IkReal x1175=(r11*x1155);
IkReal x1176=(x1158+x1157);
evalcond[0]=(x1168+((r22*x1156))+((x1155*x1170))+(((-1.0)*x1162*x1173))+(((-1.0)*x1161)));
evalcond[1]=(x1176+(((-1.0)*x1162*x1171))+((x1156*x1170))+(((-1.0)*r22*x1173)));
evalcond[2]=((((-1.0)*r01*x1160*x1173))+(((-1.0)*x1159*x1171))+((r00*x1155*x1163))+((x1156*x1167))+(((-1.0)*r10*x1166*x1173))+((x1169*x1175)));
evalcond[3]=((((-1.0)*r01*x1160*x1171))+((r00*x1156*x1163))+(((-1.0)*x1167*x1173))+(((-1.0)*r10*x1166*x1171))+((x1169*x1172))+((x1155*x1159)));
evalcond[4]=(x1161+((x1155*x1164))+((x1155*x1165))+((x1156*x1174))+(((-1.0)*r00*x1166*x1171))+(((-1.0)*r10*x1163*x1171))+(((-1.0)*x1168))+((x1160*x1172)));
evalcond[5]=((((-1.0)*x1165*x1171))+x1176+((x1155*x1174))+(((-1.0)*r00*x1166*x1173))+(((-1.0)*x1164*x1171))+(((-1.0)*r10*x1163*x1173))+((x1160*x1175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1177=r21*r21;
IkReal x1178=cj6*cj6;
IkReal x1179=(sj2*sj3);
IkReal x1180=(cj6*r20);
IkReal x1181=(r21*sj6);
IkReal x1182=(cj2*sj3);
IkReal x1183=((1.0)*r22);
IkReal x1184=(cj3*sj2);
IkReal x1185=(cj2*cj3);
CheckValue<IkReal> x1186=IKPowWithIntegerCheck(IKsign((((x1177*x1178))+(((-1.0)*r22*x1183))+(((-1.0)*x1178*(r20*r20)))+(((2.0)*x1180*x1181))+(((-1.0)*x1177)))),-1);
if(!x1186.valid){
continue;
}
CheckValue<IkReal> x1187 = IKatan2WithCheck(IkReal(((((-1.0)*x1181*x1185))+((x1180*x1185))+((x1179*x1180))+((r22*x1184))+(((-1.0)*x1182*x1183))+(((-1.0)*x1179*x1181)))),IkReal(((((-1.0)*x1181*x1184))+((x1180*x1184))+(((-1.0)*x1179*x1183))+(((-1.0)*x1180*x1182))+((x1181*x1182))+(((-1.0)*x1183*x1185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1187.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1186.value)))+(x1187.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1188=IKcos(j5);
IkReal x1189=IKsin(j5);
IkReal x1190=(sj2*sj3);
IkReal x1191=(cj2*cj3);
IkReal x1192=(cj1*r12);
IkReal x1193=(sj1*sj6);
IkReal x1194=(cj2*sj3);
IkReal x1195=(r21*sj6);
IkReal x1196=(cj6*sj1);
IkReal x1197=(r12*sj1);
IkReal x1198=(cj1*r02);
IkReal x1199=(cj1*cj6);
IkReal x1200=(r02*sj1);
IkReal x1201=(cj3*sj2);
IkReal x1202=(cj1*sj6);
IkReal x1203=(cj6*r20);
IkReal x1204=((1.0)*x1189);
IkReal x1205=(r11*x1189);
IkReal x1206=((1.0)*x1188);
IkReal x1207=(r01*x1202);
IkReal x1208=(r11*x1188);
IkReal x1209=(x1191+x1190);
evalcond[0]=(x1201+((r22*x1189))+(((-1.0)*x1194))+(((-1.0)*x1195*x1206))+((x1188*x1203)));
evalcond[1]=(x1209+((x1189*x1203))+(((-1.0)*r22*x1206))+(((-1.0)*x1195*x1204)));
evalcond[2]=(((x1189*x1200))+(((-1.0)*r10*x1199*x1206))+((x1202*x1208))+(((-1.0)*r01*x1193*x1206))+((r00*x1188*x1196))+(((-1.0)*x1192*x1204)));
evalcond[3]=((((-1.0)*r10*x1199*x1204))+((x1188*x1192))+((x1202*x1205))+(((-1.0)*r01*x1193*x1204))+(((-1.0)*x1200*x1206))+((r00*x1189*x1196)));
evalcond[4]=(x1194+((x1189*x1207))+((x1193*x1205))+((x1188*x1198))+((x1188*x1197))+(((-1.0)*x1201))+(((-1.0)*r00*x1199*x1204))+(((-1.0)*r10*x1196*x1204)));
evalcond[5]=(x1209+((x1193*x1208))+(((-1.0)*x1197*x1204))+(((-1.0)*r00*x1199*x1206))+(((-1.0)*r10*x1196*x1206))+((x1188*x1207))+(((-1.0)*x1198*x1204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1210=((1.0)*sj1);
CheckValue<IkReal> x1212 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1210))+((cj1*r12)))),IkReal((((cj6*r00*sj1))+(((-1.0)*cj1*cj6*r10))+(((-1.0)*r01*sj6*x1210))+((cj1*r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1212.valid){
continue;
}
IkReal x1211=x1212.value;
j5array[0]=((-1.0)*x1211);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1211)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1213=IKcos(j5);
IkReal x1214=IKsin(j5);
IkReal x1215=((1.0)*cj1);
IkReal x1216=(cj6*x1213);
IkReal x1217=(sj6*x1213);
evalcond[0]=((((-1.0)*r12*x1214*x1215))+(((-1.0)*r01*sj1*x1217))+((r02*sj1*x1214))+((cj1*r11*x1217))+((r00*sj1*x1216))+(((-1.0)*r10*x1215*x1216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1218=(r22*sj2);
IkReal x1219=((1.0)*sj5);
IkReal x1220=(cj6*r20);
IkReal x1221=(cj2*cj5);
IkReal x1222=(r21*sj6);
IkReal x1223=(cj5*sj2);
IkReal x1224=(cj2*sj5);
if( IKabs((((sj2*sj5*x1222))+((cj5*x1218))+(((-1.0)*x1221*x1222))+((x1220*x1221))+((r22*x1224))+(((-1.0)*sj2*x1219*x1220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj2*x1219*x1220))+(((-1.0)*x1218*x1219))+(((-1.0)*x1220*x1223))+((r22*x1221))+((x1222*x1224))+((x1222*x1223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*sj5*x1222))+((cj5*x1218))+(((-1.0)*x1221*x1222))+((x1220*x1221))+((r22*x1224))+(((-1.0)*sj2*x1219*x1220))))+IKsqr(((((-1.0)*cj2*x1219*x1220))+(((-1.0)*x1218*x1219))+(((-1.0)*x1220*x1223))+((r22*x1221))+((x1222*x1224))+((x1222*x1223))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj2*sj5*x1222))+((cj5*x1218))+(((-1.0)*x1221*x1222))+((x1220*x1221))+((r22*x1224))+(((-1.0)*sj2*x1219*x1220))), ((((-1.0)*cj2*x1219*x1220))+(((-1.0)*x1218*x1219))+(((-1.0)*x1220*x1223))+((r22*x1221))+((x1222*x1224))+((x1222*x1223))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1225=IKsin(j3);
IkReal x1226=IKcos(j3);
IkReal x1227=((0.16)*sj1);
IkReal x1228=(r11*sj6);
IkReal x1229=(cj6*r10);
IkReal x1230=(cj5*sj1);
IkReal x1231=((0.16)*r20);
IkReal x1232=((1.0)*cj5);
IkReal x1233=(cj1*sj6);
IkReal x1234=(cj1*r02);
IkReal x1235=((0.02086)*cj6);
IkReal x1236=(cj6*r20);
IkReal x1237=((1.0)*sj5);
IkReal x1238=(r21*sj6);
IkReal x1239=(sj2*x1225);
IkReal x1240=(cj2*x1226);
IkReal x1241=(cj2*x1225);
IkReal x1242=(sj2*x1226);
IkReal x1243=(cj1*cj6*r00);
IkReal x1244=(x1240+x1239);
evalcond[0]=(x1242+((r22*sj5))+(((-1.0)*x1241))+((cj5*x1236))+(((-1.0)*x1232*x1238)));
evalcond[1]=(x1244+((sj5*x1236))+(((-1.0)*x1237*x1238))+(((-1.0)*r22*x1232)));
CheckValue<IkReal> x1245=IKPowWithIntegerCheck(cj6,-1);
if(!x1245.valid){
continue;
}
evalcond[2]=((((-1.0)*cj6*x1231))+(((0.54)*x1242))+(((-0.71)*cj2))+pz+(((-0.54)*x1241))+(((-1.0)*x1231*(x1245.value)*(sj6*sj6))));
evalcond[3]=(x1241+((r01*sj5*x1233))+(((-1.0)*x1242))+((cj5*x1234))+(((-1.0)*x1237*x1243))+(((-1.0)*sj1*x1229*x1237))+((sj1*sj5*x1228))+((r12*x1230)));
evalcond[4]=(x1244+((x1228*x1230))+(((-1.0)*x1234*x1237))+(((-1.0)*r12*sj1*x1237))+((cj5*r01*x1233))+(((-1.0)*x1229*x1230))+(((-1.0)*x1232*x1243)));
evalcond[5]=((((0.54)*x1240))+(((0.16)*x1243))+(((0.02086)*r00*x1233))+(((-1.0)*x1227*x1228))+(((0.54)*x1239))+(((-1.0)*cj1*px))+((r11*sj1*x1235))+((cj1*r01*x1235))+(((0.02086)*r10*sj1*sj6))+(((-1.0)*py*sj1))+(((0.71)*sj2))+((x1227*x1229))+(((-0.16)*r01*x1233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1246=((1.0)*cj1);
CheckValue<IkReal> x1248 = IKatan2WithCheck(IkReal((((cj6*r00*sj1))+((cj1*r11*sj6))+(((-1.0)*r01*sj1*sj6))+(((-1.0)*cj6*r10*x1246)))),IkReal((((r02*sj1))+(((-1.0)*r12*x1246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1248.valid){
continue;
}
IkReal x1247=x1248.value;
j5array[0]=((-1.0)*x1247);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1247)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1249=IKsin(j5);
IkReal x1250=IKcos(j5);
IkReal x1251=(cj1*x1249);
IkReal x1252=(sj1*x1249);
evalcond[0]=(((cj6*r00*x1252))+(((-1.0)*r02*sj1*x1250))+((cj1*r12*x1250))+((r11*sj6*x1251))+(((-1.0)*r01*sj6*x1252))+(((-1.0)*cj6*r10*x1251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1253=(r22*sj2);
IkReal x1254=((1.0)*sj5);
IkReal x1255=(cj6*r20);
IkReal x1256=(cj2*cj5);
IkReal x1257=(r21*sj6);
IkReal x1258=(cj5*sj2);
IkReal x1259=(cj2*sj5);
if( IKabs(((((-1.0)*x1256*x1257))+((r22*x1259))+(((-1.0)*sj2*x1254*x1255))+((sj2*sj5*x1257))+((x1255*x1256))+((cj5*x1253)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1253*x1254))+((r22*x1256))+((x1257*x1259))+((x1257*x1258))+(((-1.0)*cj2*x1254*x1255))+(((-1.0)*x1255*x1258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1256*x1257))+((r22*x1259))+(((-1.0)*sj2*x1254*x1255))+((sj2*sj5*x1257))+((x1255*x1256))+((cj5*x1253))))+IKsqr(((((-1.0)*x1253*x1254))+((r22*x1256))+((x1257*x1259))+((x1257*x1258))+(((-1.0)*cj2*x1254*x1255))+(((-1.0)*x1255*x1258))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1256*x1257))+((r22*x1259))+(((-1.0)*sj2*x1254*x1255))+((sj2*sj5*x1257))+((x1255*x1256))+((cj5*x1253))), ((((-1.0)*x1253*x1254))+((r22*x1256))+((x1257*x1259))+((x1257*x1258))+(((-1.0)*cj2*x1254*x1255))+(((-1.0)*x1255*x1258))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1260=IKsin(j3);
IkReal x1261=IKcos(j3);
IkReal x1262=((0.16)*sj1);
IkReal x1263=(r11*sj6);
IkReal x1264=(cj6*r10);
IkReal x1265=(cj5*sj1);
IkReal x1266=((0.16)*r20);
IkReal x1267=((1.0)*cj5);
IkReal x1268=(cj1*sj6);
IkReal x1269=(cj1*r02);
IkReal x1270=((0.02086)*cj6);
IkReal x1271=(cj6*r20);
IkReal x1272=((1.0)*sj5);
IkReal x1273=(r21*sj6);
IkReal x1274=(sj2*x1260);
IkReal x1275=(cj2*x1261);
IkReal x1276=(cj2*x1260);
IkReal x1277=(sj2*x1261);
IkReal x1278=(cj1*cj6*r00);
IkReal x1279=(x1274+x1275);
evalcond[0]=(x1277+(((-1.0)*x1267*x1273))+((r22*sj5))+(((-1.0)*x1276))+((cj5*x1271)));
evalcond[1]=(x1279+(((-1.0)*r22*x1267))+(((-1.0)*x1272*x1273))+((sj5*x1271)));
CheckValue<IkReal> x1280=IKPowWithIntegerCheck(cj6,-1);
if(!x1280.valid){
continue;
}
evalcond[2]=((((-1.0)*x1266*(x1280.value)*(sj6*sj6)))+(((-0.71)*cj2))+(((-0.54)*x1276))+(((-1.0)*cj6*x1266))+pz+(((0.54)*x1277)));
evalcond[3]=(x1276+((r12*x1265))+(((-1.0)*sj1*x1264*x1272))+(((-1.0)*x1272*x1278))+((r01*sj5*x1268))+((sj1*sj5*x1263))+(((-1.0)*x1277))+((cj5*x1269)));
evalcond[4]=(x1279+(((-1.0)*x1267*x1278))+(((-1.0)*x1264*x1265))+(((-1.0)*x1269*x1272))+((cj5*r01*x1268))+((x1263*x1265))+(((-1.0)*r12*sj1*x1272)));
evalcond[5]=((((0.02086)*r00*x1268))+((r11*sj1*x1270))+(((-1.0)*cj1*px))+(((-1.0)*x1262*x1263))+((x1262*x1264))+(((-0.16)*r01*x1268))+(((0.02086)*r10*sj1*sj6))+(((-1.0)*py*sj1))+(((0.71)*sj2))+((cj1*r01*x1270))+(((0.16)*x1278))+(((0.54)*x1275))+(((0.54)*x1274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj4=0;
cj4=-1.0;
j4=-3.14159265;
IkReal x1281=((1.0)*cj1);
j5eval[0]=((IKabs((((r02*sj1))+(((-1.0)*r12*x1281)))))+(IKabs(((((-1.0)*cj6*r10*x1281))+((cj6*r00*sj1))+((cj1*r11*sj6))+(((-1.0)*r01*sj1*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=-1.0;
j4=-3.14159265;
IkReal x1282=((1.0)*sj1);
j5eval[0]=((IKabs((((cj6*r00*sj1))+(((-1.0)*cj1*cj6*r10))+(((-1.0)*r01*sj6*x1282))+((cj1*r11*sj6)))))+(IKabs(((((-1.0)*r02*x1282))+((cj1*r12))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj4=0;
cj4=-1.0;
j4=-3.14159265;
j3eval[0]=cj6;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3, j5]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1302=IKPowWithIntegerCheck(cj6,-1);
if(!x1302.valid){
continue;
}
IkReal x1283=x1302.value;
IkReal x1284=((0.296296296296296)*r10);
IkReal x1285=((0.0386296296296296)*r11);
IkReal x1286=((0.296296296296296)*cj2);
IkReal x1287=(r20*x1283);
IkReal x1288=(cj1*cj2);
IkReal x1289=((1.85185185185185)*px);
IkReal x1290=((0.0386296296296296)*sj6);
IkReal x1291=(cj2*sj1);
IkReal x1292=(cj1*sj2);
IkReal x1293=(sj1*sj2);
IkReal x1294=((0.296296296296296)*sj2);
IkReal x1295=(r11*sj6);
IkReal x1296=((1.85185185185185)*pz);
IkReal x1297=((1.85185185185185)*py);
IkReal x1298=(r01*sj6);
IkReal x1299=(cj6*x1293);
IkReal x1300=(cj1*cj6*r00);
IkReal x1301=((0.0386296296296296)*cj6*r01);
if( IKabs(((-1.31481481481481)+(((-1.0)*x1284*x1299))+((cj2*x1296))+(((0.296296296296296)*x1292*x1298))+(((-1.0)*r10*x1290*x1293))+(((-1.0)*r00*x1290*x1292))+((x1293*x1297))+(((-0.296296296296296)*cj6*r00*x1292))+(((-1.0)*x1292*x1301))+(((-1.0)*x1286*x1287))+(((-1.0)*x1285*x1299))+(((0.296296296296296)*x1293*x1295))+((x1289*x1292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1288*x1289))+(((-1.0)*cj6*x1284*x1291))+((cj1*x1286*x1298))+(((-1.0)*cj6*x1285*x1291))+((x1287*x1294))+(((-1.0)*r10*x1290*x1291))+(((-1.0)*sj2*x1296))+(((-1.0)*x1286*x1300))+((x1291*x1297))+((sj1*x1286*x1295))+(((-1.0)*r00*x1288*x1290))+(((-1.0)*x1288*x1301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.31481481481481)+(((-1.0)*x1284*x1299))+((cj2*x1296))+(((0.296296296296296)*x1292*x1298))+(((-1.0)*r10*x1290*x1293))+(((-1.0)*r00*x1290*x1292))+((x1293*x1297))+(((-0.296296296296296)*cj6*r00*x1292))+(((-1.0)*x1292*x1301))+(((-1.0)*x1286*x1287))+(((-1.0)*x1285*x1299))+(((0.296296296296296)*x1293*x1295))+((x1289*x1292))))+IKsqr((((x1288*x1289))+(((-1.0)*cj6*x1284*x1291))+((cj1*x1286*x1298))+(((-1.0)*cj6*x1285*x1291))+((x1287*x1294))+(((-1.0)*r10*x1290*x1291))+(((-1.0)*sj2*x1296))+(((-1.0)*x1286*x1300))+((x1291*x1297))+((sj1*x1286*x1295))+(((-1.0)*r00*x1288*x1290))+(((-1.0)*x1288*x1301))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.31481481481481)+(((-1.0)*x1284*x1299))+((cj2*x1296))+(((0.296296296296296)*x1292*x1298))+(((-1.0)*r10*x1290*x1293))+(((-1.0)*r00*x1290*x1292))+((x1293*x1297))+(((-0.296296296296296)*cj6*r00*x1292))+(((-1.0)*x1292*x1301))+(((-1.0)*x1286*x1287))+(((-1.0)*x1285*x1299))+(((0.296296296296296)*x1293*x1295))+((x1289*x1292))), (((x1288*x1289))+(((-1.0)*cj6*x1284*x1291))+((cj1*x1286*x1298))+(((-1.0)*cj6*x1285*x1291))+((x1287*x1294))+(((-1.0)*r10*x1290*x1291))+(((-1.0)*sj2*x1296))+(((-1.0)*x1286*x1300))+((x1291*x1297))+((sj1*x1286*x1295))+(((-1.0)*r00*x1288*x1290))+(((-1.0)*x1288*x1301))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1303=IKcos(j3);
IkReal x1304=IKsin(j3);
IkReal x1305=(sj1*sj6);
IkReal x1306=(cj1*r00);
IkReal x1307=((0.16)*cj6);
IkReal x1308=(cj1*r01);
IkReal x1309=((0.02086)*cj6);
IkReal x1310=((0.54)*x1304);
IkReal x1311=((0.54)*x1303);
CheckValue<IkReal> x1312=IKPowWithIntegerCheck(cj6,-1);
if(!x1312.valid){
continue;
}
evalcond[0]=((((-1.0)*cj2*x1310))+((sj2*x1311))+(((-0.16)*r20*(x1312.value)*(sj6*sj6)))+(((-0.71)*cj2))+(((-1.0)*r20*x1307))+pz);
evalcond[1]=(((r11*sj1*x1309))+((sj2*x1310))+((x1306*x1307))+((x1308*x1309))+(((-0.16)*r11*x1305))+(((-1.0)*cj1*px))+((cj2*x1311))+(((-0.16)*sj6*x1308))+(((-1.0)*py*sj1))+(((0.71)*sj2))+((r10*sj1*x1307))+(((0.02086)*r10*x1305))+(((0.02086)*sj6*x1306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=-3.14159265;
IkReal x1313=r21*r21;
IkReal x1314=cj6*cj6;
IkReal x1315=(((x1313*x1314))+(((2.0)*cj6*r20*r21*sj6))+(((-1.0)*x1313))+(((-1.0)*x1314*(r20*r20)))+(((-1.0)*(r22*r22))));
j5eval[0]=x1315;
j5eval[1]=IKsign(x1315);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=-3.14159265;
IkReal x1316=((1.0)*cj1);
IkReal x1317=((1.0)*sj1);
IkReal x1318=((((-1.0)*cj6*r11*x1317))+(((-1.0)*cj6*r01*x1316))+(((-1.0)*r00*sj6*x1316))+(((-1.0)*r10*sj6*x1317)));
j5eval[0]=x1318;
j5eval[1]=IKsign(x1318);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=-3.14159265;
IkReal x1319=cj6*cj6;
IkReal x1320=(cj6*sj6);
IkReal x1321=(r00*sj1);
IkReal x1322=((1.0)*r21);
IkReal x1323=(cj1*r20);
IkReal x1324=(r01*sj1);
IkReal x1325=(cj1*r11);
IkReal x1326=(((cj1*r10*r21*x1320))+((r21*x1319*x1325))+((r20*x1319*x1321))+(((-1.0)*x1319*x1322*x1324))+(((-1.0)*x1322*x1325))+(((-1.0)*r20*x1320*x1324))+(((-1.0)*r10*x1319*x1323))+(((-1.0)*x1320*x1321*x1322))+(((-1.0)*cj1*r12*r22))+((r21*x1324))+((r11*x1320*x1323))+((r02*r22*sj1)));
j5eval[0]=x1326;
j5eval[1]=IKsign(x1326);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1327=cj6*cj6;
IkReal x1328=(r02*sj1);
IkReal x1329=(cj6*sj6);
IkReal x1330=(r21*sj1);
IkReal x1331=((1.0)*r00);
IkReal x1332=(cj1*r11);
IkReal x1333=(cj2*sj3);
IkReal x1334=(cj3*sj2);
IkReal x1335=(cj1*r12);
IkReal x1336=(cj6*sj1);
IkReal x1337=((1.0)*r01);
IkReal x1338=(sj1*sj6);
IkReal x1339=(r20*sj1);
IkReal x1340=(cj1*r10);
IkReal x1341=((1.0)*x1340);
CheckValue<IkReal> x1342=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1327*x1330*x1337))+(((-1.0)*r20*x1327*x1341))+(((-1.0)*r21*x1332))+((r01*x1330))+((r00*x1327*x1339))+((r22*x1328))+((r21*x1327*x1332))+(((-1.0)*r22*x1335))+((r20*x1329*x1332))+(((-1.0)*x1329*x1330*x1331))+((r21*x1329*x1340))+(((-1.0)*x1329*x1337*x1339)))),-1);
if(!x1342.valid){
continue;
}
CheckValue<IkReal> x1343 = IKatan2WithCheck(IkReal(((((-1.0)*x1333*x1335))+(((-1.0)*x1328*x1334))+((x1328*x1333))+((x1334*x1335)))),IkReal((((r01*x1334*x1338))+((cj6*x1334*x1340))+((sj6*x1332*x1333))+(((-1.0)*x1331*x1334*x1336))+((r00*x1333*x1336))+(((-1.0)*x1333*x1337*x1338))+(((-1.0)*sj6*x1332*x1334))+(((-1.0)*cj6*x1333*x1341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1343.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1342.value)))+(x1343.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1344=IKcos(j5);
IkReal x1345=IKsin(j5);
IkReal x1346=(sj2*sj3);
IkReal x1347=(cj2*cj3);
IkReal x1348=(cj1*r12);
IkReal x1349=(sj1*sj6);
IkReal x1350=(cj2*sj3);
IkReal x1351=(r21*sj6);
IkReal x1352=(cj6*sj1);
IkReal x1353=(r12*sj1);
IkReal x1354=(cj1*r02);
IkReal x1355=(cj1*cj6);
IkReal x1356=(r02*sj1);
IkReal x1357=(cj3*sj2);
IkReal x1358=(cj1*sj6);
IkReal x1359=(cj6*r20);
IkReal x1360=((1.0)*x1345);
IkReal x1361=(r11*x1345);
IkReal x1362=((1.0)*x1344);
IkReal x1363=(r01*x1358);
IkReal x1364=(r11*x1344);
IkReal x1365=(x1346+x1347);
evalcond[0]=(x1357+(((-1.0)*x1350))+((r22*x1345))+((x1344*x1359))+(((-1.0)*x1351*x1362)));
evalcond[1]=(x1365+((x1345*x1359))+(((-1.0)*r22*x1362))+(((-1.0)*x1351*x1360)));
evalcond[2]=(((x1345*x1356))+(((-1.0)*r01*x1349*x1362))+(((-1.0)*r10*x1355*x1362))+((x1358*x1364))+(((-1.0)*x1348*x1360))+((r00*x1344*x1352)));
evalcond[3]=((((-1.0)*r01*x1349*x1360))+(((-1.0)*r10*x1355*x1360))+((x1344*x1348))+((x1358*x1361))+((r00*x1345*x1352))+(((-1.0)*x1356*x1362)));
evalcond[4]=(x1350+(((-1.0)*x1357))+((x1345*x1363))+((x1344*x1353))+((x1344*x1354))+(((-1.0)*r10*x1352*x1360))+((x1349*x1361))+(((-1.0)*r00*x1355*x1360)));
evalcond[5]=(x1365+(((-1.0)*x1353*x1360))+((x1344*x1363))+(((-1.0)*x1354*x1360))+(((-1.0)*r10*x1352*x1362))+((x1349*x1364))+(((-1.0)*r00*x1355*x1362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1366=((1.0)*cj1);
IkReal x1367=(r11*sj6);
IkReal x1368=(cj2*sj3);
IkReal x1369=(r00*sj1);
IkReal x1370=(cj3*sj2);
IkReal x1371=(r02*sj1);
IkReal x1372=((1.0)*cj6);
IkReal x1373=(cj6*x1370);
IkReal x1374=((1.0)*sj1*sj6);
CheckValue<IkReal> x1375 = IKatan2WithCheck(IkReal((((cj1*x1367*x1370))+(((-1.0)*x1366*x1367*x1368))+(((-1.0)*r10*x1366*x1373))+((r01*sj1*sj6*x1368))+((x1369*x1373))+(((-1.0)*x1368*x1369*x1372))+(((-1.0)*r01*x1370*x1374))+((cj1*cj6*r10*x1368)))),IkReal(((((-1.0)*r12*x1366*x1368))+(((-1.0)*x1370*x1371))+((x1368*x1371))+((cj1*r12*x1370)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1374))+(((-1.0)*r11*sj1*x1372))+(((-1.0)*cj6*r01*x1366))+(((-1.0)*r00*sj6*x1366)))),-1);
if(!x1376.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1375.value)+(((1.5707963267949)*(x1376.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1377=IKcos(j5);
IkReal x1378=IKsin(j5);
IkReal x1379=(sj2*sj3);
IkReal x1380=(cj2*cj3);
IkReal x1381=(cj1*r12);
IkReal x1382=(sj1*sj6);
IkReal x1383=(cj2*sj3);
IkReal x1384=(r21*sj6);
IkReal x1385=(cj6*sj1);
IkReal x1386=(r12*sj1);
IkReal x1387=(cj1*r02);
IkReal x1388=(cj1*cj6);
IkReal x1389=(r02*sj1);
IkReal x1390=(cj3*sj2);
IkReal x1391=(cj1*sj6);
IkReal x1392=(cj6*r20);
IkReal x1393=((1.0)*x1378);
IkReal x1394=(r11*x1378);
IkReal x1395=((1.0)*x1377);
IkReal x1396=(r01*x1391);
IkReal x1397=(r11*x1377);
IkReal x1398=(x1379+x1380);
evalcond[0]=(x1390+(((-1.0)*x1384*x1395))+((r22*x1378))+((x1377*x1392))+(((-1.0)*x1383)));
evalcond[1]=(x1398+(((-1.0)*x1384*x1393))+(((-1.0)*r22*x1395))+((x1378*x1392)));
evalcond[2]=((((-1.0)*r01*x1382*x1395))+(((-1.0)*r10*x1388*x1395))+(((-1.0)*x1381*x1393))+((x1391*x1397))+((x1378*x1389))+((r00*x1377*x1385)));
evalcond[3]=((((-1.0)*x1389*x1395))+(((-1.0)*r01*x1382*x1393))+(((-1.0)*r10*x1388*x1393))+((x1377*x1381))+((x1391*x1394))+((r00*x1378*x1385)));
evalcond[4]=(((x1382*x1394))+x1383+(((-1.0)*r00*x1388*x1393))+(((-1.0)*r10*x1385*x1393))+((x1377*x1387))+((x1377*x1386))+(((-1.0)*x1390))+((x1378*x1396)));
evalcond[5]=(((x1382*x1397))+x1398+(((-1.0)*r00*x1388*x1395))+(((-1.0)*r10*x1385*x1395))+((x1377*x1396))+(((-1.0)*x1387*x1393))+(((-1.0)*x1386*x1393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1399=r21*r21;
IkReal x1400=cj6*cj6;
IkReal x1401=(sj2*sj3);
IkReal x1402=(cj6*r20);
IkReal x1403=(r21*sj6);
IkReal x1404=(cj2*sj3);
IkReal x1405=((1.0)*r22);
IkReal x1406=(cj3*sj2);
IkReal x1407=(cj2*cj3);
CheckValue<IkReal> x1408 = IKatan2WithCheck(IkReal(((((-1.0)*x1403*x1407))+(((-1.0)*x1404*x1405))+(((-1.0)*x1401*x1403))+((x1402*x1407))+((r22*x1406))+((x1401*x1402)))),IkReal(((((-1.0)*x1403*x1406))+(((-1.0)*x1405*x1407))+((x1403*x1404))+(((-1.0)*x1402*x1404))+(((-1.0)*x1401*x1405))+((x1402*x1406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1408.valid){
continue;
}
CheckValue<IkReal> x1409=IKPowWithIntegerCheck(IKsign(((((2.0)*x1402*x1403))+(((-1.0)*r22*x1405))+((x1399*x1400))+(((-1.0)*x1399))+(((-1.0)*x1400*(r20*r20))))),-1);
if(!x1409.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1408.value)+(((1.5707963267949)*(x1409.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1410=IKcos(j5);
IkReal x1411=IKsin(j5);
IkReal x1412=(sj2*sj3);
IkReal x1413=(cj2*cj3);
IkReal x1414=(cj1*r12);
IkReal x1415=(sj1*sj6);
IkReal x1416=(cj2*sj3);
IkReal x1417=(r21*sj6);
IkReal x1418=(cj6*sj1);
IkReal x1419=(r12*sj1);
IkReal x1420=(cj1*r02);
IkReal x1421=(cj1*cj6);
IkReal x1422=(r02*sj1);
IkReal x1423=(cj3*sj2);
IkReal x1424=(cj1*sj6);
IkReal x1425=(cj6*r20);
IkReal x1426=((1.0)*x1411);
IkReal x1427=(r11*x1411);
IkReal x1428=((1.0)*x1410);
IkReal x1429=(r01*x1424);
IkReal x1430=(r11*x1410);
IkReal x1431=(x1412+x1413);
evalcond[0]=(((x1410*x1425))+(((-1.0)*x1417*x1428))+((r22*x1411))+x1423+(((-1.0)*x1416)));
evalcond[1]=(((x1411*x1425))+(((-1.0)*x1417*x1426))+x1431+(((-1.0)*r22*x1428)));
evalcond[2]=((((-1.0)*r10*x1421*x1428))+((x1411*x1422))+((x1424*x1430))+(((-1.0)*r01*x1415*x1428))+(((-1.0)*x1414*x1426))+((r00*x1410*x1418)));
evalcond[3]=(((x1424*x1427))+(((-1.0)*r10*x1421*x1426))+(((-1.0)*x1422*x1428))+(((-1.0)*r01*x1415*x1426))+((x1410*x1414))+((r00*x1411*x1418)));
evalcond[4]=(((x1415*x1427))+((x1410*x1420))+((x1411*x1429))+(((-1.0)*x1423))+((x1410*x1419))+x1416+(((-1.0)*r10*x1418*x1426))+(((-1.0)*r00*x1421*x1426)));
evalcond[5]=(((x1410*x1429))+(((-1.0)*x1420*x1426))+(((-1.0)*x1419*x1426))+x1431+((x1415*x1430))+(((-1.0)*r10*x1418*x1428))+(((-1.0)*r00*x1421*x1428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1432=((1.0)*sj1);
CheckValue<IkReal> x1434 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1432))+((cj1*r12)))),IkReal(((((-1.0)*r01*sj6*x1432))+((cj6*r00*sj1))+(((-1.0)*cj1*cj6*r10))+((cj1*r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1434.valid){
continue;
}
IkReal x1433=x1434.value;
j5array[0]=((-1.0)*x1433);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1433)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1435=IKcos(j5);
IkReal x1436=IKsin(j5);
IkReal x1437=((1.0)*cj1);
IkReal x1438=(cj6*x1435);
IkReal x1439=(sj6*x1435);
evalcond[0]=((((-1.0)*r01*sj1*x1439))+((r00*sj1*x1438))+((r02*sj1*x1436))+((cj1*r11*x1439))+(((-1.0)*r10*x1437*x1438))+(((-1.0)*r12*x1436*x1437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1440=(r22*sj2);
IkReal x1441=((1.0)*sj5);
IkReal x1442=(cj6*r20);
IkReal x1443=(cj2*cj5);
IkReal x1444=(r21*sj6);
IkReal x1445=(cj5*sj2);
IkReal x1446=(cj2*sj5);
if( IKabs(((((-1.0)*x1443*x1444))+((r22*x1446))+((x1442*x1443))+(((-1.0)*sj2*x1441*x1442))+((sj2*sj5*x1444))+((cj5*x1440)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1444*x1446))+((x1444*x1445))+((r22*x1443))+(((-1.0)*x1442*x1445))+(((-1.0)*cj2*x1441*x1442))+(((-1.0)*x1440*x1441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1443*x1444))+((r22*x1446))+((x1442*x1443))+(((-1.0)*sj2*x1441*x1442))+((sj2*sj5*x1444))+((cj5*x1440))))+IKsqr((((x1444*x1446))+((x1444*x1445))+((r22*x1443))+(((-1.0)*x1442*x1445))+(((-1.0)*cj2*x1441*x1442))+(((-1.0)*x1440*x1441))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1443*x1444))+((r22*x1446))+((x1442*x1443))+(((-1.0)*sj2*x1441*x1442))+((sj2*sj5*x1444))+((cj5*x1440))), (((x1444*x1446))+((x1444*x1445))+((r22*x1443))+(((-1.0)*x1442*x1445))+(((-1.0)*cj2*x1441*x1442))+(((-1.0)*x1440*x1441))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1447=IKsin(j3);
IkReal x1448=IKcos(j3);
IkReal x1449=((0.16)*sj1);
IkReal x1450=(r11*sj6);
IkReal x1451=(cj6*r10);
IkReal x1452=(cj5*sj1);
IkReal x1453=((0.16)*r20);
IkReal x1454=((1.0)*cj5);
IkReal x1455=(cj1*sj6);
IkReal x1456=(cj1*r02);
IkReal x1457=((0.02086)*cj6);
IkReal x1458=(cj6*r20);
IkReal x1459=((1.0)*sj5);
IkReal x1460=(r21*sj6);
IkReal x1461=(sj2*x1447);
IkReal x1462=(cj2*x1448);
IkReal x1463=(cj2*x1447);
IkReal x1464=(sj2*x1448);
IkReal x1465=(cj1*cj6*r00);
IkReal x1466=(x1461+x1462);
evalcond[0]=(((cj5*x1458))+((r22*sj5))+(((-1.0)*x1454*x1460))+x1464+(((-1.0)*x1463)));
evalcond[1]=((((-1.0)*r22*x1454))+(((-1.0)*x1459*x1460))+((sj5*x1458))+x1466);
CheckValue<IkReal> x1467=IKPowWithIntegerCheck(cj6,-1);
if(!x1467.valid){
continue;
}
evalcond[2]=((((-0.71)*cj2))+(((-1.0)*cj6*x1453))+(((-0.54)*x1463))+pz+(((-1.0)*x1453*(x1467.value)*(sj6*sj6)))+(((0.54)*x1464)));
evalcond[3]=(((r01*sj5*x1455))+((cj5*x1456))+((sj1*sj5*x1450))+(((-1.0)*x1459*x1465))+(((-1.0)*sj1*x1451*x1459))+((r12*x1452))+x1463+(((-1.0)*x1464)));
evalcond[4]=(((cj5*r01*x1455))+((x1450*x1452))+(((-1.0)*x1454*x1465))+(((-1.0)*r12*sj1*x1459))+x1466+(((-1.0)*x1451*x1452))+(((-1.0)*x1456*x1459)));
evalcond[5]=((((-0.16)*r01*x1455))+(((0.16)*x1465))+(((-1.0)*cj1*px))+((r11*sj1*x1457))+(((0.02086)*r00*x1455))+(((0.02086)*r10*sj1*sj6))+(((-1.0)*py*sj1))+(((0.71)*sj2))+((cj1*r01*x1457))+((x1449*x1451))+(((-1.0)*x1449*x1450))+(((0.54)*x1461))+(((0.54)*x1462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1468=((1.0)*cj1);
CheckValue<IkReal> x1470 = IKatan2WithCheck(IkReal((((cj6*r00*sj1))+((cj1*r11*sj6))+(((-1.0)*cj6*r10*x1468))+(((-1.0)*r01*sj1*sj6)))),IkReal((((r02*sj1))+(((-1.0)*r12*x1468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1470.valid){
continue;
}
IkReal x1469=x1470.value;
j5array[0]=((-1.0)*x1469);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1469)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1471=IKsin(j5);
IkReal x1472=IKcos(j5);
IkReal x1473=(cj1*x1471);
IkReal x1474=(sj1*x1471);
evalcond[0]=((((-1.0)*cj6*r10*x1473))+(((-1.0)*r01*sj6*x1474))+((cj1*r12*x1472))+(((-1.0)*r02*sj1*x1472))+((r11*sj6*x1473))+((cj6*r00*x1474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1475=(r22*sj2);
IkReal x1476=((1.0)*sj5);
IkReal x1477=(cj6*r20);
IkReal x1478=(cj2*cj5);
IkReal x1479=(r21*sj6);
IkReal x1480=(cj5*sj2);
IkReal x1481=(cj2*sj5);
if( IKabs((((cj5*x1475))+(((-1.0)*sj2*x1476*x1477))+((sj2*sj5*x1479))+(((-1.0)*x1478*x1479))+((x1477*x1478))+((r22*x1481)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1478))+(((-1.0)*x1477*x1480))+(((-1.0)*x1475*x1476))+(((-1.0)*cj2*x1476*x1477))+((x1479*x1481))+((x1479*x1480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*x1475))+(((-1.0)*sj2*x1476*x1477))+((sj2*sj5*x1479))+(((-1.0)*x1478*x1479))+((x1477*x1478))+((r22*x1481))))+IKsqr((((r22*x1478))+(((-1.0)*x1477*x1480))+(((-1.0)*x1475*x1476))+(((-1.0)*cj2*x1476*x1477))+((x1479*x1481))+((x1479*x1480))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*x1475))+(((-1.0)*sj2*x1476*x1477))+((sj2*sj5*x1479))+(((-1.0)*x1478*x1479))+((x1477*x1478))+((r22*x1481))), (((r22*x1478))+(((-1.0)*x1477*x1480))+(((-1.0)*x1475*x1476))+(((-1.0)*cj2*x1476*x1477))+((x1479*x1481))+((x1479*x1480))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1482=IKsin(j3);
IkReal x1483=IKcos(j3);
IkReal x1484=((0.16)*sj1);
IkReal x1485=(r11*sj6);
IkReal x1486=(cj6*r10);
IkReal x1487=(cj5*sj1);
IkReal x1488=((0.16)*r20);
IkReal x1489=((1.0)*cj5);
IkReal x1490=(cj1*sj6);
IkReal x1491=(cj1*r02);
IkReal x1492=((0.02086)*cj6);
IkReal x1493=(cj6*r20);
IkReal x1494=((1.0)*sj5);
IkReal x1495=(r21*sj6);
IkReal x1496=(sj2*x1482);
IkReal x1497=(cj2*x1483);
IkReal x1498=(cj2*x1482);
IkReal x1499=(sj2*x1483);
IkReal x1500=(cj1*cj6*r00);
IkReal x1501=(x1496+x1497);
evalcond[0]=(((r22*sj5))+(((-1.0)*x1498))+((cj5*x1493))+x1499+(((-1.0)*x1489*x1495)));
evalcond[1]=(((sj5*x1493))+(((-1.0)*x1494*x1495))+x1501+(((-1.0)*r22*x1489)));
CheckValue<IkReal> x1502=IKPowWithIntegerCheck(cj6,-1);
if(!x1502.valid){
continue;
}
evalcond[2]=((((-1.0)*cj6*x1488))+(((-0.71)*cj2))+(((-0.54)*x1498))+pz+(((-1.0)*x1488*(x1502.value)*(sj6*sj6)))+(((0.54)*x1499)));
evalcond[3]=(((sj1*sj5*x1485))+((r12*x1487))+(((-1.0)*x1494*x1500))+(((-1.0)*x1499))+(((-1.0)*sj1*x1486*x1494))+((cj5*x1491))+x1498+((r01*sj5*x1490)));
evalcond[4]=((((-1.0)*x1486*x1487))+x1501+(((-1.0)*x1491*x1494))+((x1485*x1487))+(((-1.0)*x1489*x1500))+(((-1.0)*r12*sj1*x1494))+((cj5*r01*x1490)));
evalcond[5]=(((cj1*r01*x1492))+(((-1.0)*x1484*x1485))+(((-1.0)*cj1*px))+(((0.02086)*r00*x1490))+(((-0.16)*r01*x1490))+((x1484*x1486))+(((0.02086)*r10*sj1*sj6))+(((-1.0)*py*sj1))+(((0.71)*sj2))+((r11*sj1*x1492))+(((0.54)*x1496))+(((0.54)*x1497))+(((0.16)*x1500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1503=cj1*cj1;
IkReal x1504=cj6*cj6;
IkReal x1505=r01*r01;
IkReal x1506=r02*r02;
IkReal x1507=r11*r11;
IkReal x1508=r00*r00;
IkReal x1509=(cj1*r10);
IkReal x1510=((1.0)*sj4);
IkReal x1511=((2.0)*sj1);
IkReal x1512=(cj6*sj6);
IkReal x1513=(cj1*r12);
IkReal x1514=(cj1*r11);
IkReal x1515=(r00*r01);
IkReal x1516=((2.0)*x1503);
IkReal x1517=((1.0)*x1504);
IkReal x1518=(r01*x1514);
IkReal x1519=(x1503*x1507);
IkReal x1520=(x1503*x1505);
CheckValue<IkReal> x1521 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj1*sj6*x1510))+(((-1.0)*cj6*x1509*x1510))+((cj6*r00*sj1*sj4))+((sj4*sj6*x1514)))),IkReal(((((-1.0)*r02*sj1*x1510))+((sj4*x1513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1521.valid){
continue;
}
CheckValue<IkReal> x1522=IKPowWithIntegerCheck(IKsign((((r02*x1511*x1513))+(((-1.0)*x1505))+(((-1.0)*x1506))+(((-1.0)*x1519))+(((2.0)*x1512*x1515))+((x1504*x1519))+(((-1.0)*x1503*(r12*r12)))+((x1504*x1505))+(((-1.0)*x1504*x1511*x1518))+((r10*r11*x1512*x1516))+x1520+(((-1.0)*x1512*x1515*x1516))+((x1503*x1504*x1508))+((r00*x1504*x1509*x1511))+(((-1.0)*r01*x1509*x1511*x1512))+(((-1.0)*x1517*x1520))+((x1503*x1506))+(((-1.0)*x1503*x1517*(r10*r10)))+(((-1.0)*r00*x1511*x1512*x1514))+(((-1.0)*x1508*x1517))+((x1511*x1518)))),-1);
if(!x1522.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1521.value)+(((1.5707963267949)*(x1522.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1523=IKcos(j5);
IkReal x1524=IKsin(j5);
IkReal x1525=(r11*sj6);
IkReal x1526=(cj6*r10);
IkReal x1527=(cj6*r00);
IkReal x1528=(cj1*x1524);
IkReal x1529=((1.0)*x1523);
IkReal x1530=(r01*sj1*sj6);
IkReal x1531=(sj1*x1524);
IkReal x1532=(cj1*x1523);
evalcond[0]=((((-1.0)*x1529*x1530))+((x1525*x1532))+(((-1.0)*cj1*x1526*x1529))+((r02*x1531))+((sj1*x1523*x1527))+(((-1.0)*r12*x1528)));
evalcond[1]=(((r12*x1532))+((x1525*x1528))+sj4+(((-1.0)*r02*sj1*x1529))+(((-1.0)*x1524*x1530))+((x1527*x1531))+(((-1.0)*x1526*x1528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
IkReal x1533=(cj2*r21);
IkReal x1534=(r20*sj6);
IkReal x1535=(r21*sj2);
IkReal x1536=((1.0)*sj2);
IkReal x1537=(cj5*sj4*sj6);
IkReal x1538=(r22*sj4*sj5);
IkReal x1539=(cj5*cj6*r20*sj4);
j3eval[0]=sj4;
j3eval[1]=((IKabs(((((-1.0)*x1533*x1537))+((sj2*x1534))+((cj6*x1535))+((cj2*x1539))+((cj2*x1538)))))+(IKabs((((cj6*x1533))+((cj2*x1534))+((x1535*x1537))+(((-1.0)*x1536*x1539))+(((-1.0)*x1536*x1538))))));
j3eval[2]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1540=((1.0)*sj2);
IkReal x1541=(r22*sj5);
IkReal x1542=(sj2*sj6);
IkReal x1543=(cj2*cj6);
IkReal x1544=(cj5*r20);
IkReal x1545=(cj5*r21);
IkReal x1546=(cj2*sj6);
if( IKabs((((cj2*x1541))+((cj6*r21*sj2))+((x1543*x1544))+(((-1.0)*x1545*x1546))+((r20*x1542)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1540*x1541))+(((-1.0)*cj6*x1540*x1544))+((r21*x1543))+((x1542*x1545))+((r20*x1546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*x1541))+((cj6*r21*sj2))+((x1543*x1544))+(((-1.0)*x1545*x1546))+((r20*x1542))))+IKsqr(((((-1.0)*x1540*x1541))+(((-1.0)*cj6*x1540*x1544))+((r21*x1543))+((x1542*x1545))+((r20*x1546))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj2*x1541))+((cj6*r21*sj2))+((x1543*x1544))+(((-1.0)*x1545*x1546))+((r20*x1542))), ((((-1.0)*x1540*x1541))+(((-1.0)*cj6*x1540*x1544))+((r21*x1543))+((x1542*x1545))+((r20*x1546))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1547=IKcos(j3);
IkReal x1548=IKsin(j3);
IkReal x1549=((0.16)*sj6);
IkReal x1550=(r11*sj1);
IkReal x1551=((1.0)*cj5);
IkReal x1552=(cj1*cj6);
IkReal x1553=(cj5*sj6);
IkReal x1554=((1.0)*sj1);
IkReal x1555=((0.02086)*sj6);
IkReal x1556=(cj1*r00);
IkReal x1557=((0.02086)*cj6);
IkReal x1558=(cj1*r01);
IkReal x1559=(cj6*r20);
IkReal x1560=((1.0)*cj1);
IkReal x1561=(sj2*x1547);
IkReal x1562=(cj6*r10*sj1);
IkReal x1563=(sj2*x1548);
IkReal x1564=(cj2*x1548);
IkReal x1565=(cj2*x1547);
IkReal x1566=((1.0)*x1564);
evalcond[0]=(((cj6*r21))+((r20*sj6))+(((-1.0)*x1563))+(((-1.0)*x1565)));
evalcond[1]=((((-1.0)*r21*sj6*x1551))+((r22*sj5))+x1561+(((-1.0)*x1566))+((cj5*x1559)));
evalcond[2]=((((-1.0)*cj6*x1550))+(((-1.0)*sj6*x1556))+x1561+(((-1.0)*x1566))+(((-1.0)*r10*sj6*x1554))+(((-1.0)*r01*x1552)));
evalcond[3]=((((-1.0)*r02*sj5*x1560))+((x1553*x1558))+((x1550*x1553))+(((-1.0)*r12*sj5*x1554))+x1563+x1565+(((-1.0)*x1551*x1562))+(((-1.0)*r00*x1551*x1552)));
evalcond[4]=((((0.54)*x1561))+(((-0.15)*x1563))+(((-0.15)*x1565))+(((-0.71)*cj2))+(((-0.54)*x1564))+(((-0.16)*x1559))+((r21*x1549))+pz+(((-1.0)*r20*x1555))+(((-1.0)*r21*x1557)));
evalcond[5]=((((0.54)*x1563))+(((0.54)*x1565))+(((-0.15)*x1564))+((x1555*x1556))+(((0.16)*r00*x1552))+(((-1.0)*x1549*x1558))+(((-1.0)*x1549*x1550))+(((0.16)*x1562))+(((-1.0)*py*x1554))+((x1550*x1557))+(((0.15)*x1561))+((r10*sj1*x1555))+(((-1.0)*px*x1560))+(((0.71)*sj2))+(((0.02086)*r01*x1552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1567=((1.0)*r21);
IkReal x1568=(cj6*sj2);
IkReal x1569=(cj2*cj5);
IkReal x1570=(sj2*sj6);
IkReal x1571=(r22*sj5);
IkReal x1572=((1.0)*r20);
if( IKabs(((((-1.0)*sj6*x1567*x1569))+(((-1.0)*x1570*x1572))+(((-1.0)*x1567*x1568))+((cj2*x1571))+((cj6*r20*x1569)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj2*x1571))+(((-1.0)*cj5*x1568*x1572))+(((-1.0)*cj2*sj6*x1572))+((cj5*r21*x1570))+(((-1.0)*cj2*cj6*x1567)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj6*x1567*x1569))+(((-1.0)*x1570*x1572))+(((-1.0)*x1567*x1568))+((cj2*x1571))+((cj6*r20*x1569))))+IKsqr(((((-1.0)*sj2*x1571))+(((-1.0)*cj5*x1568*x1572))+(((-1.0)*cj2*sj6*x1572))+((cj5*r21*x1570))+(((-1.0)*cj2*cj6*x1567))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj6*x1567*x1569))+(((-1.0)*x1570*x1572))+(((-1.0)*x1567*x1568))+((cj2*x1571))+((cj6*r20*x1569))), ((((-1.0)*sj2*x1571))+(((-1.0)*cj5*x1568*x1572))+(((-1.0)*cj2*sj6*x1572))+((cj5*r21*x1570))+(((-1.0)*cj2*cj6*x1567))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1573=IKcos(j3);
IkReal x1574=IKsin(j3);
IkReal x1575=((0.16)*sj6);
IkReal x1576=(r11*sj1);
IkReal x1577=((1.0)*cj5);
IkReal x1578=(cj1*cj6);
IkReal x1579=(cj5*sj6);
IkReal x1580=((1.0)*sj1);
IkReal x1581=((0.02086)*sj6);
IkReal x1582=(cj1*r00);
IkReal x1583=((0.02086)*cj6);
IkReal x1584=(cj1*r01);
IkReal x1585=(cj6*r20);
IkReal x1586=((1.0)*cj1);
IkReal x1587=(sj2*x1574);
IkReal x1588=(cj2*x1573);
IkReal x1589=(cj6*r10*sj1);
IkReal x1590=(cj2*x1574);
IkReal x1591=((0.15)*x1573);
IkReal x1592=(sj2*x1573);
IkReal x1593=(x1588+x1587);
evalcond[0]=(x1593+((cj6*r21))+((r20*sj6)));
evalcond[1]=(((r22*sj5))+x1592+(((-1.0)*r21*sj6*x1577))+(((-1.0)*x1590))+((cj5*x1585)));
evalcond[2]=((((-1.0)*cj6*x1576))+(((-1.0)*r01*x1578))+(((-1.0)*r10*sj6*x1580))+(((-1.0)*sj6*x1582))+x1590+(((-1.0)*x1592)));
evalcond[3]=(((x1576*x1579))+(((-1.0)*r00*x1577*x1578))+(((-1.0)*x1577*x1589))+x1593+(((-1.0)*r12*sj5*x1580))+(((-1.0)*r02*sj5*x1586))+((x1579*x1584)));
evalcond[4]=((((0.54)*x1592))+(((0.15)*x1588))+(((0.15)*x1587))+(((-0.71)*cj2))+(((-0.54)*x1590))+(((-0.16)*x1585))+((r21*x1575))+pz+(((-1.0)*r20*x1581))+(((-1.0)*r21*x1583)));
evalcond[5]=((((0.54)*x1588))+(((0.54)*x1587))+(((0.02086)*r01*x1578))+(((0.16)*r00*x1578))+(((0.16)*x1589))+(((-1.0)*py*x1580))+(((-1.0)*x1575*x1576))+((r10*sj1*x1581))+(((0.15)*x1590))+((x1576*x1583))+(((0.71)*sj2))+(((-1.0)*sj2*x1591))+(((-1.0)*px*x1586))+((x1581*x1582))+(((-1.0)*x1575*x1584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1594=((1.0)*r22);
IkReal x1595=(sj2*sj5);
IkReal x1596=(cj2*cj5);
IkReal x1597=(r21*sj6);
IkReal x1598=(cj6*r20);
IkReal x1599=(cj5*sj2);
IkReal x1600=(cj2*sj5);
if( IKabs((((x1596*x1598))+(((-1.0)*x1594*x1599))+((r22*x1600))+((x1595*x1598))+(((-1.0)*x1595*x1597))+(((-1.0)*x1596*x1597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1594*x1595))+(((-1.0)*x1594*x1596))+((x1598*x1600))+(((-1.0)*x1598*x1599))+((x1597*x1599))+(((-1.0)*x1597*x1600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1596*x1598))+(((-1.0)*x1594*x1599))+((r22*x1600))+((x1595*x1598))+(((-1.0)*x1595*x1597))+(((-1.0)*x1596*x1597))))+IKsqr(((((-1.0)*x1594*x1595))+(((-1.0)*x1594*x1596))+((x1598*x1600))+(((-1.0)*x1598*x1599))+((x1597*x1599))+(((-1.0)*x1597*x1600))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x1596*x1598))+(((-1.0)*x1594*x1599))+((r22*x1600))+((x1595*x1598))+(((-1.0)*x1595*x1597))+(((-1.0)*x1596*x1597))), ((((-1.0)*x1594*x1595))+(((-1.0)*x1594*x1596))+((x1598*x1600))+(((-1.0)*x1598*x1599))+((x1597*x1599))+(((-1.0)*x1597*x1600))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1601=IKcos(j3);
IkReal x1602=IKsin(j3);
IkReal x1603=((0.16)*sj1);
IkReal x1604=(r11*sj6);
IkReal x1605=(cj6*r10);
IkReal x1606=(cj5*sj1);
IkReal x1607=((0.16)*r20);
IkReal x1608=(cj1*sj6);
IkReal x1609=((1.0)*cj5);
IkReal x1610=(cj1*r02);
IkReal x1611=((0.02086)*cj6);
IkReal x1612=(cj6*r20);
IkReal x1613=((1.0)*sj5);
IkReal x1614=(r21*sj6);
IkReal x1615=(sj2*x1601);
IkReal x1616=(cj2*x1602);
IkReal x1617=(cj2*x1601);
IkReal x1618=(sj2*x1602);
IkReal x1619=(cj1*cj6*r00);
IkReal x1620=((1.0)*x1616);
evalcond[0]=(x1615+((r22*sj5))+(((-1.0)*x1620))+((cj5*x1612))+(((-1.0)*x1609*x1614)));
evalcond[1]=(((sj5*x1612))+(((-1.0)*x1617))+(((-1.0)*x1618))+(((-1.0)*r22*x1609))+(((-1.0)*x1613*x1614)));
CheckValue<IkReal> x1621=IKPowWithIntegerCheck(cj6,-1);
if(!x1621.valid){
continue;
}
evalcond[2]=((((-0.71)*cj2))+(((-0.54)*x1616))+(((0.54)*x1615))+pz+(((-1.0)*x1607*(x1621.value)*(sj6*sj6)))+(((-1.0)*cj6*x1607)));
evalcond[3]=(((r01*sj5*x1608))+x1615+(((-1.0)*x1620))+((cj5*x1610))+((r12*x1606))+((sj1*sj5*x1604))+(((-1.0)*x1613*x1619))+(((-1.0)*sj1*x1605*x1613)));
evalcond[4]=((((-1.0)*r12*sj1*x1613))+x1618+x1617+(((-1.0)*x1610*x1613))+(((-1.0)*x1605*x1606))+(((-1.0)*x1609*x1619))+((cj5*r01*x1608))+((x1604*x1606)));
evalcond[5]=(((r11*sj1*x1611))+((cj1*r01*x1611))+(((0.54)*x1617))+(((0.54)*x1618))+(((-1.0)*cj1*px))+(((0.02086)*r00*x1608))+(((0.02086)*r10*sj1*sj6))+((x1603*x1605))+(((-1.0)*py*sj1))+(((0.71)*sj2))+(((-1.0)*x1603*x1604))+(((-0.16)*r01*x1608))+(((0.16)*x1619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1622=(r22*sj2);
IkReal x1623=((1.0)*sj5);
IkReal x1624=(cj6*r20);
IkReal x1625=(cj2*cj5);
IkReal x1626=(r21*sj6);
IkReal x1627=(cj5*sj2);
IkReal x1628=(cj2*sj5);
if( IKabs(((((-1.0)*sj2*x1623*x1624))+((sj2*sj5*x1626))+((cj5*x1622))+(((-1.0)*x1625*x1626))+((r22*x1628))+((x1624*x1625)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1626*x1628))+((x1626*x1627))+(((-1.0)*x1624*x1627))+(((-1.0)*x1622*x1623))+((r22*x1625))+(((-1.0)*cj2*x1623*x1624)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj2*x1623*x1624))+((sj2*sj5*x1626))+((cj5*x1622))+(((-1.0)*x1625*x1626))+((r22*x1628))+((x1624*x1625))))+IKsqr((((x1626*x1628))+((x1626*x1627))+(((-1.0)*x1624*x1627))+(((-1.0)*x1622*x1623))+((r22*x1625))+(((-1.0)*cj2*x1623*x1624))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj2*x1623*x1624))+((sj2*sj5*x1626))+((cj5*x1622))+(((-1.0)*x1625*x1626))+((r22*x1628))+((x1624*x1625))), (((x1626*x1628))+((x1626*x1627))+(((-1.0)*x1624*x1627))+(((-1.0)*x1622*x1623))+((r22*x1625))+(((-1.0)*cj2*x1623*x1624))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1629=IKsin(j3);
IkReal x1630=IKcos(j3);
IkReal x1631=((0.16)*sj1);
IkReal x1632=(r11*sj6);
IkReal x1633=(cj6*r10);
IkReal x1634=(cj5*sj1);
IkReal x1635=((0.16)*r20);
IkReal x1636=((1.0)*cj5);
IkReal x1637=(cj1*sj6);
IkReal x1638=(cj1*r02);
IkReal x1639=((0.02086)*cj6);
IkReal x1640=(cj6*r20);
IkReal x1641=((1.0)*sj5);
IkReal x1642=(r21*sj6);
IkReal x1643=(sj2*x1629);
IkReal x1644=(cj2*x1630);
IkReal x1645=(cj2*x1629);
IkReal x1646=(sj2*x1630);
IkReal x1647=(cj1*cj6*r00);
IkReal x1648=(x1644+x1643);
evalcond[0]=(x1646+((r22*sj5))+(((-1.0)*x1645))+(((-1.0)*x1636*x1642))+((cj5*x1640)));
evalcond[1]=((((-1.0)*r22*x1636))+(((-1.0)*x1641*x1642))+x1648+((sj5*x1640)));
CheckValue<IkReal> x1649=IKPowWithIntegerCheck(cj6,-1);
if(!x1649.valid){
continue;
}
evalcond[2]=((((0.54)*x1646))+(((-0.71)*cj2))+pz+(((-1.0)*x1635*(x1649.value)*(sj6*sj6)))+(((-1.0)*cj6*x1635))+(((-0.54)*x1645)));
evalcond[3]=((((-1.0)*x1641*x1647))+(((-1.0)*sj1*x1633*x1641))+x1645+((r12*x1634))+(((-1.0)*x1646))+((sj1*sj5*x1632))+((r01*sj5*x1637))+((cj5*x1638)));
evalcond[4]=(((cj5*r01*x1637))+x1648+(((-1.0)*x1638*x1641))+(((-1.0)*x1633*x1634))+((x1632*x1634))+(((-1.0)*x1636*x1647))+(((-1.0)*r12*sj1*x1641)));
evalcond[5]=((((0.54)*x1643))+(((0.54)*x1644))+(((-0.16)*r01*x1637))+(((-1.0)*cj1*px))+(((0.16)*x1647))+((r11*sj1*x1639))+(((0.02086)*r10*sj1*sj6))+(((-1.0)*py*sj1))+(((0.71)*sj2))+(((-1.0)*x1631*x1632))+((x1631*x1633))+(((0.02086)*r00*x1637))+((cj1*r01*x1639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1650=((1.0)*sj2);
IkReal x1651=(r21*sj6);
IkReal x1652=(cj2*sj5);
IkReal x1653=(cj6*r20);
IkReal x1654=(cj4*r22*sj5);
IkReal x1655=((1.0)*cj2*cj5);
IkReal x1656=(cj4*cj5*x1653);
CheckValue<IkReal> x1657=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1657.valid){
continue;
}
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x1651*x1655))+((cj4*r22*x1652))+((cj2*x1656))+(((-1.0)*sj5*x1650*x1651))+((sj2*sj5*x1653))+(((-1.0)*cj5*r22*x1650)))),IkReal(((((-1.0)*x1651*x1652))+(((-1.0)*r22*x1655))+(((-1.0)*x1650*x1656))+(((-1.0)*x1650*x1654))+((cj4*cj5*sj2*x1651))+((x1652*x1653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1657.value)))+(x1658.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1659=IKcos(j3);
IkReal x1660=IKsin(j3);
IkReal x1661=((0.16)*sj6);
IkReal x1662=(r11*sj1);
IkReal x1663=((1.0)*cj5);
IkReal x1664=(sj2*sj4);
IkReal x1665=(r12*sj1);
IkReal x1666=(cj1*cj6);
IkReal x1667=(cj5*sj6);
IkReal x1668=((1.0)*sj1);
IkReal x1669=((0.02086)*sj6);
IkReal x1670=(cj1*r00);
IkReal x1671=((0.02086)*cj6);
IkReal x1672=(cj1*r01);
IkReal x1673=(cj1*r02);
IkReal x1674=(cj6*r20);
IkReal x1675=(cj2*sj4);
IkReal x1676=((1.0)*sj5);
IkReal x1677=(r21*sj6);
IkReal x1678=(sj5*sj6);
IkReal x1679=(cj6*r10*sj1);
IkReal x1680=(cj2*x1660);
IkReal x1681=((1.0)*x1660);
IkReal x1682=(sj2*x1659);
IkReal x1683=((0.15)*x1659);
IkReal x1684=(sj2*x1660);
IkReal x1685=((1.0)*x1659);
IkReal x1686=(cj2*x1659);
evalcond[0]=((((-1.0)*x1675*x1685))+(((-1.0)*x1664*x1681))+((cj6*r21))+((r20*sj6)));
evalcond[1]=((((-1.0)*x1663*x1677))+x1682+((r22*sj5))+(((-1.0)*x1680))+((cj5*x1674)));
evalcond[2]=((((-1.0)*r22*x1663))+(((-1.0)*cj4*sj2*x1681))+((sj5*x1674))+(((-1.0)*cj2*cj4*x1685))+(((-1.0)*x1676*x1677)));
evalcond[3]=((((-1.0)*cj6*x1662))+(((-1.0)*r10*sj6*x1668))+(((-1.0)*x1675*x1681))+(((-1.0)*sj6*x1670))+(((-1.0)*r01*x1666))+((x1659*x1664)));
evalcond[4]=((((-1.0)*x1673*x1676))+(((-1.0)*x1663*x1679))+x1684+x1686+((x1667*x1672))+((x1662*x1667))+(((-1.0)*r00*x1663*x1666))+(((-1.0)*x1665*x1676)));
evalcond[5]=(((cj5*x1665))+((cj4*x1682))+(((-1.0)*cj4*x1680))+((x1662*x1678))+(((-1.0)*r00*x1666*x1676))+((cj5*x1673))+((x1672*x1678))+(((-1.0)*cj6*r10*sj5*x1668)));
evalcond[6]=((((-0.16)*x1674))+(((-1.0)*x1675*x1683))+(((-0.71)*cj2))+(((-1.0)*r20*x1669))+(((-0.54)*x1680))+(((-0.15)*x1660*x1664))+pz+(((0.54)*x1682))+(((-1.0)*r21*x1671))+((r21*x1661)));
evalcond[7]=(((r10*sj1*x1669))+(((0.16)*x1679))+(((-1.0)*py*x1668))+(((-1.0)*x1661*x1662))+(((0.16)*r00*x1666))+((x1669*x1670))+(((-1.0)*cj1*px))+(((-1.0)*x1661*x1672))+((x1662*x1671))+(((0.54)*x1684))+(((0.54)*x1686))+(((-0.15)*x1660*x1675))+(((0.71)*sj2))+((x1664*x1683))+(((0.02086)*r01*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1687=(r10*sj6);
IkReal x1688=(sj2*sj6);
IkReal x1689=(cj6*r11);
IkReal x1690=((1.0)*cj2);
IkReal x1691=(cj1*r00);
IkReal x1692=(sj1*sj2);
IkReal x1693=(cj6*r21);
IkReal x1694=(sj1*x1690);
IkReal x1695=(cj1*cj6*r01);
CheckValue<IkReal> x1696 = IKatan2WithCheck(IkReal((((sj2*x1693))+(((-1.0)*x1687*x1694))+(((-1.0)*x1690*x1695))+(((-1.0)*sj6*x1690*x1691))+(((-1.0)*x1689*x1694))+((r20*x1688)))),IkReal((((sj2*x1695))+((x1689*x1692))+((cj2*r20*sj6))+((x1688*x1691))+((x1687*x1692))+((cj2*x1693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1696.valid){
continue;
}
CheckValue<IkReal> x1697=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1697.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1696.value)+(((1.5707963267949)*(x1697.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1698=IKcos(j3);
IkReal x1699=IKsin(j3);
IkReal x1700=((0.16)*sj6);
IkReal x1701=(r11*sj1);
IkReal x1702=((1.0)*cj5);
IkReal x1703=(sj2*sj4);
IkReal x1704=(r12*sj1);
IkReal x1705=(cj1*cj6);
IkReal x1706=(cj5*sj6);
IkReal x1707=((1.0)*sj1);
IkReal x1708=((0.02086)*sj6);
IkReal x1709=(cj1*r00);
IkReal x1710=((0.02086)*cj6);
IkReal x1711=(cj1*r01);
IkReal x1712=(cj1*r02);
IkReal x1713=(cj6*r20);
IkReal x1714=(cj2*sj4);
IkReal x1715=((1.0)*sj5);
IkReal x1716=(r21*sj6);
IkReal x1717=(sj5*sj6);
IkReal x1718=(cj6*r10*sj1);
IkReal x1719=(cj2*x1699);
IkReal x1720=((1.0)*x1699);
IkReal x1721=(sj2*x1698);
IkReal x1722=((0.15)*x1698);
IkReal x1723=(sj2*x1699);
IkReal x1724=((1.0)*x1698);
IkReal x1725=(cj2*x1698);
evalcond[0]=((((-1.0)*x1703*x1720))+(((-1.0)*x1714*x1724))+((cj6*r21))+((r20*sj6)));
evalcond[1]=(x1721+((r22*sj5))+((cj5*x1713))+(((-1.0)*x1719))+(((-1.0)*x1702*x1716)));
evalcond[2]=((((-1.0)*cj4*sj2*x1720))+(((-1.0)*cj2*cj4*x1724))+((sj5*x1713))+(((-1.0)*x1715*x1716))+(((-1.0)*r22*x1702)));
evalcond[3]=((((-1.0)*r10*sj6*x1707))+(((-1.0)*r01*x1705))+(((-1.0)*cj6*x1701))+(((-1.0)*x1714*x1720))+(((-1.0)*sj6*x1709))+((x1698*x1703)));
evalcond[4]=((((-1.0)*x1712*x1715))+x1725+x1723+((x1701*x1706))+(((-1.0)*r00*x1702*x1705))+((x1706*x1711))+(((-1.0)*x1704*x1715))+(((-1.0)*x1702*x1718)));
evalcond[5]=(((cj5*x1712))+((cj5*x1704))+(((-1.0)*cj4*x1719))+((x1711*x1717))+((cj4*x1721))+((x1701*x1717))+(((-1.0)*r00*x1705*x1715))+(((-1.0)*cj6*r10*sj5*x1707)));
evalcond[6]=((((-0.71)*cj2))+(((0.54)*x1721))+(((-0.15)*x1699*x1703))+(((-1.0)*r20*x1708))+(((-1.0)*r21*x1710))+(((-0.16)*x1713))+((r21*x1700))+pz+(((-1.0)*x1714*x1722))+(((-0.54)*x1719)));
evalcond[7]=((((0.16)*x1718))+(((-1.0)*py*x1707))+(((0.16)*r00*x1705))+(((0.54)*x1725))+(((0.54)*x1723))+(((0.02086)*r01*x1705))+(((-1.0)*cj1*px))+((r10*sj1*x1708))+(((-0.15)*x1699*x1714))+(((-1.0)*x1700*x1711))+((x1703*x1722))+(((-1.0)*x1700*x1701))+(((0.71)*sj2))+((x1701*x1710))+((x1708*x1709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1726=(cj2*r21);
IkReal x1727=(r20*sj6);
IkReal x1728=(r21*sj2);
IkReal x1729=((1.0)*sj2);
IkReal x1730=(cj5*sj4*sj6);
IkReal x1731=(r22*sj4*sj5);
IkReal x1732=(cj5*cj6*r20*sj4);
CheckValue<IkReal> x1733 = IKatan2WithCheck(IkReal((((cj2*x1732))+((cj2*x1731))+((cj6*x1728))+(((-1.0)*x1726*x1730))+((sj2*x1727)))),IkReal((((x1728*x1730))+((cj2*x1727))+(((-1.0)*x1729*x1732))+(((-1.0)*x1729*x1731))+((cj6*x1726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1733.valid){
continue;
}
CheckValue<IkReal> x1734=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1734.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1733.value)+(((1.5707963267949)*(x1734.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1735=IKcos(j3);
IkReal x1736=IKsin(j3);
IkReal x1737=((0.16)*sj6);
IkReal x1738=(r11*sj1);
IkReal x1739=((1.0)*cj5);
IkReal x1740=(sj2*sj4);
IkReal x1741=(r12*sj1);
IkReal x1742=(cj1*cj6);
IkReal x1743=(cj5*sj6);
IkReal x1744=((1.0)*sj1);
IkReal x1745=((0.02086)*sj6);
IkReal x1746=(cj1*r00);
IkReal x1747=((0.02086)*cj6);
IkReal x1748=(cj1*r01);
IkReal x1749=(cj1*r02);
IkReal x1750=(cj6*r20);
IkReal x1751=(cj2*sj4);
IkReal x1752=((1.0)*sj5);
IkReal x1753=(r21*sj6);
IkReal x1754=(sj5*sj6);
IkReal x1755=(cj6*r10*sj1);
IkReal x1756=(cj2*x1736);
IkReal x1757=((1.0)*x1736);
IkReal x1758=(sj2*x1735);
IkReal x1759=((0.15)*x1735);
IkReal x1760=(sj2*x1736);
IkReal x1761=((1.0)*x1735);
IkReal x1762=(cj2*x1735);
evalcond[0]=((((-1.0)*x1740*x1757))+((cj6*r21))+((r20*sj6))+(((-1.0)*x1751*x1761)));
evalcond[1]=(((cj5*x1750))+x1758+((r22*sj5))+(((-1.0)*x1739*x1753))+(((-1.0)*x1756)));
evalcond[2]=((((-1.0)*cj4*sj2*x1757))+(((-1.0)*x1752*x1753))+(((-1.0)*cj2*cj4*x1761))+((sj5*x1750))+(((-1.0)*r22*x1739)));
evalcond[3]=((((-1.0)*cj6*x1738))+(((-1.0)*r10*sj6*x1744))+(((-1.0)*r01*x1742))+(((-1.0)*x1751*x1757))+((x1735*x1740))+(((-1.0)*sj6*x1746)));
evalcond[4]=(x1762+x1760+(((-1.0)*x1749*x1752))+(((-1.0)*x1739*x1755))+(((-1.0)*r00*x1739*x1742))+((x1743*x1748))+((x1738*x1743))+(((-1.0)*x1741*x1752)));
evalcond[5]=((((-1.0)*r00*x1742*x1752))+(((-1.0)*cj4*x1756))+(((-1.0)*cj6*r10*sj5*x1744))+((x1748*x1754))+((x1738*x1754))+((cj4*x1758))+((cj5*x1741))+((cj5*x1749)));
evalcond[6]=((((-0.15)*x1736*x1740))+(((-0.54)*x1756))+(((-0.71)*cj2))+((r21*x1737))+(((-0.16)*x1750))+(((0.54)*x1758))+(((-1.0)*x1751*x1759))+pz+(((-1.0)*r20*x1745))+(((-1.0)*r21*x1747)));
evalcond[7]=((((0.54)*x1760))+(((0.54)*x1762))+(((-0.15)*x1736*x1751))+(((0.16)*r00*x1742))+((r10*sj1*x1745))+((x1745*x1746))+(((0.02086)*r01*x1742))+(((-1.0)*cj1*px))+(((-1.0)*x1737*x1738))+(((-1.0)*x1737*x1748))+(((-1.0)*py*x1744))+(((0.16)*x1755))+(((0.71)*sj2))+((x1738*x1747))+((x1740*x1759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1763=((0.02086)*r21);
IkReal x1764=(r11*sj1);
IkReal x1765=((0.54)*sj2);
IkReal x1766=(cj1*r01);
IkReal x1767=(cj2*sj6);
IkReal x1768=(cj1*r00);
IkReal x1769=(sj2*sj4);
IkReal x1770=((0.02086)*r20);
IkReal x1771=((0.16)*r21);
IkReal x1772=(r10*sj1);
IkReal x1773=((1.0)*pz);
IkReal x1774=((0.15)*sj6);
IkReal x1775=((0.16)*r20);
IkReal x1776=((0.15)*sj4);
IkReal x1777=(cj6*x1769);
IkReal x1778=((0.54)*cj2*cj6);
IkReal x1779=(cj2*cj6*sj4);
IkReal x1780=(cj2*cj6*x1776);
CheckValue<IkReal> x1781 = IKatan2WithCheck(IkReal((((x1763*x1777))+((x1767*x1772*x1776))+(((0.71)*cj2*x1769))+((sj6*x1769*x1770))+(((-1.0)*sj6*x1765*x1768))+(((-1.0)*cj6*x1765*x1766))+(((-1.0)*cj6*x1764*x1765))+((x1775*x1777))+(((-1.0)*sj6*x1765*x1772))+((x1764*x1780))+(((-1.0)*sj6*x1769*x1771))+((x1766*x1780))+((x1767*x1768*x1776))+(((-1.0)*x1769*x1773)))),IkReal((((x1763*x1779))+(((-1.0)*x1768*x1769*x1774))+(((-1.0)*cj2*sj4*x1773))+(((-0.15)*x1764*x1777))+((sj4*x1767*x1770))+(((0.71)*sj4*(cj2*cj2)))+(((-1.0)*sj4*x1767*x1771))+(((-1.0)*x1764*x1778))+(((-0.15)*x1766*x1777))+(((-1.0)*x1769*x1772*x1774))+((x1775*x1779))+(((-1.0)*x1766*x1778))+(((-0.54)*x1767*x1768))+(((-0.54)*x1767*x1772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1781.valid){
continue;
}
CheckValue<IkReal> x1782=IKPowWithIntegerCheck(IKsign(((-0.15)+(((0.15)*(cj4*cj4))))),-1);
if(!x1782.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1781.value)+(((1.5707963267949)*(x1782.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1783=IKcos(j3);
IkReal x1784=IKsin(j3);
IkReal x1785=((0.16)*sj6);
IkReal x1786=(r11*sj1);
IkReal x1787=(r10*sj1);
IkReal x1788=((0.16)*cj6);
IkReal x1789=(sj2*sj4);
IkReal x1790=(cj1*r01);
IkReal x1791=((1.0)*cj6);
IkReal x1792=((0.02086)*sj6);
IkReal x1793=(cj1*r00);
IkReal x1794=((0.02086)*cj6);
IkReal x1795=((1.0)*sj6);
IkReal x1796=(cj2*sj4);
IkReal x1797=((0.54)*x1784);
IkReal x1798=((1.0)*x1784);
IkReal x1799=((0.15)*x1783);
IkReal x1800=((0.54)*x1783);
IkReal x1801=((0.15)*x1784);
evalcond[0]=((((-1.0)*x1789*x1798))+(((-1.0)*x1783*x1796))+((cj6*r21))+((r20*sj6)));
evalcond[1]=((((-1.0)*x1787*x1795))+((x1783*x1789))+(((-1.0)*x1796*x1798))+(((-1.0)*x1790*x1791))+(((-1.0)*x1793*x1795))+(((-1.0)*x1786*x1791)));
evalcond[2]=((((-1.0)*x1789*x1801))+(((-1.0)*x1796*x1799))+((r21*x1785))+(((-0.71)*cj2))+(((-1.0)*cj2*x1797))+pz+((sj2*x1800))+(((-1.0)*r20*x1788))+(((-1.0)*r21*x1794))+(((-1.0)*r20*x1792)));
evalcond[3]=(((sj2*x1797))+((cj2*x1800))+(((-1.0)*x1796*x1801))+(((-1.0)*cj1*px))+((x1789*x1799))+((x1787*x1792))+(((-1.0)*x1785*x1790))+((x1787*x1788))+(((-1.0)*x1785*x1786))+((x1792*x1793))+(((-1.0)*py*sj1))+(((0.71)*sj2))+((x1786*x1794))+((x1790*x1794))+((x1788*x1793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x1802=((1.0)*cj1);
IkReal x1803=((1.0)*sj1);
IkReal x1804=((((-1.0)*r10*sj6*x1803))+(((-1.0)*cj6*r11*x1803))+(((-1.0)*r00*sj6*x1802))+(((-1.0)*cj6*r01*x1802)));
j5eval[0]=x1804;
j5eval[1]=IKsign(x1804);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1805=r21*r21;
IkReal x1806=cj6*cj6;
IkReal x1807=((((2.0)*cj6*r20*r21*sj6))+(((-1.0)*(r22*r22)))+((x1805*x1806))+(((-1.0)*x1806*(r20*r20)))+(((-1.0)*x1805)));
j5eval[0]=x1807;
j5eval[1]=IKsign(x1807);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1808=cj6*cj6;
IkReal x1809=(cj1*r21);
IkReal x1810=(r21*sj1);
IkReal x1811=(cj6*sj6);
IkReal x1812=((1.0)*sj1);
IkReal x1813=((1.0)*r11);
IkReal x1814=(r20*x1808);
IkReal x1815=((((-1.0)*r01*x1810))+(((-1.0)*r00*x1812*x1814))+(((-1.0)*x1808*x1809*x1813))+((r01*x1808*x1810))+(((-1.0)*cj1*r20*x1811*x1813))+((r01*r20*sj1*x1811))+((r00*x1810*x1811))+((cj1*r10*x1814))+((r11*x1809))+((cj1*r12*r22))+(((-1.0)*r02*r22*x1812))+(((-1.0)*r10*x1809*x1811)));
j5eval[0]=x1815;
j5eval[1]=IKsign(x1815);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1816=cj6*cj6;
IkReal x1817=(sj1*sj6);
IkReal x1818=(cj6*r00);
IkReal x1819=(r02*sj1);
IkReal x1820=((1.0)*r20);
IkReal x1821=(cj1*r12);
IkReal x1822=((1.0)*sj1);
IkReal x1823=(r01*r21);
IkReal x1824=(cj1*r10);
IkReal x1825=((1.0)*r21);
IkReal x1826=(cj1*r11);
IkReal x1827=(cj2*cj3*cj4);
IkReal x1828=(cj4*sj2*sj3);
IkReal x1829=(sj1*x1816);
IkReal x1830=(sj6*x1826);
CheckValue<IkReal> x1831 = IKatan2WithCheck(IkReal(((((-1.0)*x1827*x1830))+((cj6*x1824*x1827))+((cj6*x1824*x1828))+((r01*x1817*x1827))+((r01*x1817*x1828))+(((-1.0)*x1828*x1830))+(((-1.0)*x1818*x1822*x1828))+(((-1.0)*x1818*x1822*x1827)))),IkReal((((x1819*x1828))+((x1819*x1827))+(((-1.0)*x1821*x1828))+(((-1.0)*x1821*x1827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1831.valid){
continue;
}
CheckValue<IkReal> x1832=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1820*x1829))+(((-1.0)*r22*x1819))+((r20*x1816*x1824))+((r22*x1821))+(((-1.0)*x1816*x1825*x1826))+((x1823*x1829))+(((-1.0)*cj6*sj6*x1824*x1825))+((r21*x1817*x1818))+(((-1.0)*x1822*x1823))+((r21*x1826))+((cj6*r01*r20*x1817))+(((-1.0)*cj6*x1820*x1830)))),-1);
if(!x1832.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1831.value)+(((1.5707963267949)*(x1832.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1833=IKcos(j5);
IkReal x1834=IKsin(j5);
IkReal x1835=(r01*sj1);
IkReal x1836=(cj6*r10);
IkReal x1837=((1.0)*cj4);
IkReal x1838=(cj2*cj3);
IkReal x1839=(cj6*r00);
IkReal x1840=(sj2*sj3);
IkReal x1841=(r01*sj6);
IkReal x1842=(r11*sj6);
IkReal x1843=(cj3*sj2);
IkReal x1844=(cj6*r20);
IkReal x1845=((1.0)*cj2*sj3);
IkReal x1846=(sj1*x1833);
IkReal x1847=(cj1*x1833);
IkReal x1848=(sj1*x1834);
IkReal x1849=(cj1*x1834);
IkReal x1850=((1.0)*x1849);
IkReal x1851=((1.0)*sj6*x1833);
IkReal x1852=((1.0)*x1848);
IkReal x1853=((1.0)*sj6*x1834);
evalcond[0]=((((-1.0)*x1845))+((r22*x1834))+((x1833*x1844))+x1843+(((-1.0)*r21*x1851)));
evalcond[1]=((((-1.0)*r22*x1833))+((x1834*x1844))+(((-1.0)*x1837*x1838))+(((-1.0)*x1837*x1840))+(((-1.0)*r21*x1853)));
evalcond[2]=((((-1.0)*x1836*x1847))+((r02*x1848))+(((-1.0)*x1835*x1851))+((x1839*x1846))+(((-1.0)*r12*x1850))+((x1842*x1847)));
evalcond[3]=(sj4+(((-1.0)*x1836*x1850))+(((-1.0)*x1835*x1853))+((x1839*x1848))+(((-1.0)*r02*x1846))+((x1842*x1849))+((r12*x1847)));
evalcond[4]=((((-1.0)*x1836*x1846))+(((-1.0)*x1839*x1847))+(((-1.0)*r02*x1850))+x1840+x1838+(((-1.0)*r12*x1852))+((x1842*x1846))+((x1841*x1847)));
evalcond[5]=(((cj4*x1843))+(((-1.0)*cj2*sj3*x1837))+((r02*x1847))+(((-1.0)*x1836*x1852))+((x1842*x1848))+((r12*x1846))+((x1841*x1849))+(((-1.0)*x1839*x1850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1854=r21*r21;
IkReal x1855=cj6*cj6;
IkReal x1856=(cj3*sj2);
IkReal x1857=(r21*sj6);
IkReal x1858=(cj2*sj3);
IkReal x1859=(cj6*r20);
IkReal x1860=(cj2*cj3*cj4);
IkReal x1861=((1.0)*x1859);
IkReal x1862=(cj4*sj2*sj3);
CheckValue<IkReal> x1863 = IKatan2WithCheck(IkReal(((((-1.0)*x1860*x1861))+((r22*x1856))+(((-1.0)*x1861*x1862))+((x1857*x1860))+((x1857*x1862))+(((-1.0)*r22*x1858)))),IkReal((((r22*x1860))+((r22*x1862))+((x1857*x1858))+(((-1.0)*x1856*x1857))+((x1856*x1859))+(((-1.0)*x1858*x1861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1863.valid){
continue;
}
CheckValue<IkReal> x1864=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1854))+(((2.0)*x1857*x1859))+((x1854*x1855))+(((-1.0)*(r22*r22)))+(((-1.0)*x1855*(r20*r20))))),-1);
if(!x1864.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1863.value)+(((1.5707963267949)*(x1864.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1865=IKcos(j5);
IkReal x1866=IKsin(j5);
IkReal x1867=(r01*sj1);
IkReal x1868=(cj6*r10);
IkReal x1869=((1.0)*cj4);
IkReal x1870=(cj2*cj3);
IkReal x1871=(cj6*r00);
IkReal x1872=(sj2*sj3);
IkReal x1873=(r01*sj6);
IkReal x1874=(r11*sj6);
IkReal x1875=(cj3*sj2);
IkReal x1876=(cj6*r20);
IkReal x1877=((1.0)*cj2*sj3);
IkReal x1878=(sj1*x1865);
IkReal x1879=(cj1*x1865);
IkReal x1880=(sj1*x1866);
IkReal x1881=(cj1*x1866);
IkReal x1882=((1.0)*x1881);
IkReal x1883=((1.0)*sj6*x1865);
IkReal x1884=((1.0)*x1880);
IkReal x1885=((1.0)*sj6*x1866);
evalcond[0]=((((-1.0)*x1877))+((r22*x1866))+((x1865*x1876))+x1875+(((-1.0)*r21*x1883)));
evalcond[1]=(((x1866*x1876))+(((-1.0)*x1869*x1870))+(((-1.0)*x1869*x1872))+(((-1.0)*r22*x1865))+(((-1.0)*r21*x1885)));
evalcond[2]=(((x1874*x1879))+((x1871*x1878))+(((-1.0)*r12*x1882))+(((-1.0)*x1867*x1883))+((r02*x1880))+(((-1.0)*x1868*x1879)));
evalcond[3]=(((x1874*x1881))+sj4+(((-1.0)*x1868*x1882))+((x1871*x1880))+(((-1.0)*r02*x1878))+((r12*x1879))+(((-1.0)*x1867*x1885)));
evalcond[4]=((((-1.0)*x1871*x1879))+((x1874*x1878))+(((-1.0)*r02*x1882))+(((-1.0)*r12*x1884))+x1872+x1870+((x1873*x1879))+(((-1.0)*x1868*x1878)));
evalcond[5]=(((x1874*x1880))+((r02*x1879))+(((-1.0)*x1868*x1884))+(((-1.0)*x1871*x1882))+((x1873*x1881))+(((-1.0)*cj2*sj3*x1869))+((r12*x1878))+((cj4*x1875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1886=((1.0)*cj1);
IkReal x1887=(r11*sj6);
IkReal x1888=(cj2*sj3);
IkReal x1889=(r00*sj1);
IkReal x1890=(cj3*sj2);
IkReal x1891=(r02*sj1);
IkReal x1892=((1.0)*cj6);
IkReal x1893=(cj6*x1890);
IkReal x1894=((1.0)*sj1*sj6);
CheckValue<IkReal> x1895 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x1890*x1894))+(((-1.0)*x1886*x1887*x1888))+(((-1.0)*x1888*x1889*x1892))+((r01*sj1*sj6*x1888))+((cj1*x1887*x1890))+((cj1*cj6*r10*x1888))+((x1889*x1893))+(((-1.0)*r10*x1886*x1893)))),IkReal((((x1888*x1891))+(((-1.0)*x1890*x1891))+((cj1*r12*x1890))+(((-1.0)*r12*x1886*x1888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1895.valid){
continue;
}
CheckValue<IkReal> x1896=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x1886))+(((-1.0)*r00*sj6*x1886))+(((-1.0)*r10*x1894))+(((-1.0)*r11*sj1*x1892)))),-1);
if(!x1896.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1895.value)+(((1.5707963267949)*(x1896.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1897=IKcos(j5);
IkReal x1898=IKsin(j5);
IkReal x1899=(r01*sj1);
IkReal x1900=(cj6*r10);
IkReal x1901=((1.0)*cj4);
IkReal x1902=(cj2*cj3);
IkReal x1903=(cj6*r00);
IkReal x1904=(sj2*sj3);
IkReal x1905=(r01*sj6);
IkReal x1906=(r11*sj6);
IkReal x1907=(cj3*sj2);
IkReal x1908=(cj6*r20);
IkReal x1909=((1.0)*cj2*sj3);
IkReal x1910=(sj1*x1897);
IkReal x1911=(cj1*x1897);
IkReal x1912=(sj1*x1898);
IkReal x1913=(cj1*x1898);
IkReal x1914=((1.0)*x1913);
IkReal x1915=((1.0)*sj6*x1897);
IkReal x1916=((1.0)*x1912);
IkReal x1917=((1.0)*sj6*x1898);
evalcond[0]=(((r22*x1898))+x1907+(((-1.0)*r21*x1915))+((x1897*x1908))+(((-1.0)*x1909)));
evalcond[1]=((((-1.0)*x1901*x1904))+(((-1.0)*x1901*x1902))+((x1898*x1908))+(((-1.0)*r22*x1897))+(((-1.0)*r21*x1917)));
evalcond[2]=((((-1.0)*x1899*x1915))+(((-1.0)*r12*x1914))+((x1903*x1910))+((x1906*x1911))+((r02*x1912))+(((-1.0)*x1900*x1911)));
evalcond[3]=((((-1.0)*x1899*x1917))+sj4+(((-1.0)*x1900*x1914))+((x1903*x1912))+((r12*x1911))+((x1906*x1913))+(((-1.0)*r02*x1910)));
evalcond[4]=(((x1905*x1911))+(((-1.0)*r02*x1914))+(((-1.0)*r12*x1916))+x1904+x1902+((x1906*x1910))+(((-1.0)*x1903*x1911))+(((-1.0)*x1900*x1910)));
evalcond[5]=(((cj4*x1907))+((x1905*x1913))+(((-1.0)*x1900*x1916))+(((-1.0)*x1903*x1914))+(((-1.0)*cj2*sj3*x1901))+((r12*x1910))+((x1906*x1912))+((r02*x1911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1918=(r10*sj6);
IkReal x1919=(sj2*sj6);
IkReal x1920=(cj6*r11);
IkReal x1921=((1.0)*cj2);
IkReal x1922=(cj1*r00);
IkReal x1923=(sj1*sj2);
IkReal x1924=(cj6*r21);
IkReal x1925=(sj1*x1921);
IkReal x1926=(cj1*cj6*r01);
CheckValue<IkReal> x1927 = IKatan2WithCheck(IkReal(((((-1.0)*x1918*x1925))+((sj2*x1924))+(((-1.0)*sj6*x1921*x1922))+(((-1.0)*x1921*x1926))+((r20*x1919))+(((-1.0)*x1920*x1925)))),IkReal((((x1918*x1923))+((sj2*x1926))+((cj2*r20*sj6))+((cj2*x1924))+((x1919*x1922))+((x1920*x1923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1927.valid){
continue;
}
CheckValue<IkReal> x1928=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1928.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1927.value)+(((1.5707963267949)*(x1928.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1929=IKcos(j3);
IkReal x1930=IKsin(j3);
IkReal x1931=((0.16)*sj6);
IkReal x1932=(r11*sj1);
IkReal x1933=(r10*sj1);
IkReal x1934=((0.16)*cj6);
IkReal x1935=(sj2*sj4);
IkReal x1936=(cj1*r01);
IkReal x1937=((1.0)*cj6);
IkReal x1938=((0.02086)*sj6);
IkReal x1939=(cj1*r00);
IkReal x1940=((0.02086)*cj6);
IkReal x1941=((1.0)*sj6);
IkReal x1942=(cj2*sj4);
IkReal x1943=((0.54)*x1930);
IkReal x1944=((1.0)*x1930);
IkReal x1945=((0.15)*x1929);
IkReal x1946=((0.54)*x1929);
IkReal x1947=((0.15)*x1930);
evalcond[0]=((((-1.0)*x1935*x1944))+((cj6*r21))+(((-1.0)*x1929*x1942))+((r20*sj6)));
evalcond[1]=((((-1.0)*x1942*x1944))+(((-1.0)*x1932*x1937))+((x1929*x1935))+(((-1.0)*x1939*x1941))+(((-1.0)*x1933*x1941))+(((-1.0)*x1936*x1937)));
evalcond[2]=((((-1.0)*r21*x1940))+((sj2*x1946))+(((-0.71)*cj2))+(((-1.0)*x1942*x1945))+(((-1.0)*r20*x1938))+(((-1.0)*r20*x1934))+((r21*x1931))+(((-1.0)*x1935*x1947))+(((-1.0)*cj2*x1943))+pz);
evalcond[3]=(((sj2*x1943))+((x1934*x1939))+(((-1.0)*x1942*x1947))+((cj2*x1946))+((x1936*x1940))+(((-1.0)*cj1*px))+((x1935*x1945))+(((-1.0)*x1931*x1936))+(((-1.0)*x1931*x1932))+(((-1.0)*py*sj1))+(((0.71)*sj2))+((x1932*x1940))+((x1933*x1934))+((x1933*x1938))+((x1938*x1939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x1948=((1.0)*cj1);
IkReal x1949=((1.0)*sj1);
IkReal x1950=((((-1.0)*r10*sj6*x1949))+(((-1.0)*cj6*r11*x1949))+(((-1.0)*cj6*r01*x1948))+(((-1.0)*r00*sj6*x1948)));
j5eval[0]=x1950;
j5eval[1]=IKsign(x1950);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1951=r21*r21;
IkReal x1952=cj6*cj6;
IkReal x1953=((((2.0)*cj6*r20*r21*sj6))+((x1951*x1952))+(((-1.0)*(r22*r22)))+(((-1.0)*x1951))+(((-1.0)*x1952*(r20*r20))));
j5eval[0]=x1953;
j5eval[1]=IKsign(x1953);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1954=cj6*cj6;
IkReal x1955=(cj1*r21);
IkReal x1956=(r21*sj1);
IkReal x1957=(cj6*sj6);
IkReal x1958=((1.0)*sj1);
IkReal x1959=((1.0)*r11);
IkReal x1960=(r20*x1954);
IkReal x1961=((((-1.0)*cj1*r20*x1957*x1959))+(((-1.0)*r10*x1955*x1957))+((r11*x1955))+((r01*x1954*x1956))+((r00*x1956*x1957))+(((-1.0)*r01*x1956))+(((-1.0)*r02*r22*x1958))+((cj1*r12*r22))+(((-1.0)*x1954*x1955*x1959))+(((-1.0)*r00*x1958*x1960))+((r01*r20*sj1*x1957))+((cj1*r10*x1960)));
j5eval[0]=x1961;
j5eval[1]=IKsign(x1961);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1962=cj6*cj6;
IkReal x1963=(sj1*sj6);
IkReal x1964=(cj6*r00);
IkReal x1965=(r02*sj1);
IkReal x1966=((1.0)*r20);
IkReal x1967=(cj1*r12);
IkReal x1968=((1.0)*sj1);
IkReal x1969=(r01*r21);
IkReal x1970=(cj1*r10);
IkReal x1971=((1.0)*r21);
IkReal x1972=(cj1*r11);
IkReal x1973=(cj2*cj3*cj4);
IkReal x1974=(cj4*sj2*sj3);
IkReal x1975=(sj1*x1962);
IkReal x1976=(sj6*x1972);
CheckValue<IkReal> x1977=IKPowWithIntegerCheck(IKsign((((x1969*x1975))+(((-1.0)*r22*x1965))+(((-1.0)*cj6*x1966*x1976))+(((-1.0)*x1968*x1969))+((r20*x1962*x1970))+(((-1.0)*x1962*x1971*x1972))+((r21*x1963*x1964))+((r21*x1972))+((r22*x1967))+(((-1.0)*cj6*sj6*x1970*x1971))+(((-1.0)*r00*x1966*x1975))+((cj6*r01*r20*x1963)))),-1);
if(!x1977.valid){
continue;
}
CheckValue<IkReal> x1978 = IKatan2WithCheck(IkReal(((((-1.0)*x1964*x1968*x1973))+(((-1.0)*x1964*x1968*x1974))+((cj6*x1970*x1974))+((cj6*x1970*x1973))+(((-1.0)*x1974*x1976))+(((-1.0)*x1973*x1976))+((r01*x1963*x1974))+((r01*x1963*x1973)))),IkReal((((x1965*x1973))+((x1965*x1974))+(((-1.0)*x1967*x1973))+(((-1.0)*x1967*x1974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1978.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1977.value)))+(x1978.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1979=IKcos(j5);
IkReal x1980=IKsin(j5);
IkReal x1981=(r01*sj1);
IkReal x1982=(cj6*r10);
IkReal x1983=((1.0)*cj4);
IkReal x1984=(cj2*cj3);
IkReal x1985=(cj6*r00);
IkReal x1986=(sj2*sj3);
IkReal x1987=(r01*sj6);
IkReal x1988=(r11*sj6);
IkReal x1989=(cj3*sj2);
IkReal x1990=(cj6*r20);
IkReal x1991=((1.0)*cj2*sj3);
IkReal x1992=(sj1*x1979);
IkReal x1993=(cj1*x1979);
IkReal x1994=(sj1*x1980);
IkReal x1995=(cj1*x1980);
IkReal x1996=((1.0)*x1995);
IkReal x1997=((1.0)*sj6*x1979);
IkReal x1998=((1.0)*x1994);
IkReal x1999=((1.0)*sj6*x1980);
evalcond[0]=((((-1.0)*r21*x1997))+x1989+(((-1.0)*x1991))+((r22*x1980))+((x1979*x1990)));
evalcond[1]=((((-1.0)*r21*x1999))+(((-1.0)*r22*x1979))+(((-1.0)*x1983*x1984))+(((-1.0)*x1983*x1986))+((x1980*x1990)));
evalcond[2]=(((x1988*x1993))+(((-1.0)*x1981*x1997))+((r02*x1994))+(((-1.0)*x1982*x1993))+((x1985*x1992))+(((-1.0)*r12*x1996)));
evalcond[3]=(((r12*x1993))+sj4+((x1988*x1995))+(((-1.0)*x1982*x1996))+(((-1.0)*r02*x1992))+(((-1.0)*x1981*x1999))+((x1985*x1994)));
evalcond[4]=(((x1988*x1992))+(((-1.0)*x1985*x1993))+(((-1.0)*r02*x1996))+(((-1.0)*x1982*x1992))+x1986+x1984+((x1987*x1993))+(((-1.0)*r12*x1998)));
evalcond[5]=((((-1.0)*cj2*sj3*x1983))+((r12*x1992))+((x1988*x1994))+(((-1.0)*x1982*x1998))+((r02*x1993))+((cj4*x1989))+((x1987*x1995))+(((-1.0)*x1985*x1996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2000=r21*r21;
IkReal x2001=cj6*cj6;
IkReal x2002=(cj3*sj2);
IkReal x2003=(r21*sj6);
IkReal x2004=(cj2*sj3);
IkReal x2005=(cj6*r20);
IkReal x2006=(cj2*cj3*cj4);
IkReal x2007=((1.0)*x2005);
IkReal x2008=(cj4*sj2*sj3);
CheckValue<IkReal> x2009 = IKatan2WithCheck(IkReal(((((-1.0)*x2006*x2007))+((r22*x2002))+(((-1.0)*r22*x2004))+(((-1.0)*x2007*x2008))+((x2003*x2006))+((x2003*x2008)))),IkReal((((r22*x2006))+((r22*x2008))+(((-1.0)*x2002*x2003))+((x2002*x2005))+(((-1.0)*x2004*x2007))+((x2003*x2004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2009.valid){
continue;
}
CheckValue<IkReal> x2010=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2001*(r20*r20)))+((x2000*x2001))+(((2.0)*x2003*x2005))+(((-1.0)*(r22*r22)))+(((-1.0)*x2000)))),-1);
if(!x2010.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2009.value)+(((1.5707963267949)*(x2010.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2011=IKcos(j5);
IkReal x2012=IKsin(j5);
IkReal x2013=(r01*sj1);
IkReal x2014=(cj6*r10);
IkReal x2015=((1.0)*cj4);
IkReal x2016=(cj2*cj3);
IkReal x2017=(cj6*r00);
IkReal x2018=(sj2*sj3);
IkReal x2019=(r01*sj6);
IkReal x2020=(r11*sj6);
IkReal x2021=(cj3*sj2);
IkReal x2022=(cj6*r20);
IkReal x2023=((1.0)*cj2*sj3);
IkReal x2024=(sj1*x2011);
IkReal x2025=(cj1*x2011);
IkReal x2026=(sj1*x2012);
IkReal x2027=(cj1*x2012);
IkReal x2028=((1.0)*x2027);
IkReal x2029=((1.0)*sj6*x2011);
IkReal x2030=((1.0)*x2026);
IkReal x2031=((1.0)*sj6*x2012);
evalcond[0]=(x2021+((r22*x2012))+(((-1.0)*x2023))+(((-1.0)*r21*x2029))+((x2011*x2022)));
evalcond[1]=((((-1.0)*x2015*x2018))+(((-1.0)*x2015*x2016))+((x2012*x2022))+(((-1.0)*r21*x2031))+(((-1.0)*r22*x2011)));
evalcond[2]=(((x2020*x2025))+((x2017*x2024))+(((-1.0)*x2014*x2025))+(((-1.0)*x2013*x2029))+(((-1.0)*r12*x2028))+((r02*x2026)));
evalcond[3]=(((x2020*x2027))+((x2017*x2026))+sj4+(((-1.0)*r02*x2024))+(((-1.0)*x2013*x2031))+(((-1.0)*x2014*x2028))+((r12*x2025)));
evalcond[4]=(((x2020*x2024))+((x2019*x2025))+(((-1.0)*r12*x2030))+x2018+x2016+(((-1.0)*x2017*x2025))+(((-1.0)*x2014*x2024))+(((-1.0)*r02*x2028)));
evalcond[5]=(((x2020*x2026))+((cj4*x2021))+((x2019*x2027))+(((-1.0)*cj2*sj3*x2015))+(((-1.0)*x2017*x2028))+((r02*x2025))+(((-1.0)*x2014*x2030))+((r12*x2024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2032=((1.0)*cj1);
IkReal x2033=(r11*sj6);
IkReal x2034=(cj2*sj3);
IkReal x2035=(r00*sj1);
IkReal x2036=(cj3*sj2);
IkReal x2037=(r02*sj1);
IkReal x2038=((1.0)*cj6);
IkReal x2039=(cj6*x2036);
IkReal x2040=((1.0)*sj1*sj6);
CheckValue<IkReal> x2041=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2040))+(((-1.0)*r11*sj1*x2038))+(((-1.0)*r00*sj6*x2032))+(((-1.0)*cj6*r01*x2032)))),-1);
if(!x2041.valid){
continue;
}
CheckValue<IkReal> x2042 = IKatan2WithCheck(IkReal((((cj1*x2033*x2036))+((cj1*cj6*r10*x2034))+(((-1.0)*x2034*x2035*x2038))+(((-1.0)*r01*x2036*x2040))+(((-1.0)*r10*x2032*x2039))+((x2035*x2039))+((r01*sj1*sj6*x2034))+(((-1.0)*x2032*x2033*x2034)))),IkReal((((x2034*x2037))+((cj1*r12*x2036))+(((-1.0)*r12*x2032*x2034))+(((-1.0)*x2036*x2037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2042.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2041.value)))+(x2042.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2043=IKcos(j5);
IkReal x2044=IKsin(j5);
IkReal x2045=(r01*sj1);
IkReal x2046=(cj6*r10);
IkReal x2047=((1.0)*cj4);
IkReal x2048=(cj2*cj3);
IkReal x2049=(cj6*r00);
IkReal x2050=(sj2*sj3);
IkReal x2051=(r01*sj6);
IkReal x2052=(r11*sj6);
IkReal x2053=(cj3*sj2);
IkReal x2054=(cj6*r20);
IkReal x2055=((1.0)*cj2*sj3);
IkReal x2056=(sj1*x2043);
IkReal x2057=(cj1*x2043);
IkReal x2058=(sj1*x2044);
IkReal x2059=(cj1*x2044);
IkReal x2060=((1.0)*x2059);
IkReal x2061=((1.0)*sj6*x2043);
IkReal x2062=((1.0)*x2058);
IkReal x2063=((1.0)*sj6*x2044);
evalcond[0]=(((r22*x2044))+((x2043*x2054))+x2053+(((-1.0)*r21*x2061))+(((-1.0)*x2055)));
evalcond[1]=(((x2044*x2054))+(((-1.0)*r21*x2063))+(((-1.0)*x2047*x2048))+(((-1.0)*x2047*x2050))+(((-1.0)*r22*x2043)));
evalcond[2]=((((-1.0)*x2045*x2061))+(((-1.0)*x2046*x2057))+(((-1.0)*r12*x2060))+((x2052*x2057))+((x2049*x2056))+((r02*x2058)));
evalcond[3]=((((-1.0)*x2046*x2060))+(((-1.0)*x2045*x2063))+((r12*x2057))+(((-1.0)*r02*x2056))+sj4+((x2052*x2059))+((x2049*x2058)));
evalcond[4]=((((-1.0)*x2046*x2056))+(((-1.0)*r12*x2062))+(((-1.0)*r02*x2060))+((x2052*x2056))+x2048+x2050+(((-1.0)*x2049*x2057))+((x2051*x2057)));
evalcond[5]=((((-1.0)*x2046*x2062))+((r12*x2056))+((x2052*x2058))+((cj4*x2053))+((r02*x2057))+(((-1.0)*x2049*x2060))+(((-1.0)*cj2*sj3*x2047))+((x2051*x2059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - 7th_axe_robot (16fa17c397f5ef27a2b736b101153f6b)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
