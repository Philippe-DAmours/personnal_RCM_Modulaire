/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2024-02-19 14:13:41.652873
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKsin(j[1]);
x1=IKsin(j[2]);
x2=IKcos(j[1]);
x3=IKcos(j[2]);
x4=IKcos(j[4]);
x5=IKsin(j[3]);
x6=IKsin(j[4]);
x7=IKcos(j[3]);
x8=IKsin(j[0]);
x9=IKcos(j[0]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.17086)*x7);
x13=((1.0)*x7);
x14=((0.1417)*x1);
x15=(x2*x3);
x16=(x0*x3);
x17=(x0*x1);
x18=(x6*x7);
x19=(x5*x6);
x20=(x1*x2);
x21=(x4*x7);
x22=(x10*x5);
x23=(x4*x5);
x24=(x11*x5);
x25=(x11*x13);
x26=((0.16)*x20);
x27=((0.16)*x16);
x28=((((-1.0)*x20))+x16);
x29=(x15+x17);
x30=((((-1.0)*x14*x2))+(((0.1417)*x16)));
x31=((((0.1417)*x23))+(((0.16)*x19)));
x32=((((1.0)*x15))+(((1.0)*x17)));
x33=((-1.0)*x32);
x34=(((x0*x14))+(((0.1417)*x15)));
x35=((((0.16)*x17))+(((0.16)*x15)));
x36=(x29*x4);
x37=(x28*x4);
x38=(x28*x6);
x39=((((1.0)*x11*x19))+((x10*x13)));
x40=(x33*x6);
x41=(((x21*x28))+x40);
x42=(((x10*((((x18*x28))+x36))))+((x24*x28)));
x43=(((x22*x28))+((x11*(((((-1.0)*x36))+(((-1.0)*x13*x38)))))));
x44=((((0.54)*x15))+(((0.54)*x17))+((x21*x30))+((x18*(((((-1.0)*x26))+x27))))+((x35*x4))+(((-1.0)*x34*x6))+(((0.71)*x0))+((x5*(((((0.17086)*x16))+(((-0.17086)*x20)))))));
eerot[0]=(((x41*x9))+(((-1.0)*x23*x8)));
eerot[1]=(((x39*x8))+((x43*x9)));
eerot[2]=(((x8*((x25+(((-1.0)*x10*x19))))))+((x42*x9)));
eetrans[0]=(((x8*(((((-1.0)*x31))+x12))))+((x44*x9)));
eerot[3]=(((x41*x8))+((x23*x9)));
eerot[4]=((((-1.0)*x39*x9))+((x43*x8)));
eerot[5]=(((x42*x8))+((x9*(((((-1.0)*x25))+((x10*x19)))))));
eetrans[1]=(((x9*(((((-1.0)*x12))+x31))))+((x44*x8)));
eerot[6]=(((x21*x32))+x38);
eerot[7]=(((x22*x32))+((x11*((((x18*x33))+x37)))));
eerot[8]=(((x10*(((((-1.0)*x37))+(((-1.0)*x13*x40))))))+((x24*x32)));
eetrans[2]=((0.245)+((x4*(((((-1.0)*x27))+x26))))+(((0.54)*x20))+((x30*x6))+((x18*x35))+(((-0.54)*x16))+((x21*x34))+((x5*(((((0.17086)*x17))+(((0.17086)*x15))))))+(((0.71)*x2)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API const int* GetFreeIndices() { static const int freeindices[] = {0}; return freeindices; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j1,cj1,sj1,htj1,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij1[2], _nj1;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j1=pfree[0]; cj1=cos(pfree[0]); sj1=sin(pfree[0]), htj1=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=(((r12*(IKsin(j1))))+((r02*(IKcos(j1)))));
new_r01=(((r11*(IKsin(j1))))+((r01*(IKcos(j1)))));
new_r02=((((-1.0)*r10*(IKsin(j1))))+(((-1.0)*r00*(IKcos(j1)))));
IkReal x45=IKsin(j1);
IkReal x46=IKcos(j1);
new_px=((((-0.1417)*r10*x45))+((py*x45))+((px*x46))+(((-0.1417)*r00*x46)));
new_r10=((-1.0)*r22);
new_r11=((-1.0)*r21);
new_r12=r20;
new_py=((0.245)+(((0.1417)*r20))+(((-1.0)*pz)));
new_r20=(((r12*(IKcos(j1))))+(((-1.0)*r02*(IKsin(j1)))));
new_r21=((((-1.0)*r01*(IKsin(j1))))+((r11*(IKcos(j1)))));
new_r22=(((r00*(IKsin(j1))))+(((-1.0)*r10*(IKcos(j1)))));
IkReal x47=IKsin(j1);
IkReal x48=IKcos(j1);
new_pz=((((-1.0)*px*x47))+(((-0.1417)*r10*x48))+((py*x48))+(((0.1417)*r00*x47)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x49=((1.0)*px);
IkReal x50=((1.0)*pz);
IkReal x51=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x51))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x50)));
rxp0_2=((((-1.0)*r10*x49))+((py*r00)));
rxp1_0=((((-1.0)*r21*x51))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x50)));
rxp1_2=((((-1.0)*r11*x49))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x51)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x50)));
rxp2_2=((((-1.0)*r12*x49))+((py*r02)));
{
IkReal j6eval[2];
j6eval[0]=((r20*r20)+(r21*r21));
j6eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2, j3, j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x52=((((0.16)*r21))+(((-0.17086)*r20)));
IkReal x53=((((-0.17086)*r21))+(((-0.16)*r20)));
CheckValue<IkReal> x56 = IKatan2WithCheck(IkReal(x53),IkReal(x52),IKFAST_ATAN2_MAGTHRESH);
if(!x56.valid){
continue;
}
IkReal x54=((1.0)*(x56.value));
if((((x52*x52)+(x53*x53))) < -0.00001)
continue;
CheckValue<IkReal> x57=IKPowWithIntegerCheck(IKabs(IKsqrt(((x52*x52)+(x53*x53)))),-1);
if(!x57.valid){
continue;
}
if( ((pz*(x57.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x57.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x55=IKasin((pz*(x57.value)));
j6array[0]=((((-1.0)*x54))+(((-1.0)*x55)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+x55+(((-1.0)*x54)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
sj3array[0]=((-0.966232212310902)+(((-0.445644235785081)*npx*sj6))+(((-0.445644235785081)*cj6*npy))+(((0.417318727177882)*npy*sj6))+(((-0.417318727177882)*cj6*npx))+(((1.30412102243088)*pp)));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j2eval[2];
j2eval[0]=((1.03768909754825)+sj3);
j2eval[1]=IKsign(((1989.25)+(((1917.0)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x58=((4.32)*sj3);
IkReal x59=(r11*sj6);
IkReal x60=(cj3*r01);
IkReal x61=((4.61322)*cj6);
IkReal x62=(cj3*px);
IkReal x63=(cj6*r10);
IkReal x64=((1.067875)*cj6);
IkReal x65=(py*sj3);
IkReal x66=(r10*sj6);
IkReal x67=(r11*sj3);
IkReal x68=(cj6*r11);
IkReal x69=(cj3*r00*sj6);
IkReal x70=(cj3*cj6*r00);
j2eval[0]=((((1.40405787037037)*x66))+(((1.40405787037037)*x68))+(((-1.0)*sj6*x60))+((sj3*x63))+(((1.067875)*sj3*x66))+((x60*x64))+(((-6.25)*x65))+(((-6.25)*x62))+(((-1.31481481481481)*x59))+(((1.067875)*x69))+(((1.31481481481481)*x63))+(((-8.21759259259259)*py))+x70+(((-1.0)*sj3*x59))+((x64*x67)));
j2eval[1]=IKsign(((((-4.32)*sj6*x60))+(((-27.0)*x65))+(((-27.0)*x62))+((x60*x61))+((x58*x63))+(((6.06553)*x66))+(((6.06553)*x68))+(((4.32)*x70))+(((4.61322)*x69))+(((4.61322)*sj3*x66))+((x61*x67))+(((-35.5)*py))+(((-1.0)*x58*x59))+(((-5.68)*x59))+(((5.68)*x63))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
IkReal x71=((1.067875)*sj6);
IkReal x72=(r00*sj3);
IkReal x73=(cj3*r10);
IkReal x74=((1.067875)*cj6);
IkReal x75=(r01*sj3);
IkReal x76=(cj3*r11);
j2eval[0]=((((8.21759259259259)*px))+(((-1.40405787037037)*cj6*r01))+(((1.31481481481481)*r01*sj6))+(((-1.31481481481481)*cj6*r00))+(((-1.0)*cj6*x72))+(((-1.0)*x74*x75))+((cj6*x73))+(((6.25)*px*sj3))+(((-1.0)*x71*x72))+((sj6*x75))+(((-1.40405787037037)*r00*sj6))+((x74*x76))+(((-1.0)*sj6*x76))+(((-6.25)*cj3*py))+((x71*x73)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x77=cj6*cj6;
IkReal x78=r00*r00;
IkReal x79=r01*r01;
IkReal x80=(cj6*r11);
IkReal x81=((4.61322)*cj3);
IkReal x82=(r01*sj6);
IkReal x83=(cj6*r10);
IkReal x84=((4.32)*sj3);
IkReal x85=(cj6*r00);
IkReal x86=((800.0)*px);
IkReal x87=((216.0)*sj3);
IkReal x88=(cj6*r01);
IkReal x89=((854.3)*px);
IkReal x90=(px*sj3);
IkReal x91=(r00*r01);
IkReal x92=((8.543)*py);
IkReal x93=((8.543)*px);
IkReal x94=((4.32)*cj3);
IkReal x95=(r00*sj6);
IkReal x96=((230.661)*sj3);
IkReal x97=((230.661)*cj3);
IkReal x98=(r01*r10);
IkReal x99=((4.61322)*sj3);
IkReal x100=(r10*sj6);
IkReal x101=(r00*r11);
IkReal x102=((8.0)*py);
IkReal x103=(r11*sj6);
IkReal x104=((8.0)*px);
IkReal x105=(r00*r10);
IkReal x106=(r01*r11);
IkReal x107=((216.0)*cj3);
IkReal x108=(cj3*py);
IkReal x109=((8.982849)*x77);
IkReal x110=((2.73376)*x77);
IkReal x111=((136.688)*cj6*sj6);
IkReal x112=((0.17965698)*x77);
CheckValue<IkReal> x113=IKPowWithIntegerCheck(((((-1.0)*x95*x96))+((x107*x83))+((x100*x97))+(((-1350.0)*x108))+((x82*x87))+(((-284.0)*x85))+(((-303.2765)*x95))+(((-1.0)*x103*x107))+(((1350.0)*x90))+((x80*x97))+(((-303.2765)*x88))+(((284.0)*x82))+(((1775.0)*px))+(((-1.0)*x88*x96))+(((-1.0)*x85*x87))),-1);
if(!x113.valid){
continue;
}
CheckValue<IkReal> x114=IKPowWithIntegerCheck(((((-1.0)*x95*x99))+(((-1.0)*x103*x94))+(((-6.06553)*x88))+((x100*x81))+(((-6.06553)*x95))+((x82*x84))+(((5.68)*x82))+(((27.0)*x90))+(((-27.0)*x108))+(((35.5)*px))+(((-1.0)*x84*x85))+((x80*x81))+((x83*x94))+(((-1.0)*x88*x99))+(((-5.68)*x85))),-1);
if(!x114.valid){
continue;
}
if( IKabs(((x113.value)*(((((-729.0)*(cj3*cj3)))+(((64.0)*x79))+((x111*x78))+((x82*x86))+(((-1.0)*x109*x78))+(((-1.0)*x111*x79))+(((-136.688)*x91))+(((72.982849)*x78))+((x109*x79))+(((17.965698)*x82*x85))+(((-1.0)*x88*x89))+(((273.376)*x77*x91))+(((2500.0)*(px*px)))+(((-1.0)*x85*x86))+(((-1.0)*x89*x95)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x114.value)*(((((-2.73376)*x83*x95))+((x100*x93))+(((14.58)*cj3*sj3))+(((-1.0)*x102*x82))+((x92*x95))+(((-0.17965698)*x80*x95))+((x102*x85))+(((-1.0)*x101*x110))+(((2.73376)*x80*x82))+(((-50.0)*px*py))+(((-1.28)*x106))+(((19.17)*cj3))+(((-1.0)*x106*x112))+(((-1.0)*x110*x98))+(((-1.45965698)*x105))+(((1.36688)*x101))+((x88*x92))+(((-1.0)*x103*x104))+(((-0.17965698)*x82*x83))+((x80*x93))+((x105*x112))+((x104*x83))+(((1.36688)*x98)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x113.value)*(((((-729.0)*(cj3*cj3)))+(((64.0)*x79))+((x111*x78))+((x82*x86))+(((-1.0)*x109*x78))+(((-1.0)*x111*x79))+(((-136.688)*x91))+(((72.982849)*x78))+((x109*x79))+(((17.965698)*x82*x85))+(((-1.0)*x88*x89))+(((273.376)*x77*x91))+(((2500.0)*(px*px)))+(((-1.0)*x85*x86))+(((-1.0)*x89*x95))))))+IKsqr(((x114.value)*(((((-2.73376)*x83*x95))+((x100*x93))+(((14.58)*cj3*sj3))+(((-1.0)*x102*x82))+((x92*x95))+(((-0.17965698)*x80*x95))+((x102*x85))+(((-1.0)*x101*x110))+(((2.73376)*x80*x82))+(((-50.0)*px*py))+(((-1.28)*x106))+(((19.17)*cj3))+(((-1.0)*x106*x112))+(((-1.0)*x110*x98))+(((-1.45965698)*x105))+(((1.36688)*x101))+((x88*x92))+(((-1.0)*x103*x104))+(((-0.17965698)*x82*x83))+((x80*x93))+((x105*x112))+((x104*x83))+(((1.36688)*x98))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x113.value)*(((((-729.0)*(cj3*cj3)))+(((64.0)*x79))+((x111*x78))+((x82*x86))+(((-1.0)*x109*x78))+(((-1.0)*x111*x79))+(((-136.688)*x91))+(((72.982849)*x78))+((x109*x79))+(((17.965698)*x82*x85))+(((-1.0)*x88*x89))+(((273.376)*x77*x91))+(((2500.0)*(px*px)))+(((-1.0)*x85*x86))+(((-1.0)*x89*x95))))), ((x114.value)*(((((-2.73376)*x83*x95))+((x100*x93))+(((14.58)*cj3*sj3))+(((-1.0)*x102*x82))+((x92*x95))+(((-0.17965698)*x80*x95))+((x102*x85))+(((-1.0)*x101*x110))+(((2.73376)*x80*x82))+(((-50.0)*px*py))+(((-1.28)*x106))+(((19.17)*cj3))+(((-1.0)*x106*x112))+(((-1.0)*x110*x98))+(((-1.45965698)*x105))+(((1.36688)*x101))+((x88*x92))+(((-1.0)*x103*x104))+(((-0.17965698)*x82*x83))+((x80*x93))+((x105*x112))+((x104*x83))+(((1.36688)*x98))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x115=IKsin(j2);
IkReal x116=IKcos(j2);
IkReal x117=((0.2426212)*cj6);
IkReal x118=((1.0)*py);
IkReal x119=((0.54)*cj3);
IkReal x120=(cj6*r00);
IkReal x121=(cj6*r10);
IkReal x122=((0.17086)*sj6);
IkReal x123=(r01*sj6);
IkReal x124=(r11*sj6);
IkReal x125=((1.0)*px);
IkReal x126=((0.54)*sj3);
IkReal x127=((0.17086)*cj6);
IkReal x128=((0.16)*sj6);
IkReal x129=((0.2426212)*sj6);
IkReal x130=(r11*x116);
IkReal x131=((0.2272)*x115);
IkReal x132=(r01*x115);
IkReal x133=((0.16)*x115);
IkReal x134=(py*x116);
IkReal x135=((0.16)*x116);
IkReal x136=(r00*x115);
IkReal x137=(r10*x116);
evalcond[0]=((((0.71)*x115))+(((0.16)*x120))+((r01*x127))+(((-1.0)*x125))+((r00*x122))+((x115*x126))+(((-0.16)*x123))+((x116*x119)));
evalcond[1]=((((0.16)*x121))+(((-1.0)*x116*x126))+(((-1.0)*x118))+(((-0.16)*x124))+(((-0.71)*x116))+((r11*x127))+((x115*x119))+((r10*x122)));
evalcond[2]=((((-1.0)*x123*x135))+((x121*x133))+(((-1.0)*x116*x125))+(((-1.0)*x115*x118))+(((-1.0)*x124*x133))+x119+((x120*x135))+((r00*x116*x122))+((r10*x115*x122))+((r01*x116*x127))+((r11*x115*x127)));
evalcond[3]=((0.71)+((x127*x132))+(((-1.0)*x122*x137))+(((-1.0)*x123*x133))+(((-1.0)*x115*x125))+((x122*x136))+x134+x126+((x124*x135))+((x120*x133))+(((-1.0)*x121*x135))+(((-1.0)*x127*x130)));
evalcond[4]=((-0.2672931396)+(((-0.2272)*x116*x124))+((x117*x130))+(((-1.0)*x120*x131))+(((0.2272)*x116*x121))+((x129*x137))+(((0.34172)*cj6*npy))+(((0.32)*cj6*npx))+(((0.34172)*npx*sj6))+(((-1.0)*x117*x132))+(((-0.32)*npy*sj6))+((x123*x131))+(((-1.0)*pp))+(((-1.42)*x134))+(((1.42)*px*x115))+(((-1.0)*x129*x136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x150=cj6*cj6;
IkReal x151=r01*r01;
IkReal x152=r00*r00;
IkReal x153=((4.32)*sj3);
IkReal x154=(r11*sj6);
IkReal x155=(cj6*r01);
IkReal x156=((4.61322)*cj3);
IkReal x157=(r00*r01);
IkReal x158=((8.543)*py);
IkReal x159=(r00*sj6);
IkReal x160=(cj6*r10);
IkReal x161=(cj6*r11);
IkReal x162=((8.543)*px);
IkReal x163=((17.086)*px);
IkReal x164=(r01*r10);
IkReal x165=(r00*r10);
IkReal x166=(r00*r11);
IkReal x167=((8.0)*py);
IkReal x168=(cj6*r00);
IkReal x169=(r01*sj6);
IkReal x170=((16.0)*px);
IkReal x171=(r10*sj6);
IkReal x172=((8.0)*px);
IkReal x173=((4.61322)*sj3);
IkReal x174=(r01*r11);
IkReal x175=((4.32)*cj3);
IkReal x176=((0.17965698)*x150);
IkReal x177=((2.73376)*x150);
IkReal x178=((2.73376)*cj6*sj6);
CheckValue<IkReal> x179=IKPowWithIntegerCheck(IKsign(((((6.06553)*x161))+((x161*x173))+(((-5.68)*x154))+(((-1.0)*x153*x154))+((x168*x175))+(((5.68)*x160))+(((-27.0)*cj3*px))+((x155*x156))+(((-35.5)*py))+((x171*x173))+(((-27.0)*py*sj3))+((x156*x159))+(((-1.0)*x169*x175))+(((6.06553)*x171))+((x153*x160)))),-1);
if(!x179.valid){
continue;
}
CheckValue<IkReal> x180 = IKatan2WithCheck(IkReal(((((-1.0)*x154*x172))+((x161*x162))+(((-1.45965698)*x165))+(((-1.0)*x174*x176))+(((2.73376)*x154*x155))+((x162*x171))+(((-50.0)*px*py))+(((-14.58)*cj3*sj3))+(((1.36688)*x166))+(((1.36688)*x164))+(((-2.73376)*x159*x160))+((x155*x158))+(((-19.17)*cj3))+((x167*x168))+((x165*x176))+((x158*x159))+(((-1.28)*x174))+(((-0.17965698)*x155*x171))+(((-1.0)*x164*x177))+(((-0.17965698)*x154*x168))+(((-1.0)*x166*x177))+(((-1.0)*x167*x169))+((x160*x172)))),IkReal(((39.785)+(((2.73376)*x157))+(((-0.35931396)*x155*x159))+((x152*x176))+((x168*x170))+((x151*x178))+(((-14.58)*(cj3*cj3)))+(((-1.45965698)*x152))+(((-1.0)*x152*x178))+(((-1.0)*x151*x176))+(((38.34)*sj3))+((x155*x163))+(((-1.28)*x151))+(((-5.46752)*x150*x157))+(((-50.0)*(px*px)))+(((-1.0)*x169*x170))+((x159*x163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x180.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x179.value)))+(x180.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x181=IKsin(j2);
IkReal x182=IKcos(j2);
IkReal x183=((0.2426212)*cj6);
IkReal x184=((1.0)*py);
IkReal x185=((0.54)*cj3);
IkReal x186=(cj6*r00);
IkReal x187=(cj6*r10);
IkReal x188=((0.17086)*sj6);
IkReal x189=(r01*sj6);
IkReal x190=(r11*sj6);
IkReal x191=((1.0)*px);
IkReal x192=((0.54)*sj3);
IkReal x193=((0.17086)*cj6);
IkReal x194=((0.16)*sj6);
IkReal x195=((0.2426212)*sj6);
IkReal x196=(r11*x182);
IkReal x197=((0.2272)*x181);
IkReal x198=(r01*x181);
IkReal x199=((0.16)*x181);
IkReal x200=(py*x182);
IkReal x201=((0.16)*x182);
IkReal x202=(r00*x181);
IkReal x203=(r10*x182);
evalcond[0]=(((r01*x193))+((r00*x188))+(((-1.0)*x191))+(((0.16)*x186))+(((0.71)*x181))+(((-0.16)*x189))+((x181*x192))+((x182*x185)));
evalcond[1]=((((-1.0)*x184))+(((-0.71)*x182))+(((0.16)*x187))+(((-0.16)*x190))+((r11*x193))+((r10*x188))+(((-1.0)*x182*x192))+((x181*x185)));
evalcond[2]=(((r00*x182*x188))+(((-1.0)*x189*x201))+((r01*x182*x193))+((x187*x199))+(((-1.0)*x190*x199))+x185+((r11*x181*x193))+((r10*x181*x188))+(((-1.0)*x182*x191))+((x186*x201))+(((-1.0)*x181*x184)));
evalcond[3]=((0.71)+((x186*x199))+((x193*x198))+(((-1.0)*x187*x201))+(((-1.0)*x189*x199))+((x190*x201))+((x188*x202))+x192+x200+(((-1.0)*x193*x196))+(((-1.0)*x181*x191))+(((-1.0)*x188*x203)));
evalcond[4]=((-0.2672931396)+(((-1.0)*x195*x202))+(((1.42)*px*x181))+(((0.34172)*cj6*npy))+(((-1.0)*x186*x197))+((x195*x203))+(((0.32)*cj6*npx))+(((0.34172)*npx*sj6))+(((0.2272)*x182*x187))+((x189*x197))+(((-0.32)*npy*sj6))+(((-1.0)*pp))+(((-1.0)*x183*x198))+((x183*x196))+(((-1.42)*x200))+(((-0.2272)*x182*x190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x204=((284.0)*sj6);
IkReal x205=((1350.0)*px);
IkReal x206=(cj6*r00);
IkReal x207=(cj6*r11);
IkReal x208=((1350.0)*py);
IkReal x209=(cj3*r01);
IkReal x210=((230.661)*cj6);
IkReal x211=((216.0)*sj6);
IkReal x212=((230.661)*cj3);
IkReal x213=(r10*sj6);
IkReal x214=((216.0)*cj3);
IkReal x215=(cj6*r10);
IkReal x216=(r00*sj6);
IkReal x217=(r01*sj3);
IkReal x218=((216.0)*cj6*sj3);
IkReal x219=((230.661)*sj3*sj6);
CheckValue<IkReal> x220=IKPowWithIntegerCheck(IKsign(((1989.25)+(((1917.0)*sj3)))),-1);
if(!x220.valid){
continue;
}
CheckValue<IkReal> x221 = IKatan2WithCheck(IkReal((((sj3*x205))+(((-216.0)*sj3*x206))+((cj3*x208))+(((-284.0)*x206))+(((-1.0)*x207*x212))+(((-303.2765)*cj6*r01))+((x211*x217))+((r01*x204))+(((-1.0)*x210*x217))+((cj3*r11*x211))+(((-303.2765)*x216))+(((-1.0)*x214*x215))+(((-1.0)*x212*x213))+(((-230.661)*sj3*x216))+(((1775.0)*px)))),IkReal(((((-1.0)*r11*x204))+(((-1775.0)*py))+((cj3*x205))+(((303.2765)*x213))+(((-1.0)*x206*x214))+(((284.0)*x215))+((x209*x211))+(((230.661)*sj3*x207))+(((303.2765)*x207))+(((216.0)*sj3*x215))+(((-1.0)*x212*x216))+(((-1.0)*sj3*x208))+(((-1.0)*x209*x210))+(((230.661)*sj3*x213))+(((-1.0)*r11*sj3*x211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x221.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x220.value)))+(x221.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x222=IKsin(j2);
IkReal x223=IKcos(j2);
IkReal x224=((0.2426212)*cj6);
IkReal x225=((1.0)*py);
IkReal x226=((0.54)*cj3);
IkReal x227=(cj6*r00);
IkReal x228=(cj6*r10);
IkReal x229=((0.17086)*sj6);
IkReal x230=(r01*sj6);
IkReal x231=(r11*sj6);
IkReal x232=((1.0)*px);
IkReal x233=((0.54)*sj3);
IkReal x234=((0.17086)*cj6);
IkReal x235=((0.16)*sj6);
IkReal x236=((0.2426212)*sj6);
IkReal x237=(r11*x223);
IkReal x238=((0.2272)*x222);
IkReal x239=(r01*x222);
IkReal x240=((0.16)*x222);
IkReal x241=(py*x223);
IkReal x242=((0.16)*x223);
IkReal x243=(r00*x222);
IkReal x244=(r10*x223);
evalcond[0]=((((-0.16)*x230))+((r00*x229))+(((0.16)*x227))+((x223*x226))+(((-1.0)*x232))+((x222*x233))+((r01*x234))+(((0.71)*x222)));
evalcond[1]=(((r11*x234))+((x222*x226))+(((-0.16)*x231))+(((0.16)*x228))+((r10*x229))+(((-0.71)*x223))+(((-1.0)*x223*x233))+(((-1.0)*x225)));
evalcond[2]=((((-1.0)*x231*x240))+((r00*x223*x229))+((x228*x240))+(((-1.0)*x230*x242))+((x227*x242))+(((-1.0)*x222*x225))+x226+((r10*x222*x229))+((r01*x223*x234))+(((-1.0)*x223*x232))+((r11*x222*x234)));
evalcond[3]=((0.71)+((x234*x239))+(((-1.0)*x228*x242))+(((-1.0)*x229*x244))+(((-1.0)*x230*x240))+((x227*x240))+((x229*x243))+x233+x241+((x231*x242))+(((-1.0)*x234*x237))+(((-1.0)*x222*x232)));
evalcond[4]=((-0.2672931396)+(((0.2272)*x223*x228))+(((-1.0)*x227*x238))+(((-1.0)*x224*x239))+(((0.34172)*cj6*npy))+(((-1.42)*x241))+(((0.32)*cj6*npx))+(((0.34172)*npx*sj6))+((x236*x244))+(((-0.32)*npy*sj6))+(((-0.2272)*x223*x231))+((x230*x238))+(((-1.0)*x236*x243))+(((-1.0)*pp))+(((1.42)*px*x222))+((x224*x237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x138=((1.0)*r02);
IkReal x139=((1.0)*cj2);
IkReal x140=((1.0)*sj6);
IkReal x141=(cj3*sj2);
IkReal x142=((1.0)*r12);
IkReal x143=((((-1.0)*sj3*x139))+x141);
IkReal x144=(((cj2*sj3))+(((-1.0)*x141)));
IkReal x145=((((-1.0)*cj3*x139))+(((-1.0)*sj2*sj3)));
IkReal x146=(((r00*x143))+((r10*x145)));
IkReal x147=(((r01*x143))+((r11*x145)));
IkReal x148=(((r00*x145))+((r10*x144)));
IkReal x149=(((r01*x145))+((r11*x144)));
new_r00=((((-1.0)*x140*x147))+((cj6*x146)));
new_r01=((((-1.0)*x138*x143))+(((-1.0)*x142*x145)));
new_r02=(((sj6*x146))+((cj6*x147)));
new_r10=(((cj6*r20))+(((-1.0)*r21*x140)));
new_r11=((-1.0)*r22);
new_r12=(((cj6*r21))+((r20*sj6)));
new_r20=((((-1.0)*x140*x149))+((cj6*x148)));
new_r21=((((-1.0)*x138*x145))+(((-1.0)*x142*x144)));
new_r22=(((sj6*x148))+((cj6*x149)));
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r02)+IKsqr(((-1.0)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r02, ((-1.0)*new_r12));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - 7th_axe_robot (16fa17c397f5ef27a2b736b101153f6b)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
